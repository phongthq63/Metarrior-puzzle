/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.log.bamisu.gamethrift.service.event;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-12-11")
public class EventService {

  public interface Iface {

    public boolean addEvent(String zoneName, String jsonData) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean removeEvent(String zoneName, java.util.List<String> listId) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean addSpecialEvent(String zoneName, String jsonData) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean removeSpecialEvent(String zoneName, java.util.List<String> listId) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addEvent(String zoneName, String jsonData, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void removeEvent(String zoneName, java.util.List<String> listId, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void addSpecialEvent(String zoneName, String jsonData, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void removeSpecialEvent(String zoneName, java.util.List<String> listId, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addEvent(String zoneName, String jsonData) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_addEvent(zoneName, jsonData);
      return recv_addEvent();
    }

    public void send_addEvent(String zoneName, String jsonData) throws org.apache.thrift.TException
    {
      addEvent_args args = new addEvent_args();
      args.setZoneName(zoneName);
      args.setJsonData(jsonData);
      sendBase("addEvent", args);
    }

    public boolean recv_addEvent() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      addEvent_result result = new addEvent_result();
      receiveBase(result, "addEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addEvent failed: unknown result");
    }

    public boolean removeEvent(String zoneName, java.util.List<String> listId) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_removeEvent(zoneName, listId);
      return recv_removeEvent();
    }

    public void send_removeEvent(String zoneName, java.util.List<String> listId) throws org.apache.thrift.TException
    {
      removeEvent_args args = new removeEvent_args();
      args.setZoneName(zoneName);
      args.setListId(listId);
      sendBase("removeEvent", args);
    }

    public boolean recv_removeEvent() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      removeEvent_result result = new removeEvent_result();
      receiveBase(result, "removeEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeEvent failed: unknown result");
    }

    public boolean addSpecialEvent(String zoneName, String jsonData) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_addSpecialEvent(zoneName, jsonData);
      return recv_addSpecialEvent();
    }

    public void send_addSpecialEvent(String zoneName, String jsonData) throws org.apache.thrift.TException
    {
      addSpecialEvent_args args = new addSpecialEvent_args();
      args.setZoneName(zoneName);
      args.setJsonData(jsonData);
      sendBase("addSpecialEvent", args);
    }

    public boolean recv_addSpecialEvent() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      addSpecialEvent_result result = new addSpecialEvent_result();
      receiveBase(result, "addSpecialEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSpecialEvent failed: unknown result");
    }

    public boolean removeSpecialEvent(String zoneName, java.util.List<String> listId) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_removeSpecialEvent(zoneName, listId);
      return recv_removeSpecialEvent();
    }

    public void send_removeSpecialEvent(String zoneName, java.util.List<String> listId) throws org.apache.thrift.TException
    {
      removeSpecialEvent_args args = new removeSpecialEvent_args();
      args.setZoneName(zoneName);
      args.setListId(listId);
      sendBase("removeSpecialEvent", args);
    }

    public boolean recv_removeSpecialEvent() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      removeSpecialEvent_result result = new removeSpecialEvent_result();
      receiveBase(result, "removeSpecialEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeSpecialEvent failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addEvent(String zoneName, String jsonData, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addEvent_call method_call = new addEvent_call(zoneName, jsonData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String zoneName;
      private String jsonData;
      public addEvent_call(String zoneName, String jsonData, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zoneName = zoneName;
        this.jsonData = jsonData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addEvent_args args = new addEvent_args();
        args.setZoneName(zoneName);
        args.setJsonData(jsonData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addEvent();
      }
    }

    public void removeEvent(String zoneName, java.util.List<String> listId, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeEvent_call method_call = new removeEvent_call(zoneName, listId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String zoneName;
      private java.util.List<String> listId;
      public removeEvent_call(String zoneName, java.util.List<String> listId, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zoneName = zoneName;
        this.listId = listId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeEvent_args args = new removeEvent_args();
        args.setZoneName(zoneName);
        args.setListId(listId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeEvent();
      }
    }

    public void addSpecialEvent(String zoneName, String jsonData, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSpecialEvent_call method_call = new addSpecialEvent_call(zoneName, jsonData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSpecialEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String zoneName;
      private String jsonData;
      public addSpecialEvent_call(String zoneName, String jsonData, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zoneName = zoneName;
        this.jsonData = jsonData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSpecialEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSpecialEvent_args args = new addSpecialEvent_args();
        args.setZoneName(zoneName);
        args.setJsonData(jsonData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSpecialEvent();
      }
    }

    public void removeSpecialEvent(String zoneName, java.util.List<String> listId, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeSpecialEvent_call method_call = new removeSpecialEvent_call(zoneName, listId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeSpecialEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String zoneName;
      private java.util.List<String> listId;
      public removeSpecialEvent_call(String zoneName, java.util.List<String> listId, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zoneName = zoneName;
        this.listId = listId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeSpecialEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeSpecialEvent_args args = new removeSpecialEvent_args();
        args.setZoneName(zoneName);
        args.setListId(listId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeSpecialEvent();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addEvent", new addEvent());
      processMap.put("removeEvent", new removeEvent());
      processMap.put("addSpecialEvent", new addSpecialEvent());
      processMap.put("removeSpecialEvent", new removeSpecialEvent());
      return processMap;
    }

    public static class addEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addEvent_args> {
      public addEvent() {
        super("addEvent");
      }

      public addEvent_args getEmptyArgsInstance() {
        return new addEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addEvent_result getResult(I iface, addEvent_args args) throws org.apache.thrift.TException {
        addEvent_result result = new addEvent_result();
        try {
          result.success = iface.addEvent(args.zoneName, args.jsonData);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class removeEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeEvent_args> {
      public removeEvent() {
        super("removeEvent");
      }

      public removeEvent_args getEmptyArgsInstance() {
        return new removeEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public removeEvent_result getResult(I iface, removeEvent_args args) throws org.apache.thrift.TException {
        removeEvent_result result = new removeEvent_result();
        try {
          result.success = iface.removeEvent(args.zoneName, args.listId);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class addSpecialEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSpecialEvent_args> {
      public addSpecialEvent() {
        super("addSpecialEvent");
      }

      public addSpecialEvent_args getEmptyArgsInstance() {
        return new addSpecialEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addSpecialEvent_result getResult(I iface, addSpecialEvent_args args) throws org.apache.thrift.TException {
        addSpecialEvent_result result = new addSpecialEvent_result();
        try {
          result.success = iface.addSpecialEvent(args.zoneName, args.jsonData);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class removeSpecialEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeSpecialEvent_args> {
      public removeSpecialEvent() {
        super("removeSpecialEvent");
      }

      public removeSpecialEvent_args getEmptyArgsInstance() {
        return new removeSpecialEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public removeSpecialEvent_result getResult(I iface, removeSpecialEvent_args args) throws org.apache.thrift.TException {
        removeSpecialEvent_result result = new removeSpecialEvent_result();
        try {
          result.success = iface.removeSpecialEvent(args.zoneName, args.listId);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addEvent", new addEvent());
      processMap.put("removeEvent", new removeEvent());
      processMap.put("addSpecialEvent", new addSpecialEvent());
      processMap.put("removeSpecialEvent", new removeSpecialEvent());
      return processMap;
    }

    public static class addEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addEvent_args, Boolean> {
      public addEvent() {
        super("addEvent");
      }

      public addEvent_args getEmptyArgsInstance() {
        return new addEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addEvent_result result = new addEvent_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addEvent_result result = new addEvent_result();
            if (e instanceof com.bamisu.log.gamethrift.entities.exception.ThriftSVException) {
              result.e = (com.bamisu.log.gamethrift.entities.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.addEvent(args.zoneName, args.jsonData,resultHandler);
      }
    }

    public static class removeEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeEvent_args, Boolean> {
      public removeEvent() {
        super("removeEvent");
      }

      public removeEvent_args getEmptyArgsInstance() {
        return new removeEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            removeEvent_result result = new removeEvent_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeEvent_result result = new removeEvent_result();
            if (e instanceof com.bamisu.log.gamethrift.entities.exception.ThriftSVException) {
              result.e = (com.bamisu.log.gamethrift.entities.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.removeEvent(args.zoneName, args.listId,resultHandler);
      }
    }

    public static class addSpecialEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSpecialEvent_args, Boolean> {
      public addSpecialEvent() {
        super("addSpecialEvent");
      }

      public addSpecialEvent_args getEmptyArgsInstance() {
        return new addSpecialEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addSpecialEvent_result result = new addSpecialEvent_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addSpecialEvent_result result = new addSpecialEvent_result();
            if (e instanceof com.bamisu.log.gamethrift.entities.exception.ThriftSVException) {
              result.e = (com.bamisu.log.gamethrift.entities.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSpecialEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.addSpecialEvent(args.zoneName, args.jsonData,resultHandler);
      }
    }

    public static class removeSpecialEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeSpecialEvent_args, Boolean> {
      public removeSpecialEvent() {
        super("removeSpecialEvent");
      }

      public removeSpecialEvent_args getEmptyArgsInstance() {
        return new removeSpecialEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            removeSpecialEvent_result result = new removeSpecialEvent_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeSpecialEvent_result result = new removeSpecialEvent_result();
            if (e instanceof com.bamisu.log.gamethrift.entities.exception.ThriftSVException) {
              result.e = (com.bamisu.log.gamethrift.entities.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeSpecialEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.removeSpecialEvent(args.zoneName, args.listId,resultHandler);
      }
    }

  }

  public static class addEvent_args implements org.apache.thrift.TBase<addEvent_args, addEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<addEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEvent_args");

    private static final org.apache.thrift.protocol.TField ZONE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonData", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addEvent_argsTupleSchemeFactory();

    public String zoneName; // required
    public String jsonData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZONE_NAME((short)1, "zoneName"),
      JSON_DATA((short)2, "jsonData");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZONE_NAME
            return ZONE_NAME;
          case 2: // JSON_DATA
            return JSON_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZONE_NAME, new org.apache.thrift.meta_data.FieldMetaData("zoneName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_DATA, new org.apache.thrift.meta_data.FieldMetaData("jsonData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEvent_args.class, metaDataMap);
    }

    public addEvent_args() {
    }

    public addEvent_args(
      String zoneName,
      String jsonData)
    {
      this();
      this.zoneName = zoneName;
      this.jsonData = jsonData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEvent_args(addEvent_args other) {
      if (other.isSetZoneName()) {
        this.zoneName = other.zoneName;
      }
      if (other.isSetJsonData()) {
        this.jsonData = other.jsonData;
      }
    }

    public addEvent_args deepCopy() {
      return new addEvent_args(this);
    }

    @Override
    public void clear() {
      this.zoneName = null;
      this.jsonData = null;
    }

    public String getZoneName() {
      return this.zoneName;
    }

    public addEvent_args setZoneName(String zoneName) {
      this.zoneName = zoneName;
      return this;
    }

    public void unsetZoneName() {
      this.zoneName = null;
    }

    /** Returns true if field zoneName is set (has been assigned a value) and false otherwise */
    public boolean isSetZoneName() {
      return this.zoneName != null;
    }

    public void setZoneNameIsSet(boolean value) {
      if (!value) {
        this.zoneName = null;
      }
    }

    public String getJsonData() {
      return this.jsonData;
    }

    public addEvent_args setJsonData(String jsonData) {
      this.jsonData = jsonData;
      return this;
    }

    public void unsetJsonData() {
      this.jsonData = null;
    }

    /** Returns true if field jsonData is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonData() {
      return this.jsonData != null;
    }

    public void setJsonDataIsSet(boolean value) {
      if (!value) {
        this.jsonData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ZONE_NAME:
        if (value == null) {
          unsetZoneName();
        } else {
          setZoneName((String)value);
        }
        break;

      case JSON_DATA:
        if (value == null) {
          unsetJsonData();
        } else {
          setJsonData((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ZONE_NAME:
        return getZoneName();

      case JSON_DATA:
        return getJsonData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ZONE_NAME:
        return isSetZoneName();
      case JSON_DATA:
        return isSetJsonData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addEvent_args)
        return this.equals((addEvent_args)that);
      return false;
    }

    public boolean equals(addEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zoneName = true && this.isSetZoneName();
      boolean that_present_zoneName = true && that.isSetZoneName();
      if (this_present_zoneName || that_present_zoneName) {
        if (!(this_present_zoneName && that_present_zoneName))
          return false;
        if (!this.zoneName.equals(that.zoneName))
          return false;
      }

      boolean this_present_jsonData = true && this.isSetJsonData();
      boolean that_present_jsonData = true && that.isSetJsonData();
      if (this_present_jsonData || that_present_jsonData) {
        if (!(this_present_jsonData && that_present_jsonData))
          return false;
        if (!this.jsonData.equals(that.jsonData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZoneName()) ? 131071 : 524287);
      if (isSetZoneName())
        hashCode = hashCode * 8191 + zoneName.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonData()) ? 131071 : 524287);
      if (isSetJsonData())
        hashCode = hashCode * 8191 + jsonData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetZoneName()).compareTo(other.isSetZoneName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZoneName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneName, other.zoneName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonData()).compareTo(other.isSetJsonData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonData, other.jsonData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addEvent_args(");
      boolean first = true;

      sb.append("zoneName:");
      if (this.zoneName == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonData:");
      if (this.jsonData == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (zoneName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zoneName' was not present! Struct: " + toString());
      }
      if (jsonData == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jsonData' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEvent_argsStandardScheme getScheme() {
        return new addEvent_argsStandardScheme();
      }
    }

    private static class addEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZONE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zoneName = iprot.readString();
                struct.setZoneNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonData = iprot.readString();
                struct.setJsonDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zoneName != null) {
          oprot.writeFieldBegin(ZONE_NAME_FIELD_DESC);
          oprot.writeString(struct.zoneName);
          oprot.writeFieldEnd();
        }
        if (struct.jsonData != null) {
          oprot.writeFieldBegin(JSON_DATA_FIELD_DESC);
          oprot.writeString(struct.jsonData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEvent_argsTupleScheme getScheme() {
        return new addEvent_argsTupleScheme();
      }
    }

    private static class addEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.zoneName);
        oprot.writeString(struct.jsonData);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.zoneName = iprot.readString();
        struct.setZoneNameIsSet(true);
        struct.jsonData = iprot.readString();
        struct.setJsonDataIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addEvent_result implements org.apache.thrift.TBase<addEvent_result, addEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<addEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addEvent_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.gamethrift.entities.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEvent_result.class, metaDataMap);
    }

    public addEvent_result() {
    }

    public addEvent_result(
      boolean success,
      com.bamisu.log.gamethrift.entities.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEvent_result(addEvent_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException(other.e);
      }
    }

    public addEvent_result deepCopy() {
      return new addEvent_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addEvent_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException getE() {
      return this.e;
    }

    public addEvent_result setE(com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.gamethrift.entities.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addEvent_result)
        return this.equals((addEvent_result)that);
      return false;
    }

    public boolean equals(addEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addEvent_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEvent_resultStandardScheme getScheme() {
        return new addEvent_resultStandardScheme();
      }
    }

    private static class addEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEvent_resultTupleScheme getScheme() {
        return new addEvent_resultTupleScheme();
      }
    }

    private static class addEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeEvent_args implements org.apache.thrift.TBase<removeEvent_args, removeEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeEvent_args");

    private static final org.apache.thrift.protocol.TField ZONE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("listId", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeEvent_argsTupleSchemeFactory();

    public String zoneName; // required
    public java.util.List<String> listId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZONE_NAME((short)1, "zoneName"),
      LIST_ID((short)2, "listId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZONE_NAME
            return ZONE_NAME;
          case 2: // LIST_ID
            return LIST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZONE_NAME, new org.apache.thrift.meta_data.FieldMetaData("zoneName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIST_ID, new org.apache.thrift.meta_data.FieldMetaData("listId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeEvent_args.class, metaDataMap);
    }

    public removeEvent_args() {
    }

    public removeEvent_args(
      String zoneName,
      java.util.List<String> listId)
    {
      this();
      this.zoneName = zoneName;
      this.listId = listId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeEvent_args(removeEvent_args other) {
      if (other.isSetZoneName()) {
        this.zoneName = other.zoneName;
      }
      if (other.isSetListId()) {
        java.util.List<String> __this__listId = new java.util.ArrayList<String>(other.listId);
        this.listId = __this__listId;
      }
    }

    public removeEvent_args deepCopy() {
      return new removeEvent_args(this);
    }

    @Override
    public void clear() {
      this.zoneName = null;
      this.listId = null;
    }

    public String getZoneName() {
      return this.zoneName;
    }

    public removeEvent_args setZoneName(String zoneName) {
      this.zoneName = zoneName;
      return this;
    }

    public void unsetZoneName() {
      this.zoneName = null;
    }

    /** Returns true if field zoneName is set (has been assigned a value) and false otherwise */
    public boolean isSetZoneName() {
      return this.zoneName != null;
    }

    public void setZoneNameIsSet(boolean value) {
      if (!value) {
        this.zoneName = null;
      }
    }

    public int getListIdSize() {
      return (this.listId == null) ? 0 : this.listId.size();
    }

    public java.util.Iterator<String> getListIdIterator() {
      return (this.listId == null) ? null : this.listId.iterator();
    }

    public void addToListId(String elem) {
      if (this.listId == null) {
        this.listId = new java.util.ArrayList<String>();
      }
      this.listId.add(elem);
    }

    public java.util.List<String> getListId() {
      return this.listId;
    }

    public removeEvent_args setListId(java.util.List<String> listId) {
      this.listId = listId;
      return this;
    }

    public void unsetListId() {
      this.listId = null;
    }

    /** Returns true if field listId is set (has been assigned a value) and false otherwise */
    public boolean isSetListId() {
      return this.listId != null;
    }

    public void setListIdIsSet(boolean value) {
      if (!value) {
        this.listId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ZONE_NAME:
        if (value == null) {
          unsetZoneName();
        } else {
          setZoneName((String)value);
        }
        break;

      case LIST_ID:
        if (value == null) {
          unsetListId();
        } else {
          setListId((java.util.List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ZONE_NAME:
        return getZoneName();

      case LIST_ID:
        return getListId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ZONE_NAME:
        return isSetZoneName();
      case LIST_ID:
        return isSetListId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeEvent_args)
        return this.equals((removeEvent_args)that);
      return false;
    }

    public boolean equals(removeEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zoneName = true && this.isSetZoneName();
      boolean that_present_zoneName = true && that.isSetZoneName();
      if (this_present_zoneName || that_present_zoneName) {
        if (!(this_present_zoneName && that_present_zoneName))
          return false;
        if (!this.zoneName.equals(that.zoneName))
          return false;
      }

      boolean this_present_listId = true && this.isSetListId();
      boolean that_present_listId = true && that.isSetListId();
      if (this_present_listId || that_present_listId) {
        if (!(this_present_listId && that_present_listId))
          return false;
        if (!this.listId.equals(that.listId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZoneName()) ? 131071 : 524287);
      if (isSetZoneName())
        hashCode = hashCode * 8191 + zoneName.hashCode();

      hashCode = hashCode * 8191 + ((isSetListId()) ? 131071 : 524287);
      if (isSetListId())
        hashCode = hashCode * 8191 + listId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetZoneName()).compareTo(other.isSetZoneName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZoneName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneName, other.zoneName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListId()).compareTo(other.isSetListId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listId, other.listId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeEvent_args(");
      boolean first = true;

      sb.append("zoneName:");
      if (this.zoneName == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listId:");
      if (this.listId == null) {
        sb.append("null");
      } else {
        sb.append(this.listId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (zoneName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zoneName' was not present! Struct: " + toString());
      }
      if (listId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'listId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeEvent_argsStandardScheme getScheme() {
        return new removeEvent_argsStandardScheme();
      }
    }

    private static class removeEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZONE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zoneName = iprot.readString();
                struct.setZoneNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.listId = new java.util.ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.listId.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setListIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zoneName != null) {
          oprot.writeFieldBegin(ZONE_NAME_FIELD_DESC);
          oprot.writeString(struct.zoneName);
          oprot.writeFieldEnd();
        }
        if (struct.listId != null) {
          oprot.writeFieldBegin(LIST_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listId.size()));
            for (String _iter3 : struct.listId)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeEvent_argsTupleScheme getScheme() {
        return new removeEvent_argsTupleScheme();
      }
    }

    private static class removeEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.zoneName);
        {
          oprot.writeI32(struct.listId.size());
          for (String _iter4 : struct.listId)
          {
            oprot.writeString(_iter4);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.zoneName = iprot.readString();
        struct.setZoneNameIsSet(true);
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.listId = new java.util.ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.listId.add(_elem6);
          }
        }
        struct.setListIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeEvent_result implements org.apache.thrift.TBase<removeEvent_result, removeEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeEvent_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.gamethrift.entities.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeEvent_result.class, metaDataMap);
    }

    public removeEvent_result() {
    }

    public removeEvent_result(
      boolean success,
      com.bamisu.log.gamethrift.entities.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeEvent_result(removeEvent_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException(other.e);
      }
    }

    public removeEvent_result deepCopy() {
      return new removeEvent_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeEvent_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException getE() {
      return this.e;
    }

    public removeEvent_result setE(com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.gamethrift.entities.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeEvent_result)
        return this.equals((removeEvent_result)that);
      return false;
    }

    public boolean equals(removeEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeEvent_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeEvent_resultStandardScheme getScheme() {
        return new removeEvent_resultStandardScheme();
      }
    }

    private static class removeEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeEvent_resultTupleScheme getScheme() {
        return new removeEvent_resultTupleScheme();
      }
    }

    private static class removeEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSpecialEvent_args implements org.apache.thrift.TBase<addSpecialEvent_args, addSpecialEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSpecialEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSpecialEvent_args");

    private static final org.apache.thrift.protocol.TField ZONE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonData", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSpecialEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSpecialEvent_argsTupleSchemeFactory();

    public String zoneName; // required
    public String jsonData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZONE_NAME((short)1, "zoneName"),
      JSON_DATA((short)2, "jsonData");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZONE_NAME
            return ZONE_NAME;
          case 2: // JSON_DATA
            return JSON_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZONE_NAME, new org.apache.thrift.meta_data.FieldMetaData("zoneName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_DATA, new org.apache.thrift.meta_data.FieldMetaData("jsonData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSpecialEvent_args.class, metaDataMap);
    }

    public addSpecialEvent_args() {
    }

    public addSpecialEvent_args(
      String zoneName,
      String jsonData)
    {
      this();
      this.zoneName = zoneName;
      this.jsonData = jsonData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSpecialEvent_args(addSpecialEvent_args other) {
      if (other.isSetZoneName()) {
        this.zoneName = other.zoneName;
      }
      if (other.isSetJsonData()) {
        this.jsonData = other.jsonData;
      }
    }

    public addSpecialEvent_args deepCopy() {
      return new addSpecialEvent_args(this);
    }

    @Override
    public void clear() {
      this.zoneName = null;
      this.jsonData = null;
    }

    public String getZoneName() {
      return this.zoneName;
    }

    public addSpecialEvent_args setZoneName(String zoneName) {
      this.zoneName = zoneName;
      return this;
    }

    public void unsetZoneName() {
      this.zoneName = null;
    }

    /** Returns true if field zoneName is set (has been assigned a value) and false otherwise */
    public boolean isSetZoneName() {
      return this.zoneName != null;
    }

    public void setZoneNameIsSet(boolean value) {
      if (!value) {
        this.zoneName = null;
      }
    }

    public String getJsonData() {
      return this.jsonData;
    }

    public addSpecialEvent_args setJsonData(String jsonData) {
      this.jsonData = jsonData;
      return this;
    }

    public void unsetJsonData() {
      this.jsonData = null;
    }

    /** Returns true if field jsonData is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonData() {
      return this.jsonData != null;
    }

    public void setJsonDataIsSet(boolean value) {
      if (!value) {
        this.jsonData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ZONE_NAME:
        if (value == null) {
          unsetZoneName();
        } else {
          setZoneName((String)value);
        }
        break;

      case JSON_DATA:
        if (value == null) {
          unsetJsonData();
        } else {
          setJsonData((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ZONE_NAME:
        return getZoneName();

      case JSON_DATA:
        return getJsonData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ZONE_NAME:
        return isSetZoneName();
      case JSON_DATA:
        return isSetJsonData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSpecialEvent_args)
        return this.equals((addSpecialEvent_args)that);
      return false;
    }

    public boolean equals(addSpecialEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zoneName = true && this.isSetZoneName();
      boolean that_present_zoneName = true && that.isSetZoneName();
      if (this_present_zoneName || that_present_zoneName) {
        if (!(this_present_zoneName && that_present_zoneName))
          return false;
        if (!this.zoneName.equals(that.zoneName))
          return false;
      }

      boolean this_present_jsonData = true && this.isSetJsonData();
      boolean that_present_jsonData = true && that.isSetJsonData();
      if (this_present_jsonData || that_present_jsonData) {
        if (!(this_present_jsonData && that_present_jsonData))
          return false;
        if (!this.jsonData.equals(that.jsonData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZoneName()) ? 131071 : 524287);
      if (isSetZoneName())
        hashCode = hashCode * 8191 + zoneName.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonData()) ? 131071 : 524287);
      if (isSetJsonData())
        hashCode = hashCode * 8191 + jsonData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addSpecialEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetZoneName()).compareTo(other.isSetZoneName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZoneName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneName, other.zoneName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonData()).compareTo(other.isSetJsonData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonData, other.jsonData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSpecialEvent_args(");
      boolean first = true;

      sb.append("zoneName:");
      if (this.zoneName == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonData:");
      if (this.jsonData == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (zoneName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zoneName' was not present! Struct: " + toString());
      }
      if (jsonData == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jsonData' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSpecialEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSpecialEvent_argsStandardScheme getScheme() {
        return new addSpecialEvent_argsStandardScheme();
      }
    }

    private static class addSpecialEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSpecialEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSpecialEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZONE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zoneName = iprot.readString();
                struct.setZoneNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonData = iprot.readString();
                struct.setJsonDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSpecialEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zoneName != null) {
          oprot.writeFieldBegin(ZONE_NAME_FIELD_DESC);
          oprot.writeString(struct.zoneName);
          oprot.writeFieldEnd();
        }
        if (struct.jsonData != null) {
          oprot.writeFieldBegin(JSON_DATA_FIELD_DESC);
          oprot.writeString(struct.jsonData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSpecialEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSpecialEvent_argsTupleScheme getScheme() {
        return new addSpecialEvent_argsTupleScheme();
      }
    }

    private static class addSpecialEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSpecialEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSpecialEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.zoneName);
        oprot.writeString(struct.jsonData);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSpecialEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.zoneName = iprot.readString();
        struct.setZoneNameIsSet(true);
        struct.jsonData = iprot.readString();
        struct.setJsonDataIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSpecialEvent_result implements org.apache.thrift.TBase<addSpecialEvent_result, addSpecialEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSpecialEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSpecialEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSpecialEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSpecialEvent_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.gamethrift.entities.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSpecialEvent_result.class, metaDataMap);
    }

    public addSpecialEvent_result() {
    }

    public addSpecialEvent_result(
      boolean success,
      com.bamisu.log.gamethrift.entities.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSpecialEvent_result(addSpecialEvent_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException(other.e);
      }
    }

    public addSpecialEvent_result deepCopy() {
      return new addSpecialEvent_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addSpecialEvent_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException getE() {
      return this.e;
    }

    public addSpecialEvent_result setE(com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.gamethrift.entities.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSpecialEvent_result)
        return this.equals((addSpecialEvent_result)that);
      return false;
    }

    public boolean equals(addSpecialEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addSpecialEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSpecialEvent_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSpecialEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSpecialEvent_resultStandardScheme getScheme() {
        return new addSpecialEvent_resultStandardScheme();
      }
    }

    private static class addSpecialEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSpecialEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSpecialEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSpecialEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSpecialEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSpecialEvent_resultTupleScheme getScheme() {
        return new addSpecialEvent_resultTupleScheme();
      }
    }

    private static class addSpecialEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSpecialEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSpecialEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSpecialEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeSpecialEvent_args implements org.apache.thrift.TBase<removeSpecialEvent_args, removeSpecialEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeSpecialEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSpecialEvent_args");

    private static final org.apache.thrift.protocol.TField ZONE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("listId", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeSpecialEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeSpecialEvent_argsTupleSchemeFactory();

    public String zoneName; // required
    public java.util.List<String> listId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZONE_NAME((short)1, "zoneName"),
      LIST_ID((short)2, "listId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZONE_NAME
            return ZONE_NAME;
          case 2: // LIST_ID
            return LIST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZONE_NAME, new org.apache.thrift.meta_data.FieldMetaData("zoneName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIST_ID, new org.apache.thrift.meta_data.FieldMetaData("listId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSpecialEvent_args.class, metaDataMap);
    }

    public removeSpecialEvent_args() {
    }

    public removeSpecialEvent_args(
      String zoneName,
      java.util.List<String> listId)
    {
      this();
      this.zoneName = zoneName;
      this.listId = listId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSpecialEvent_args(removeSpecialEvent_args other) {
      if (other.isSetZoneName()) {
        this.zoneName = other.zoneName;
      }
      if (other.isSetListId()) {
        java.util.List<String> __this__listId = new java.util.ArrayList<String>(other.listId);
        this.listId = __this__listId;
      }
    }

    public removeSpecialEvent_args deepCopy() {
      return new removeSpecialEvent_args(this);
    }

    @Override
    public void clear() {
      this.zoneName = null;
      this.listId = null;
    }

    public String getZoneName() {
      return this.zoneName;
    }

    public removeSpecialEvent_args setZoneName(String zoneName) {
      this.zoneName = zoneName;
      return this;
    }

    public void unsetZoneName() {
      this.zoneName = null;
    }

    /** Returns true if field zoneName is set (has been assigned a value) and false otherwise */
    public boolean isSetZoneName() {
      return this.zoneName != null;
    }

    public void setZoneNameIsSet(boolean value) {
      if (!value) {
        this.zoneName = null;
      }
    }

    public int getListIdSize() {
      return (this.listId == null) ? 0 : this.listId.size();
    }

    public java.util.Iterator<String> getListIdIterator() {
      return (this.listId == null) ? null : this.listId.iterator();
    }

    public void addToListId(String elem) {
      if (this.listId == null) {
        this.listId = new java.util.ArrayList<String>();
      }
      this.listId.add(elem);
    }

    public java.util.List<String> getListId() {
      return this.listId;
    }

    public removeSpecialEvent_args setListId(java.util.List<String> listId) {
      this.listId = listId;
      return this;
    }

    public void unsetListId() {
      this.listId = null;
    }

    /** Returns true if field listId is set (has been assigned a value) and false otherwise */
    public boolean isSetListId() {
      return this.listId != null;
    }

    public void setListIdIsSet(boolean value) {
      if (!value) {
        this.listId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ZONE_NAME:
        if (value == null) {
          unsetZoneName();
        } else {
          setZoneName((String)value);
        }
        break;

      case LIST_ID:
        if (value == null) {
          unsetListId();
        } else {
          setListId((java.util.List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ZONE_NAME:
        return getZoneName();

      case LIST_ID:
        return getListId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ZONE_NAME:
        return isSetZoneName();
      case LIST_ID:
        return isSetListId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSpecialEvent_args)
        return this.equals((removeSpecialEvent_args)that);
      return false;
    }

    public boolean equals(removeSpecialEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zoneName = true && this.isSetZoneName();
      boolean that_present_zoneName = true && that.isSetZoneName();
      if (this_present_zoneName || that_present_zoneName) {
        if (!(this_present_zoneName && that_present_zoneName))
          return false;
        if (!this.zoneName.equals(that.zoneName))
          return false;
      }

      boolean this_present_listId = true && this.isSetListId();
      boolean that_present_listId = true && that.isSetListId();
      if (this_present_listId || that_present_listId) {
        if (!(this_present_listId && that_present_listId))
          return false;
        if (!this.listId.equals(that.listId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZoneName()) ? 131071 : 524287);
      if (isSetZoneName())
        hashCode = hashCode * 8191 + zoneName.hashCode();

      hashCode = hashCode * 8191 + ((isSetListId()) ? 131071 : 524287);
      if (isSetListId())
        hashCode = hashCode * 8191 + listId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeSpecialEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetZoneName()).compareTo(other.isSetZoneName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZoneName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneName, other.zoneName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListId()).compareTo(other.isSetListId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listId, other.listId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSpecialEvent_args(");
      boolean first = true;

      sb.append("zoneName:");
      if (this.zoneName == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listId:");
      if (this.listId == null) {
        sb.append("null");
      } else {
        sb.append(this.listId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (zoneName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zoneName' was not present! Struct: " + toString());
      }
      if (listId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'listId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSpecialEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSpecialEvent_argsStandardScheme getScheme() {
        return new removeSpecialEvent_argsStandardScheme();
      }
    }

    private static class removeSpecialEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeSpecialEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSpecialEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZONE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zoneName = iprot.readString();
                struct.setZoneNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.listId = new java.util.ArrayList<String>(_list8.size);
                  String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.listId.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setListIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSpecialEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zoneName != null) {
          oprot.writeFieldBegin(ZONE_NAME_FIELD_DESC);
          oprot.writeString(struct.zoneName);
          oprot.writeFieldEnd();
        }
        if (struct.listId != null) {
          oprot.writeFieldBegin(LIST_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listId.size()));
            for (String _iter11 : struct.listId)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSpecialEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSpecialEvent_argsTupleScheme getScheme() {
        return new removeSpecialEvent_argsTupleScheme();
      }
    }

    private static class removeSpecialEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeSpecialEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSpecialEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.zoneName);
        {
          oprot.writeI32(struct.listId.size());
          for (String _iter12 : struct.listId)
          {
            oprot.writeString(_iter12);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSpecialEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.zoneName = iprot.readString();
        struct.setZoneNameIsSet(true);
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.listId = new java.util.ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.listId.add(_elem14);
          }
        }
        struct.setListIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeSpecialEvent_result implements org.apache.thrift.TBase<removeSpecialEvent_result, removeSpecialEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeSpecialEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSpecialEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeSpecialEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeSpecialEvent_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.gamethrift.entities.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSpecialEvent_result.class, metaDataMap);
    }

    public removeSpecialEvent_result() {
    }

    public removeSpecialEvent_result(
      boolean success,
      com.bamisu.log.gamethrift.entities.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSpecialEvent_result(removeSpecialEvent_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException(other.e);
      }
    }

    public removeSpecialEvent_result deepCopy() {
      return new removeSpecialEvent_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeSpecialEvent_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException getE() {
      return this.e;
    }

    public removeSpecialEvent_result setE(com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.gamethrift.entities.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSpecialEvent_result)
        return this.equals((removeSpecialEvent_result)that);
      return false;
    }

    public boolean equals(removeSpecialEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeSpecialEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSpecialEvent_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSpecialEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSpecialEvent_resultStandardScheme getScheme() {
        return new removeSpecialEvent_resultStandardScheme();
      }
    }

    private static class removeSpecialEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeSpecialEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSpecialEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSpecialEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSpecialEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSpecialEvent_resultTupleScheme getScheme() {
        return new removeSpecialEvent_resultTupleScheme();
      }
    }

    private static class removeSpecialEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeSpecialEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSpecialEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSpecialEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
