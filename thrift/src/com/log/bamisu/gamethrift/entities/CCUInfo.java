/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bamisu.log.gamethrift.entities;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-08-13")
public class CCUInfo implements org.apache.thrift.TBase<CCUInfo, CCUInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CCUInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CCUInfo");

  private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ALL_FIELD_DESC = new org.apache.thrift.protocol.TField("all", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ANDROID_FIELD_DESC = new org.apache.thrift.protocol.TField("android", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IOS_FIELD_DESC = new org.apache.thrift.protocol.TField("ios", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WEB_FIELD_DESC = new org.apache.thrift.protocol.TField("web", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField GNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gname", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField INGAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ingame", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CCUInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CCUInfoTupleSchemeFactory();

  public int gid; // required
  public int all; // required
  public int android; // required
  public int ios; // required
  public int web; // required
  public String gname; // required
  public int ingame; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GID((short)1, "gid"),
    ALL((short)2, "all"),
    ANDROID((short)3, "android"),
    IOS((short)4, "ios"),
    WEB((short)5, "web"),
    GNAME((short)6, "gname"),
    INGAME((short)7, "ingame");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GID
          return GID;
        case 2: // ALL
          return ALL;
        case 3: // ANDROID
          return ANDROID;
        case 4: // IOS
          return IOS;
        case 5: // WEB
          return WEB;
        case 6: // GNAME
          return GNAME;
        case 7: // INGAME
          return INGAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GID_ISSET_ID = 0;
  private static final int __ALL_ISSET_ID = 1;
  private static final int __ANDROID_ISSET_ID = 2;
  private static final int __IOS_ISSET_ID = 3;
  private static final int __WEB_ISSET_ID = 4;
  private static final int __INGAME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GID, new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ALL, new org.apache.thrift.meta_data.FieldMetaData("all", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ANDROID, new org.apache.thrift.meta_data.FieldMetaData("android", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IOS, new org.apache.thrift.meta_data.FieldMetaData("ios", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.WEB, new org.apache.thrift.meta_data.FieldMetaData("web", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.GNAME, new org.apache.thrift.meta_data.FieldMetaData("gname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INGAME, new org.apache.thrift.meta_data.FieldMetaData("ingame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CCUInfo.class, metaDataMap);
  }

  public CCUInfo() {
  }

  public CCUInfo(
    int gid,
    int all,
    int android,
    int ios,
    int web,
    String gname,
    int ingame)
  {
    this();
    this.gid = gid;
    setGidIsSet(true);
    this.all = all;
    setAllIsSet(true);
    this.android = android;
    setAndroidIsSet(true);
    this.ios = ios;
    setIosIsSet(true);
    this.web = web;
    setWebIsSet(true);
    this.gname = gname;
    this.ingame = ingame;
    setIngameIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CCUInfo(CCUInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.gid = other.gid;
    this.all = other.all;
    this.android = other.android;
    this.ios = other.ios;
    this.web = other.web;
    if (other.isSetGname()) {
      this.gname = other.gname;
    }
    this.ingame = other.ingame;
  }

  public CCUInfo deepCopy() {
    return new CCUInfo(this);
  }

  @Override
  public void clear() {
    setGidIsSet(false);
    this.gid = 0;
    setAllIsSet(false);
    this.all = 0;
    setAndroidIsSet(false);
    this.android = 0;
    setIosIsSet(false);
    this.ios = 0;
    setWebIsSet(false);
    this.web = 0;
    this.gname = null;
    setIngameIsSet(false);
    this.ingame = 0;
  }

  public int getGid() {
    return this.gid;
  }

  public CCUInfo setGid(int gid) {
    this.gid = gid;
    setGidIsSet(true);
    return this;
  }

  public void unsetGid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GID_ISSET_ID);
  }

  /** Returns true if field gid is set (has been assigned a value) and false otherwise */
  public boolean isSetGid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GID_ISSET_ID);
  }

  public void setGidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GID_ISSET_ID, value);
  }

  public int getAll() {
    return this.all;
  }

  public CCUInfo setAll(int all) {
    this.all = all;
    setAllIsSet(true);
    return this;
  }

  public void unsetAll() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALL_ISSET_ID);
  }

  /** Returns true if field all is set (has been assigned a value) and false otherwise */
  public boolean isSetAll() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALL_ISSET_ID);
  }

  public void setAllIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALL_ISSET_ID, value);
  }

  public int getAndroid() {
    return this.android;
  }

  public CCUInfo setAndroid(int android) {
    this.android = android;
    setAndroidIsSet(true);
    return this;
  }

  public void unsetAndroid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANDROID_ISSET_ID);
  }

  /** Returns true if field android is set (has been assigned a value) and false otherwise */
  public boolean isSetAndroid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANDROID_ISSET_ID);
  }

  public void setAndroidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANDROID_ISSET_ID, value);
  }

  public int getIos() {
    return this.ios;
  }

  public CCUInfo setIos(int ios) {
    this.ios = ios;
    setIosIsSet(true);
    return this;
  }

  public void unsetIos() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IOS_ISSET_ID);
  }

  /** Returns true if field ios is set (has been assigned a value) and false otherwise */
  public boolean isSetIos() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IOS_ISSET_ID);
  }

  public void setIosIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IOS_ISSET_ID, value);
  }

  public int getWeb() {
    return this.web;
  }

  public CCUInfo setWeb(int web) {
    this.web = web;
    setWebIsSet(true);
    return this;
  }

  public void unsetWeb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WEB_ISSET_ID);
  }

  /** Returns true if field web is set (has been assigned a value) and false otherwise */
  public boolean isSetWeb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WEB_ISSET_ID);
  }

  public void setWebIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WEB_ISSET_ID, value);
  }

  public String getGname() {
    return this.gname;
  }

  public CCUInfo setGname(String gname) {
    this.gname = gname;
    return this;
  }

  public void unsetGname() {
    this.gname = null;
  }

  /** Returns true if field gname is set (has been assigned a value) and false otherwise */
  public boolean isSetGname() {
    return this.gname != null;
  }

  public void setGnameIsSet(boolean value) {
    if (!value) {
      this.gname = null;
    }
  }

  public int getIngame() {
    return this.ingame;
  }

  public CCUInfo setIngame(int ingame) {
    this.ingame = ingame;
    setIngameIsSet(true);
    return this;
  }

  public void unsetIngame() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INGAME_ISSET_ID);
  }

  /** Returns true if field ingame is set (has been assigned a value) and false otherwise */
  public boolean isSetIngame() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INGAME_ISSET_ID);
  }

  public void setIngameIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INGAME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GID:
      if (value == null) {
        unsetGid();
      } else {
        setGid((Integer)value);
      }
      break;

    case ALL:
      if (value == null) {
        unsetAll();
      } else {
        setAll((Integer)value);
      }
      break;

    case ANDROID:
      if (value == null) {
        unsetAndroid();
      } else {
        setAndroid((Integer)value);
      }
      break;

    case IOS:
      if (value == null) {
        unsetIos();
      } else {
        setIos((Integer)value);
      }
      break;

    case WEB:
      if (value == null) {
        unsetWeb();
      } else {
        setWeb((Integer)value);
      }
      break;

    case GNAME:
      if (value == null) {
        unsetGname();
      } else {
        setGname((String)value);
      }
      break;

    case INGAME:
      if (value == null) {
        unsetIngame();
      } else {
        setIngame((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GID:
      return getGid();

    case ALL:
      return getAll();

    case ANDROID:
      return getAndroid();

    case IOS:
      return getIos();

    case WEB:
      return getWeb();

    case GNAME:
      return getGname();

    case INGAME:
      return getIngame();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GID:
      return isSetGid();
    case ALL:
      return isSetAll();
    case ANDROID:
      return isSetAndroid();
    case IOS:
      return isSetIos();
    case WEB:
      return isSetWeb();
    case GNAME:
      return isSetGname();
    case INGAME:
      return isSetIngame();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CCUInfo)
      return this.equals((CCUInfo)that);
    return false;
  }

  public boolean equals(CCUInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_gid = true;
    boolean that_present_gid = true;
    if (this_present_gid || that_present_gid) {
      if (!(this_present_gid && that_present_gid))
        return false;
      if (this.gid != that.gid)
        return false;
    }

    boolean this_present_all = true;
    boolean that_present_all = true;
    if (this_present_all || that_present_all) {
      if (!(this_present_all && that_present_all))
        return false;
      if (this.all != that.all)
        return false;
    }

    boolean this_present_android = true;
    boolean that_present_android = true;
    if (this_present_android || that_present_android) {
      if (!(this_present_android && that_present_android))
        return false;
      if (this.android != that.android)
        return false;
    }

    boolean this_present_ios = true;
    boolean that_present_ios = true;
    if (this_present_ios || that_present_ios) {
      if (!(this_present_ios && that_present_ios))
        return false;
      if (this.ios != that.ios)
        return false;
    }

    boolean this_present_web = true;
    boolean that_present_web = true;
    if (this_present_web || that_present_web) {
      if (!(this_present_web && that_present_web))
        return false;
      if (this.web != that.web)
        return false;
    }

    boolean this_present_gname = true && this.isSetGname();
    boolean that_present_gname = true && that.isSetGname();
    if (this_present_gname || that_present_gname) {
      if (!(this_present_gname && that_present_gname))
        return false;
      if (!this.gname.equals(that.gname))
        return false;
    }

    boolean this_present_ingame = true;
    boolean that_present_ingame = true;
    if (this_present_ingame || that_present_ingame) {
      if (!(this_present_ingame && that_present_ingame))
        return false;
      if (this.ingame != that.ingame)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + gid;

    hashCode = hashCode * 8191 + all;

    hashCode = hashCode * 8191 + android;

    hashCode = hashCode * 8191 + ios;

    hashCode = hashCode * 8191 + web;

    hashCode = hashCode * 8191 + ((isSetGname()) ? 131071 : 524287);
    if (isSetGname())
      hashCode = hashCode * 8191 + gname.hashCode();

    hashCode = hashCode * 8191 + ingame;

    return hashCode;
  }

  @Override
  public int compareTo(CCUInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGid()).compareTo(other.isSetGid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, other.gid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAll()).compareTo(other.isSetAll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all, other.all);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAndroid()).compareTo(other.isSetAndroid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAndroid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.android, other.android);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIos()).compareTo(other.isSetIos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ios, other.ios);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeb()).compareTo(other.isSetWeb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.web, other.web);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGname()).compareTo(other.isSetGname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gname, other.gname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIngame()).compareTo(other.isSetIngame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIngame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ingame, other.ingame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CCUInfo(");
    boolean first = true;

    sb.append("gid:");
    sb.append(this.gid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("all:");
    sb.append(this.all);
    first = false;
    if (!first) sb.append(", ");
    sb.append("android:");
    sb.append(this.android);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ios:");
    sb.append(this.ios);
    first = false;
    if (!first) sb.append(", ");
    sb.append("web:");
    sb.append(this.web);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gname:");
    if (this.gname == null) {
      sb.append("null");
    } else {
      sb.append(this.gname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ingame:");
    sb.append(this.ingame);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CCUInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CCUInfoStandardScheme getScheme() {
      return new CCUInfoStandardScheme();
    }
  }

  private static class CCUInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<CCUInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CCUInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gid = iprot.readI32();
              struct.setGidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.all = iprot.readI32();
              struct.setAllIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANDROID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.android = iprot.readI32();
              struct.setAndroidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IOS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ios = iprot.readI32();
              struct.setIosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WEB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.web = iprot.readI32();
              struct.setWebIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gname = iprot.readString();
              struct.setGnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INGAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ingame = iprot.readI32();
              struct.setIngameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CCUInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GID_FIELD_DESC);
      oprot.writeI32(struct.gid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALL_FIELD_DESC);
      oprot.writeI32(struct.all);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANDROID_FIELD_DESC);
      oprot.writeI32(struct.android);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IOS_FIELD_DESC);
      oprot.writeI32(struct.ios);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEB_FIELD_DESC);
      oprot.writeI32(struct.web);
      oprot.writeFieldEnd();
      if (struct.gname != null) {
        oprot.writeFieldBegin(GNAME_FIELD_DESC);
        oprot.writeString(struct.gname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INGAME_FIELD_DESC);
      oprot.writeI32(struct.ingame);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CCUInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CCUInfoTupleScheme getScheme() {
      return new CCUInfoTupleScheme();
    }
  }

  private static class CCUInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<CCUInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CCUInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGid()) {
        optionals.set(0);
      }
      if (struct.isSetAll()) {
        optionals.set(1);
      }
      if (struct.isSetAndroid()) {
        optionals.set(2);
      }
      if (struct.isSetIos()) {
        optionals.set(3);
      }
      if (struct.isSetWeb()) {
        optionals.set(4);
      }
      if (struct.isSetGname()) {
        optionals.set(5);
      }
      if (struct.isSetIngame()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetGid()) {
        oprot.writeI32(struct.gid);
      }
      if (struct.isSetAll()) {
        oprot.writeI32(struct.all);
      }
      if (struct.isSetAndroid()) {
        oprot.writeI32(struct.android);
      }
      if (struct.isSetIos()) {
        oprot.writeI32(struct.ios);
      }
      if (struct.isSetWeb()) {
        oprot.writeI32(struct.web);
      }
      if (struct.isSetGname()) {
        oprot.writeString(struct.gname);
      }
      if (struct.isSetIngame()) {
        oprot.writeI32(struct.ingame);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CCUInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.gid = iprot.readI32();
        struct.setGidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.all = iprot.readI32();
        struct.setAllIsSet(true);
      }
      if (incoming.get(2)) {
        struct.android = iprot.readI32();
        struct.setAndroidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ios = iprot.readI32();
        struct.setIosIsSet(true);
      }
      if (incoming.get(4)) {
        struct.web = iprot.readI32();
        struct.setWebIsSet(true);
      }
      if (incoming.get(5)) {
        struct.gname = iprot.readString();
        struct.setGnameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ingame = iprot.readI32();
        struct.setIngameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

