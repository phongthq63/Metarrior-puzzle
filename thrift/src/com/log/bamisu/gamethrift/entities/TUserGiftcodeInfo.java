/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bamisu.log.gamethrift.entities;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-06")
public class TUserGiftcodeInfo implements org.apache.thrift.TBase<TUserGiftcodeInfo, TUserGiftcodeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TUserGiftcodeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUserGiftcodeInfo");

  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("chip", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField XU_FIELD_DESC = new org.apache.thrift.protocol.TField("xu", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TUserGiftcodeInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TUserGiftcodeInfoTupleSchemeFactory();

  public int time; // required
  public long uid; // required
  public String dname; // required
  public long chip; // required
  public long xu; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME((short)1, "time"),
    UID((short)2, "uid"),
    DNAME((short)3, "dname"),
    CHIP((short)4, "chip"),
    XU((short)5, "xu");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME
          return TIME;
        case 2: // UID
          return UID;
        case 3: // DNAME
          return DNAME;
        case 4: // CHIP
          return CHIP;
        case 5: // XU
          return XU;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __CHIP_ISSET_ID = 2;
  private static final int __XU_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.DNAME, new org.apache.thrift.meta_data.FieldMetaData("dname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHIP, new org.apache.thrift.meta_data.FieldMetaData("chip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.XU, new org.apache.thrift.meta_data.FieldMetaData("xu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUserGiftcodeInfo.class, metaDataMap);
  }

  public TUserGiftcodeInfo() {
  }

  public TUserGiftcodeInfo(
    int time,
    long uid,
    String dname,
    long chip,
    long xu)
  {
    this();
    this.time = time;
    setTimeIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.dname = dname;
    this.chip = chip;
    setChipIsSet(true);
    this.xu = xu;
    setXuIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUserGiftcodeInfo(TUserGiftcodeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.time = other.time;
    this.uid = other.uid;
    if (other.isSetDname()) {
      this.dname = other.dname;
    }
    this.chip = other.chip;
    this.xu = other.xu;
  }

  public TUserGiftcodeInfo deepCopy() {
    return new TUserGiftcodeInfo(this);
  }

  @Override
  public void clear() {
    setTimeIsSet(false);
    this.time = 0;
    setUidIsSet(false);
    this.uid = 0;
    this.dname = null;
    setChipIsSet(false);
    this.chip = 0;
    setXuIsSet(false);
    this.xu = 0;
  }

  public int getTime() {
    return this.time;
  }

  public TUserGiftcodeInfo setTime(int time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public long getUid() {
    return this.uid;
  }

  public TUserGiftcodeInfo setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public String getDname() {
    return this.dname;
  }

  public TUserGiftcodeInfo setDname(String dname) {
    this.dname = dname;
    return this;
  }

  public void unsetDname() {
    this.dname = null;
  }

  /** Returns true if field dname is set (has been assigned a value) and false otherwise */
  public boolean isSetDname() {
    return this.dname != null;
  }

  public void setDnameIsSet(boolean value) {
    if (!value) {
      this.dname = null;
    }
  }

  public long getChip() {
    return this.chip;
  }

  public TUserGiftcodeInfo setChip(long chip) {
    this.chip = chip;
    setChipIsSet(true);
    return this;
  }

  public void unsetChip() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHIP_ISSET_ID);
  }

  /** Returns true if field chip is set (has been assigned a value) and false otherwise */
  public boolean isSetChip() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHIP_ISSET_ID);
  }

  public void setChipIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHIP_ISSET_ID, value);
  }

  public long getXu() {
    return this.xu;
  }

  public TUserGiftcodeInfo setXu(long xu) {
    this.xu = xu;
    setXuIsSet(true);
    return this;
  }

  public void unsetXu() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __XU_ISSET_ID);
  }

  /** Returns true if field xu is set (has been assigned a value) and false otherwise */
  public boolean isSetXu() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __XU_ISSET_ID);
  }

  public void setXuIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __XU_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Integer)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case DNAME:
      if (value == null) {
        unsetDname();
      } else {
        setDname((String)value);
      }
      break;

    case CHIP:
      if (value == null) {
        unsetChip();
      } else {
        setChip((Long)value);
      }
      break;

    case XU:
      if (value == null) {
        unsetXu();
      } else {
        setXu((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME:
      return getTime();

    case UID:
      return getUid();

    case DNAME:
      return getDname();

    case CHIP:
      return getChip();

    case XU:
      return getXu();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME:
      return isSetTime();
    case UID:
      return isSetUid();
    case DNAME:
      return isSetDname();
    case CHIP:
      return isSetChip();
    case XU:
      return isSetXu();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUserGiftcodeInfo)
      return this.equals((TUserGiftcodeInfo)that);
    return false;
  }

  public boolean equals(TUserGiftcodeInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_dname = true && this.isSetDname();
    boolean that_present_dname = true && that.isSetDname();
    if (this_present_dname || that_present_dname) {
      if (!(this_present_dname && that_present_dname))
        return false;
      if (!this.dname.equals(that.dname))
        return false;
    }

    boolean this_present_chip = true;
    boolean that_present_chip = true;
    if (this_present_chip || that_present_chip) {
      if (!(this_present_chip && that_present_chip))
        return false;
      if (this.chip != that.chip)
        return false;
    }

    boolean this_present_xu = true;
    boolean that_present_xu = true;
    if (this_present_xu || that_present_xu) {
      if (!(this_present_xu && that_present_xu))
        return false;
      if (this.xu != that.xu)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + time;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

    hashCode = hashCode * 8191 + ((isSetDname()) ? 131071 : 524287);
    if (isSetDname())
      hashCode = hashCode * 8191 + dname.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(chip);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(xu);

    return hashCode;
  }

  @Override
  public int compareTo(TUserGiftcodeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDname()).compareTo(other.isSetDname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dname, other.dname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChip()).compareTo(other.isSetChip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chip, other.chip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXu()).compareTo(other.isSetXu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xu, other.xu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUserGiftcodeInfo(");
    boolean first = true;

    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dname:");
    if (this.dname == null) {
      sb.append("null");
    } else {
      sb.append(this.dname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chip:");
    sb.append(this.chip);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xu:");
    sb.append(this.xu);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUserGiftcodeInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TUserGiftcodeInfoStandardScheme getScheme() {
      return new TUserGiftcodeInfoStandardScheme();
    }
  }

  private static class TUserGiftcodeInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TUserGiftcodeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUserGiftcodeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time = iprot.readI32();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dname = iprot.readString();
              struct.setDnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHIP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chip = iprot.readI64();
              struct.setChipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // XU
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.xu = iprot.readI64();
              struct.setXuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUserGiftcodeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      if (struct.dname != null) {
        oprot.writeFieldBegin(DNAME_FIELD_DESC);
        oprot.writeString(struct.dname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHIP_FIELD_DESC);
      oprot.writeI64(struct.chip);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(XU_FIELD_DESC);
      oprot.writeI64(struct.xu);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUserGiftcodeInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TUserGiftcodeInfoTupleScheme getScheme() {
      return new TUserGiftcodeInfoTupleScheme();
    }
  }

  private static class TUserGiftcodeInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TUserGiftcodeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUserGiftcodeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTime()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetDname()) {
        optionals.set(2);
      }
      if (struct.isSetChip()) {
        optionals.set(3);
      }
      if (struct.isSetXu()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTime()) {
        oprot.writeI32(struct.time);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetDname()) {
        oprot.writeString(struct.dname);
      }
      if (struct.isSetChip()) {
        oprot.writeI64(struct.chip);
      }
      if (struct.isSetXu()) {
        oprot.writeI64(struct.xu);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUserGiftcodeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.time = iprot.readI32();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dname = iprot.readString();
        struct.setDnameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chip = iprot.readI64();
        struct.setChipIsSet(true);
      }
      if (incoming.get(4)) {
        struct.xu = iprot.readI64();
        struct.setXuIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

