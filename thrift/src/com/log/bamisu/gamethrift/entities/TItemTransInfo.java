/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bamisu.log.gamethrift.entities;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-05")
public class TItemTransInfo implements org.apache.thrift.TBase<TItemTransInfo, TItemTransInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TItemTransInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TItemTransInfo");

  private static final org.apache.thrift.protocol.TField ACT_FIELD_DESC = new org.apache.thrift.protocol.TField("act", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sender", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("reciver", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DES_FIELD_DESC = new org.apache.thrift.protocol.TField("des", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField QTT_FIELD_DESC = new org.apache.thrift.protocol.TField("qtt", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField INAME_FIELD_DESC = new org.apache.thrift.protocol.TField("iname", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TItemTransInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TItemTransInfoTupleSchemeFactory();

  public String act; // required
  public String sender; // required
  public String reciver; // required
  public int time; // required
  public String des; // required
  public int item; // required
  public int qtt; // required
  public String iname; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACT((short)1, "act"),
    SENDER((short)2, "sender"),
    RECIVER((short)3, "reciver"),
    TIME((short)4, "time"),
    DES((short)5, "des"),
    ITEM((short)6, "item"),
    QTT((short)7, "qtt"),
    INAME((short)8, "iname");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACT
          return ACT;
        case 2: // SENDER
          return SENDER;
        case 3: // RECIVER
          return RECIVER;
        case 4: // TIME
          return TIME;
        case 5: // DES
          return DES;
        case 6: // ITEM
          return ITEM;
        case 7: // QTT
          return QTT;
        case 8: // INAME
          return INAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private static final int __ITEM_ISSET_ID = 1;
  private static final int __QTT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACT, new org.apache.thrift.meta_data.FieldMetaData("act", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDER, new org.apache.thrift.meta_data.FieldMetaData("sender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECIVER, new org.apache.thrift.meta_data.FieldMetaData("reciver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.DES, new org.apache.thrift.meta_data.FieldMetaData("des", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.QTT, new org.apache.thrift.meta_data.FieldMetaData("qtt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.INAME, new org.apache.thrift.meta_data.FieldMetaData("iname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TItemTransInfo.class, metaDataMap);
  }

  public TItemTransInfo() {
  }

  public TItemTransInfo(
    String act,
    String sender,
    String reciver,
    int time,
    String des,
    int item,
    int qtt,
    String iname)
  {
    this();
    this.act = act;
    this.sender = sender;
    this.reciver = reciver;
    this.time = time;
    setTimeIsSet(true);
    this.des = des;
    this.item = item;
    setItemIsSet(true);
    this.qtt = qtt;
    setQttIsSet(true);
    this.iname = iname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TItemTransInfo(TItemTransInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAct()) {
      this.act = other.act;
    }
    if (other.isSetSender()) {
      this.sender = other.sender;
    }
    if (other.isSetReciver()) {
      this.reciver = other.reciver;
    }
    this.time = other.time;
    if (other.isSetDes()) {
      this.des = other.des;
    }
    this.item = other.item;
    this.qtt = other.qtt;
    if (other.isSetIname()) {
      this.iname = other.iname;
    }
  }

  public TItemTransInfo deepCopy() {
    return new TItemTransInfo(this);
  }

  @Override
  public void clear() {
    this.act = null;
    this.sender = null;
    this.reciver = null;
    setTimeIsSet(false);
    this.time = 0;
    this.des = null;
    setItemIsSet(false);
    this.item = 0;
    setQttIsSet(false);
    this.qtt = 0;
    this.iname = null;
  }

  public String getAct() {
    return this.act;
  }

  public TItemTransInfo setAct(String act) {
    this.act = act;
    return this;
  }

  public void unsetAct() {
    this.act = null;
  }

  /** Returns true if field act is set (has been assigned a value) and false otherwise */
  public boolean isSetAct() {
    return this.act != null;
  }

  public void setActIsSet(boolean value) {
    if (!value) {
      this.act = null;
    }
  }

  public String getSender() {
    return this.sender;
  }

  public TItemTransInfo setSender(String sender) {
    this.sender = sender;
    return this;
  }

  public void unsetSender() {
    this.sender = null;
  }

  /** Returns true if field sender is set (has been assigned a value) and false otherwise */
  public boolean isSetSender() {
    return this.sender != null;
  }

  public void setSenderIsSet(boolean value) {
    if (!value) {
      this.sender = null;
    }
  }

  public String getReciver() {
    return this.reciver;
  }

  public TItemTransInfo setReciver(String reciver) {
    this.reciver = reciver;
    return this;
  }

  public void unsetReciver() {
    this.reciver = null;
  }

  /** Returns true if field reciver is set (has been assigned a value) and false otherwise */
  public boolean isSetReciver() {
    return this.reciver != null;
  }

  public void setReciverIsSet(boolean value) {
    if (!value) {
      this.reciver = null;
    }
  }

  public int getTime() {
    return this.time;
  }

  public TItemTransInfo setTime(int time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public String getDes() {
    return this.des;
  }

  public TItemTransInfo setDes(String des) {
    this.des = des;
    return this;
  }

  public void unsetDes() {
    this.des = null;
  }

  /** Returns true if field des is set (has been assigned a value) and false otherwise */
  public boolean isSetDes() {
    return this.des != null;
  }

  public void setDesIsSet(boolean value) {
    if (!value) {
      this.des = null;
    }
  }

  public int getItem() {
    return this.item;
  }

  public TItemTransInfo setItem(int item) {
    this.item = item;
    setItemIsSet(true);
    return this;
  }

  public void unsetItem() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ITEM_ISSET_ID);
  }

  /** Returns true if field item is set (has been assigned a value) and false otherwise */
  public boolean isSetItem() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ITEM_ISSET_ID);
  }

  public void setItemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ITEM_ISSET_ID, value);
  }

  public int getQtt() {
    return this.qtt;
  }

  public TItemTransInfo setQtt(int qtt) {
    this.qtt = qtt;
    setQttIsSet(true);
    return this;
  }

  public void unsetQtt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QTT_ISSET_ID);
  }

  /** Returns true if field qtt is set (has been assigned a value) and false otherwise */
  public boolean isSetQtt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QTT_ISSET_ID);
  }

  public void setQttIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QTT_ISSET_ID, value);
  }

  public String getIname() {
    return this.iname;
  }

  public TItemTransInfo setIname(String iname) {
    this.iname = iname;
    return this;
  }

  public void unsetIname() {
    this.iname = null;
  }

  /** Returns true if field iname is set (has been assigned a value) and false otherwise */
  public boolean isSetIname() {
    return this.iname != null;
  }

  public void setInameIsSet(boolean value) {
    if (!value) {
      this.iname = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACT:
      if (value == null) {
        unsetAct();
      } else {
        setAct((String)value);
      }
      break;

    case SENDER:
      if (value == null) {
        unsetSender();
      } else {
        setSender((String)value);
      }
      break;

    case RECIVER:
      if (value == null) {
        unsetReciver();
      } else {
        setReciver((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Integer)value);
      }
      break;

    case DES:
      if (value == null) {
        unsetDes();
      } else {
        setDes((String)value);
      }
      break;

    case ITEM:
      if (value == null) {
        unsetItem();
      } else {
        setItem((Integer)value);
      }
      break;

    case QTT:
      if (value == null) {
        unsetQtt();
      } else {
        setQtt((Integer)value);
      }
      break;

    case INAME:
      if (value == null) {
        unsetIname();
      } else {
        setIname((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACT:
      return getAct();

    case SENDER:
      return getSender();

    case RECIVER:
      return getReciver();

    case TIME:
      return getTime();

    case DES:
      return getDes();

    case ITEM:
      return getItem();

    case QTT:
      return getQtt();

    case INAME:
      return getIname();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACT:
      return isSetAct();
    case SENDER:
      return isSetSender();
    case RECIVER:
      return isSetReciver();
    case TIME:
      return isSetTime();
    case DES:
      return isSetDes();
    case ITEM:
      return isSetItem();
    case QTT:
      return isSetQtt();
    case INAME:
      return isSetIname();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TItemTransInfo)
      return this.equals((TItemTransInfo)that);
    return false;
  }

  public boolean equals(TItemTransInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_act = true && this.isSetAct();
    boolean that_present_act = true && that.isSetAct();
    if (this_present_act || that_present_act) {
      if (!(this_present_act && that_present_act))
        return false;
      if (!this.act.equals(that.act))
        return false;
    }

    boolean this_present_sender = true && this.isSetSender();
    boolean that_present_sender = true && that.isSetSender();
    if (this_present_sender || that_present_sender) {
      if (!(this_present_sender && that_present_sender))
        return false;
      if (!this.sender.equals(that.sender))
        return false;
    }

    boolean this_present_reciver = true && this.isSetReciver();
    boolean that_present_reciver = true && that.isSetReciver();
    if (this_present_reciver || that_present_reciver) {
      if (!(this_present_reciver && that_present_reciver))
        return false;
      if (!this.reciver.equals(that.reciver))
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_des = true && this.isSetDes();
    boolean that_present_des = true && that.isSetDes();
    if (this_present_des || that_present_des) {
      if (!(this_present_des && that_present_des))
        return false;
      if (!this.des.equals(that.des))
        return false;
    }

    boolean this_present_item = true;
    boolean that_present_item = true;
    if (this_present_item || that_present_item) {
      if (!(this_present_item && that_present_item))
        return false;
      if (this.item != that.item)
        return false;
    }

    boolean this_present_qtt = true;
    boolean that_present_qtt = true;
    if (this_present_qtt || that_present_qtt) {
      if (!(this_present_qtt && that_present_qtt))
        return false;
      if (this.qtt != that.qtt)
        return false;
    }

    boolean this_present_iname = true && this.isSetIname();
    boolean that_present_iname = true && that.isSetIname();
    if (this_present_iname || that_present_iname) {
      if (!(this_present_iname && that_present_iname))
        return false;
      if (!this.iname.equals(that.iname))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAct()) ? 131071 : 524287);
    if (isSetAct())
      hashCode = hashCode * 8191 + act.hashCode();

    hashCode = hashCode * 8191 + ((isSetSender()) ? 131071 : 524287);
    if (isSetSender())
      hashCode = hashCode * 8191 + sender.hashCode();

    hashCode = hashCode * 8191 + ((isSetReciver()) ? 131071 : 524287);
    if (isSetReciver())
      hashCode = hashCode * 8191 + reciver.hashCode();

    hashCode = hashCode * 8191 + time;

    hashCode = hashCode * 8191 + ((isSetDes()) ? 131071 : 524287);
    if (isSetDes())
      hashCode = hashCode * 8191 + des.hashCode();

    hashCode = hashCode * 8191 + item;

    hashCode = hashCode * 8191 + qtt;

    hashCode = hashCode * 8191 + ((isSetIname()) ? 131071 : 524287);
    if (isSetIname())
      hashCode = hashCode * 8191 + iname.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TItemTransInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAct()).compareTo(other.isSetAct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.act, other.act);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSender()).compareTo(other.isSetSender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender, other.sender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReciver()).compareTo(other.isSetReciver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReciver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reciver, other.reciver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDes()).compareTo(other.isSetDes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.des, other.des);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItem()).compareTo(other.isSetItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, other.item);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQtt()).compareTo(other.isSetQtt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQtt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtt, other.qtt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIname()).compareTo(other.isSetIname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iname, other.iname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TItemTransInfo(");
    boolean first = true;

    sb.append("act:");
    if (this.act == null) {
      sb.append("null");
    } else {
      sb.append(this.act);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sender:");
    if (this.sender == null) {
      sb.append("null");
    } else {
      sb.append(this.sender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reciver:");
    if (this.reciver == null) {
      sb.append("null");
    } else {
      sb.append(this.reciver);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("des:");
    if (this.des == null) {
      sb.append("null");
    } else {
      sb.append(this.des);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("item:");
    sb.append(this.item);
    first = false;
    if (!first) sb.append(", ");
    sb.append("qtt:");
    sb.append(this.qtt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iname:");
    if (this.iname == null) {
      sb.append("null");
    } else {
      sb.append(this.iname);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TItemTransInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TItemTransInfoStandardScheme getScheme() {
      return new TItemTransInfoStandardScheme();
    }
  }

  private static class TItemTransInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TItemTransInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TItemTransInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.act = iprot.readString();
              struct.setActIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sender = iprot.readString();
              struct.setSenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reciver = iprot.readString();
              struct.setReciverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time = iprot.readI32();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.des = iprot.readString();
              struct.setDesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.item = iprot.readI32();
              struct.setItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QTT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.qtt = iprot.readI32();
              struct.setQttIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iname = iprot.readString();
              struct.setInameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TItemTransInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.act != null) {
        oprot.writeFieldBegin(ACT_FIELD_DESC);
        oprot.writeString(struct.act);
        oprot.writeFieldEnd();
      }
      if (struct.sender != null) {
        oprot.writeFieldBegin(SENDER_FIELD_DESC);
        oprot.writeString(struct.sender);
        oprot.writeFieldEnd();
      }
      if (struct.reciver != null) {
        oprot.writeFieldBegin(RECIVER_FIELD_DESC);
        oprot.writeString(struct.reciver);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(struct.time);
      oprot.writeFieldEnd();
      if (struct.des != null) {
        oprot.writeFieldBegin(DES_FIELD_DESC);
        oprot.writeString(struct.des);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ITEM_FIELD_DESC);
      oprot.writeI32(struct.item);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QTT_FIELD_DESC);
      oprot.writeI32(struct.qtt);
      oprot.writeFieldEnd();
      if (struct.iname != null) {
        oprot.writeFieldBegin(INAME_FIELD_DESC);
        oprot.writeString(struct.iname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TItemTransInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TItemTransInfoTupleScheme getScheme() {
      return new TItemTransInfoTupleScheme();
    }
  }

  private static class TItemTransInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TItemTransInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TItemTransInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAct()) {
        optionals.set(0);
      }
      if (struct.isSetSender()) {
        optionals.set(1);
      }
      if (struct.isSetReciver()) {
        optionals.set(2);
      }
      if (struct.isSetTime()) {
        optionals.set(3);
      }
      if (struct.isSetDes()) {
        optionals.set(4);
      }
      if (struct.isSetItem()) {
        optionals.set(5);
      }
      if (struct.isSetQtt()) {
        optionals.set(6);
      }
      if (struct.isSetIname()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetAct()) {
        oprot.writeString(struct.act);
      }
      if (struct.isSetSender()) {
        oprot.writeString(struct.sender);
      }
      if (struct.isSetReciver()) {
        oprot.writeString(struct.reciver);
      }
      if (struct.isSetTime()) {
        oprot.writeI32(struct.time);
      }
      if (struct.isSetDes()) {
        oprot.writeString(struct.des);
      }
      if (struct.isSetItem()) {
        oprot.writeI32(struct.item);
      }
      if (struct.isSetQtt()) {
        oprot.writeI32(struct.qtt);
      }
      if (struct.isSetIname()) {
        oprot.writeString(struct.iname);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TItemTransInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.act = iprot.readString();
        struct.setActIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sender = iprot.readString();
        struct.setSenderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reciver = iprot.readString();
        struct.setReciverIsSet(true);
      }
      if (incoming.get(3)) {
        struct.time = iprot.readI32();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.des = iprot.readString();
        struct.setDesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.item = iprot.readI32();
        struct.setItemIsSet(true);
      }
      if (incoming.get(6)) {
        struct.qtt = iprot.readI32();
        struct.setQttIsSet(true);
      }
      if (incoming.get(7)) {
        struct.iname = iprot.readString();
        struct.setInameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

