/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bamisu.log.gamethrift.entities;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-08")
public class TRankInfo implements org.apache.thrift.TBase<TRankInfo, TRankInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TRankInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRankInfo");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DN_FIELD_DESC = new org.apache.thrift.protocol.TField("dn", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField US_FIELD_DESC = new org.apache.thrift.protocol.TField("us", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("chip", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField XU_FIELD_DESC = new org.apache.thrift.protocol.TField("xu", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BM_FIELD_DESC = new org.apache.thrift.protocol.TField("bm", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CNB_FIELD_DESC = new org.apache.thrift.protocol.TField("cnb", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRankInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRankInfoTupleSchemeFactory();

  public long uid; // required
  public String dn; // required
  public String us; // required
  public long chip; // required
  public long xu; // required
  public long bm; // required
  public long cnb; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    DN((short)2, "dn"),
    US((short)3, "us"),
    CHIP((short)4, "chip"),
    XU((short)5, "xu"),
    BM((short)6, "bm"),
    CNB((short)7, "cnb");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // DN
          return DN;
        case 3: // US
          return US;
        case 4: // CHIP
          return CHIP;
        case 5: // XU
          return XU;
        case 6: // BM
          return BM;
        case 7: // CNB
          return CNB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __CHIP_ISSET_ID = 1;
  private static final int __XU_ISSET_ID = 2;
  private static final int __BM_ISSET_ID = 3;
  private static final int __CNB_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.DN, new org.apache.thrift.meta_data.FieldMetaData("dn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.US, new org.apache.thrift.meta_data.FieldMetaData("us", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHIP, new org.apache.thrift.meta_data.FieldMetaData("chip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.XU, new org.apache.thrift.meta_data.FieldMetaData("xu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.BM, new org.apache.thrift.meta_data.FieldMetaData("bm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.CNB, new org.apache.thrift.meta_data.FieldMetaData("cnb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRankInfo.class, metaDataMap);
  }

  public TRankInfo() {
  }

  public TRankInfo(
    long uid,
    String dn,
    String us,
    long chip,
    long xu,
    long bm,
    long cnb)
  {
    this();
    this.uid = uid;
    setUidIsSet(true);
    this.dn = dn;
    this.us = us;
    this.chip = chip;
    setChipIsSet(true);
    this.xu = xu;
    setXuIsSet(true);
    this.bm = bm;
    setBmIsSet(true);
    this.cnb = cnb;
    setCnbIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRankInfo(TRankInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uid = other.uid;
    if (other.isSetDn()) {
      this.dn = other.dn;
    }
    if (other.isSetUs()) {
      this.us = other.us;
    }
    this.chip = other.chip;
    this.xu = other.xu;
    this.bm = other.bm;
    this.cnb = other.cnb;
  }

  public TRankInfo deepCopy() {
    return new TRankInfo(this);
  }

  @Override
  public void clear() {
    setUidIsSet(false);
    this.uid = 0;
    this.dn = null;
    this.us = null;
    setChipIsSet(false);
    this.chip = 0;
    setXuIsSet(false);
    this.xu = 0;
    setBmIsSet(false);
    this.bm = 0;
    setCnbIsSet(false);
    this.cnb = 0;
  }

  public long getUid() {
    return this.uid;
  }

  public TRankInfo setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public String getDn() {
    return this.dn;
  }

  public TRankInfo setDn(String dn) {
    this.dn = dn;
    return this;
  }

  public void unsetDn() {
    this.dn = null;
  }

  /** Returns true if field dn is set (has been assigned a value) and false otherwise */
  public boolean isSetDn() {
    return this.dn != null;
  }

  public void setDnIsSet(boolean value) {
    if (!value) {
      this.dn = null;
    }
  }

  public String getUs() {
    return this.us;
  }

  public TRankInfo setUs(String us) {
    this.us = us;
    return this;
  }

  public void unsetUs() {
    this.us = null;
  }

  /** Returns true if field us is set (has been assigned a value) and false otherwise */
  public boolean isSetUs() {
    return this.us != null;
  }

  public void setUsIsSet(boolean value) {
    if (!value) {
      this.us = null;
    }
  }

  public long getChip() {
    return this.chip;
  }

  public TRankInfo setChip(long chip) {
    this.chip = chip;
    setChipIsSet(true);
    return this;
  }

  public void unsetChip() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHIP_ISSET_ID);
  }

  /** Returns true if field chip is set (has been assigned a value) and false otherwise */
  public boolean isSetChip() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHIP_ISSET_ID);
  }

  public void setChipIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHIP_ISSET_ID, value);
  }

  public long getXu() {
    return this.xu;
  }

  public TRankInfo setXu(long xu) {
    this.xu = xu;
    setXuIsSet(true);
    return this;
  }

  public void unsetXu() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __XU_ISSET_ID);
  }

  /** Returns true if field xu is set (has been assigned a value) and false otherwise */
  public boolean isSetXu() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __XU_ISSET_ID);
  }

  public void setXuIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __XU_ISSET_ID, value);
  }

  public long getBm() {
    return this.bm;
  }

  public TRankInfo setBm(long bm) {
    this.bm = bm;
    setBmIsSet(true);
    return this;
  }

  public void unsetBm() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BM_ISSET_ID);
  }

  /** Returns true if field bm is set (has been assigned a value) and false otherwise */
  public boolean isSetBm() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BM_ISSET_ID);
  }

  public void setBmIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BM_ISSET_ID, value);
  }

  public long getCnb() {
    return this.cnb;
  }

  public TRankInfo setCnb(long cnb) {
    this.cnb = cnb;
    setCnbIsSet(true);
    return this;
  }

  public void unsetCnb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CNB_ISSET_ID);
  }

  /** Returns true if field cnb is set (has been assigned a value) and false otherwise */
  public boolean isSetCnb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CNB_ISSET_ID);
  }

  public void setCnbIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CNB_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case DN:
      if (value == null) {
        unsetDn();
      } else {
        setDn((String)value);
      }
      break;

    case US:
      if (value == null) {
        unsetUs();
      } else {
        setUs((String)value);
      }
      break;

    case CHIP:
      if (value == null) {
        unsetChip();
      } else {
        setChip((Long)value);
      }
      break;

    case XU:
      if (value == null) {
        unsetXu();
      } else {
        setXu((Long)value);
      }
      break;

    case BM:
      if (value == null) {
        unsetBm();
      } else {
        setBm((Long)value);
      }
      break;

    case CNB:
      if (value == null) {
        unsetCnb();
      } else {
        setCnb((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case DN:
      return getDn();

    case US:
      return getUs();

    case CHIP:
      return getChip();

    case XU:
      return getXu();

    case BM:
      return getBm();

    case CNB:
      return getCnb();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case DN:
      return isSetDn();
    case US:
      return isSetUs();
    case CHIP:
      return isSetChip();
    case XU:
      return isSetXu();
    case BM:
      return isSetBm();
    case CNB:
      return isSetCnb();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRankInfo)
      return this.equals((TRankInfo)that);
    return false;
  }

  public boolean equals(TRankInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_dn = true && this.isSetDn();
    boolean that_present_dn = true && that.isSetDn();
    if (this_present_dn || that_present_dn) {
      if (!(this_present_dn && that_present_dn))
        return false;
      if (!this.dn.equals(that.dn))
        return false;
    }

    boolean this_present_us = true && this.isSetUs();
    boolean that_present_us = true && that.isSetUs();
    if (this_present_us || that_present_us) {
      if (!(this_present_us && that_present_us))
        return false;
      if (!this.us.equals(that.us))
        return false;
    }

    boolean this_present_chip = true;
    boolean that_present_chip = true;
    if (this_present_chip || that_present_chip) {
      if (!(this_present_chip && that_present_chip))
        return false;
      if (this.chip != that.chip)
        return false;
    }

    boolean this_present_xu = true;
    boolean that_present_xu = true;
    if (this_present_xu || that_present_xu) {
      if (!(this_present_xu && that_present_xu))
        return false;
      if (this.xu != that.xu)
        return false;
    }

    boolean this_present_bm = true;
    boolean that_present_bm = true;
    if (this_present_bm || that_present_bm) {
      if (!(this_present_bm && that_present_bm))
        return false;
      if (this.bm != that.bm)
        return false;
    }

    boolean this_present_cnb = true;
    boolean that_present_cnb = true;
    if (this_present_cnb || that_present_cnb) {
      if (!(this_present_cnb && that_present_cnb))
        return false;
      if (this.cnb != that.cnb)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

    hashCode = hashCode * 8191 + ((isSetDn()) ? 131071 : 524287);
    if (isSetDn())
      hashCode = hashCode * 8191 + dn.hashCode();

    hashCode = hashCode * 8191 + ((isSetUs()) ? 131071 : 524287);
    if (isSetUs())
      hashCode = hashCode * 8191 + us.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(chip);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(xu);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bm);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cnb);

    return hashCode;
  }

  @Override
  public int compareTo(TRankInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDn()).compareTo(other.isSetDn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dn, other.dn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUs()).compareTo(other.isSetUs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.us, other.us);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChip()).compareTo(other.isSetChip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chip, other.chip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXu()).compareTo(other.isSetXu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xu, other.xu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBm()).compareTo(other.isSetBm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bm, other.bm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnb()).compareTo(other.isSetCnb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnb, other.cnb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRankInfo(");
    boolean first = true;

    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dn:");
    if (this.dn == null) {
      sb.append("null");
    } else {
      sb.append(this.dn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("us:");
    if (this.us == null) {
      sb.append("null");
    } else {
      sb.append(this.us);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chip:");
    sb.append(this.chip);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xu:");
    sb.append(this.xu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bm:");
    sb.append(this.bm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cnb:");
    sb.append(this.cnb);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRankInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRankInfoStandardScheme getScheme() {
      return new TRankInfoStandardScheme();
    }
  }

  private static class TRankInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRankInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRankInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dn = iprot.readString();
              struct.setDnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // US
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.us = iprot.readString();
              struct.setUsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHIP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chip = iprot.readI64();
              struct.setChipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // XU
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.xu = iprot.readI64();
              struct.setXuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bm = iprot.readI64();
              struct.setBmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CNB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cnb = iprot.readI64();
              struct.setCnbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRankInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      if (struct.dn != null) {
        oprot.writeFieldBegin(DN_FIELD_DESC);
        oprot.writeString(struct.dn);
        oprot.writeFieldEnd();
      }
      if (struct.us != null) {
        oprot.writeFieldBegin(US_FIELD_DESC);
        oprot.writeString(struct.us);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHIP_FIELD_DESC);
      oprot.writeI64(struct.chip);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(XU_FIELD_DESC);
      oprot.writeI64(struct.xu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BM_FIELD_DESC);
      oprot.writeI64(struct.bm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CNB_FIELD_DESC);
      oprot.writeI64(struct.cnb);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRankInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRankInfoTupleScheme getScheme() {
      return new TRankInfoTupleScheme();
    }
  }

  private static class TRankInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRankInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRankInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetDn()) {
        optionals.set(1);
      }
      if (struct.isSetUs()) {
        optionals.set(2);
      }
      if (struct.isSetChip()) {
        optionals.set(3);
      }
      if (struct.isSetXu()) {
        optionals.set(4);
      }
      if (struct.isSetBm()) {
        optionals.set(5);
      }
      if (struct.isSetCnb()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetDn()) {
        oprot.writeString(struct.dn);
      }
      if (struct.isSetUs()) {
        oprot.writeString(struct.us);
      }
      if (struct.isSetChip()) {
        oprot.writeI64(struct.chip);
      }
      if (struct.isSetXu()) {
        oprot.writeI64(struct.xu);
      }
      if (struct.isSetBm()) {
        oprot.writeI64(struct.bm);
      }
      if (struct.isSetCnb()) {
        oprot.writeI64(struct.cnb);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRankInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dn = iprot.readString();
        struct.setDnIsSet(true);
      }
      if (incoming.get(2)) {
        struct.us = iprot.readString();
        struct.setUsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chip = iprot.readI64();
        struct.setChipIsSet(true);
      }
      if (incoming.get(4)) {
        struct.xu = iprot.readI64();
        struct.setXuIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bm = iprot.readI64();
        struct.setBmIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cnb = iprot.readI64();
        struct.setCnbIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

