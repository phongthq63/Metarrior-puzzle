/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bamisu.log.gamethrift.service.multiserver;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-05-12")
public class MultiserverService {

  public interface Iface {

    public boolean maintenaceServer(boolean PRE_MAINTENANCE) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException;

    public java.lang.String getCCUServer() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean activeEventModuleServer(java.lang.String moduleName, boolean active, int timeStamp, java.lang.String zoneName) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void maintenaceServer(boolean PRE_MAINTENANCE, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getCCUServer(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void activeEventModuleServer(java.lang.String moduleName, boolean active, int timeStamp, java.lang.String zoneName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean maintenaceServer(boolean PRE_MAINTENANCE) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_maintenaceServer(PRE_MAINTENANCE);
      return recv_maintenaceServer();
    }

    public void send_maintenaceServer(boolean PRE_MAINTENANCE) throws org.apache.thrift.TException
    {
      maintenaceServer_args args = new maintenaceServer_args();
      args.setPRE_MAINTENANCE(PRE_MAINTENANCE);
      sendBase("maintenaceServer", args);
    }

    public boolean recv_maintenaceServer() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      maintenaceServer_result result = new maintenaceServer_result();
      receiveBase(result, "maintenaceServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "maintenaceServer failed: unknown result");
    }

    public java.lang.String getCCUServer() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_getCCUServer();
      return recv_getCCUServer();
    }

    public void send_getCCUServer() throws org.apache.thrift.TException
    {
      getCCUServer_args args = new getCCUServer_args();
      sendBase("getCCUServer", args);
    }

    public java.lang.String recv_getCCUServer() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      getCCUServer_result result = new getCCUServer_result();
      receiveBase(result, "getCCUServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCCUServer failed: unknown result");
    }

    public boolean activeEventModuleServer(java.lang.String moduleName, boolean active, int timeStamp, java.lang.String zoneName) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_activeEventModuleServer(moduleName, active, timeStamp, zoneName);
      return recv_activeEventModuleServer();
    }

    public void send_activeEventModuleServer(java.lang.String moduleName, boolean active, int timeStamp, java.lang.String zoneName) throws org.apache.thrift.TException
    {
      activeEventModuleServer_args args = new activeEventModuleServer_args();
      args.setModuleName(moduleName);
      args.setActive(active);
      args.setTimeStamp(timeStamp);
      args.setZoneName(zoneName);
      sendBase("activeEventModuleServer", args);
    }

    public boolean recv_activeEventModuleServer() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      activeEventModuleServer_result result = new activeEventModuleServer_result();
      receiveBase(result, "activeEventModuleServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activeEventModuleServer failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void maintenaceServer(boolean PRE_MAINTENANCE, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      maintenaceServer_call method_call = new maintenaceServer_call(PRE_MAINTENANCE, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class maintenaceServer_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private boolean PRE_MAINTENANCE;
      public maintenaceServer_call(boolean PRE_MAINTENANCE, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.PRE_MAINTENANCE = PRE_MAINTENANCE;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("maintenaceServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        maintenaceServer_args args = new maintenaceServer_args();
        args.setPRE_MAINTENANCE(PRE_MAINTENANCE);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_maintenaceServer();
      }
    }

    public void getCCUServer(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCCUServer_call method_call = new getCCUServer_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCCUServer_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public getCCUServer_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCCUServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCCUServer_args args = new getCCUServer_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCCUServer();
      }
    }

    public void activeEventModuleServer(java.lang.String moduleName, boolean active, int timeStamp, java.lang.String zoneName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activeEventModuleServer_call method_call = new activeEventModuleServer_call(moduleName, active, timeStamp, zoneName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activeEventModuleServer_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String moduleName;
      private boolean active;
      private int timeStamp;
      private java.lang.String zoneName;
      public activeEventModuleServer_call(java.lang.String moduleName, boolean active, int timeStamp, java.lang.String zoneName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.moduleName = moduleName;
        this.active = active;
        this.timeStamp = timeStamp;
        this.zoneName = zoneName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activeEventModuleServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activeEventModuleServer_args args = new activeEventModuleServer_args();
        args.setModuleName(moduleName);
        args.setActive(active);
        args.setTimeStamp(timeStamp);
        args.setZoneName(zoneName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activeEventModuleServer();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("maintenaceServer", new maintenaceServer());
      processMap.put("getCCUServer", new getCCUServer());
      processMap.put("activeEventModuleServer", new activeEventModuleServer());
      return processMap;
    }

    public static class maintenaceServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, maintenaceServer_args> {
      public maintenaceServer() {
        super("maintenaceServer");
      }

      public maintenaceServer_args getEmptyArgsInstance() {
        return new maintenaceServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public maintenaceServer_result getResult(I iface, maintenaceServer_args args) throws org.apache.thrift.TException {
        maintenaceServer_result result = new maintenaceServer_result();
        try {
          result.success = iface.maintenaceServer(args.PRE_MAINTENANCE);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getCCUServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCCUServer_args> {
      public getCCUServer() {
        super("getCCUServer");
      }

      public getCCUServer_args getEmptyArgsInstance() {
        return new getCCUServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getCCUServer_result getResult(I iface, getCCUServer_args args) throws org.apache.thrift.TException {
        getCCUServer_result result = new getCCUServer_result();
        try {
          result.success = iface.getCCUServer();
        } catch (com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class activeEventModuleServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activeEventModuleServer_args> {
      public activeEventModuleServer() {
        super("activeEventModuleServer");
      }

      public activeEventModuleServer_args getEmptyArgsInstance() {
        return new activeEventModuleServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public activeEventModuleServer_result getResult(I iface, activeEventModuleServer_args args) throws org.apache.thrift.TException {
        activeEventModuleServer_result result = new activeEventModuleServer_result();
        try {
          result.success = iface.activeEventModuleServer(args.moduleName, args.active, args.timeStamp, args.zoneName);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("maintenaceServer", new maintenaceServer());
      processMap.put("getCCUServer", new getCCUServer());
      processMap.put("activeEventModuleServer", new activeEventModuleServer());
      return processMap;
    }

    public static class maintenaceServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, maintenaceServer_args, java.lang.Boolean> {
      public maintenaceServer() {
        super("maintenaceServer");
      }

      public maintenaceServer_args getEmptyArgsInstance() {
        return new maintenaceServer_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            maintenaceServer_result result = new maintenaceServer_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            maintenaceServer_result result = new maintenaceServer_result();
            if (e instanceof com.bamisu.log.gamethrift.entities.exception.ThriftSVException) {
              result.e = (com.bamisu.log.gamethrift.entities.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, maintenaceServer_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.maintenaceServer(args.PRE_MAINTENANCE,resultHandler);
      }
    }

    public static class getCCUServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCCUServer_args, java.lang.String> {
      public getCCUServer() {
        super("getCCUServer");
      }

      public getCCUServer_args getEmptyArgsInstance() {
        return new getCCUServer_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getCCUServer_result result = new getCCUServer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCCUServer_result result = new getCCUServer_result();
            if (e instanceof com.bamisu.log.gamethrift.entities.exception.ThriftSVException) {
              result.e = (com.bamisu.log.gamethrift.entities.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCCUServer_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getCCUServer(resultHandler);
      }
    }

    public static class activeEventModuleServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activeEventModuleServer_args, java.lang.Boolean> {
      public activeEventModuleServer() {
        super("activeEventModuleServer");
      }

      public activeEventModuleServer_args getEmptyArgsInstance() {
        return new activeEventModuleServer_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            activeEventModuleServer_result result = new activeEventModuleServer_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            activeEventModuleServer_result result = new activeEventModuleServer_result();
            if (e instanceof com.bamisu.log.gamethrift.entities.exception.ThriftSVException) {
              result.e = (com.bamisu.log.gamethrift.entities.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activeEventModuleServer_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.activeEventModuleServer(args.moduleName, args.active, args.timeStamp, args.zoneName,resultHandler);
      }
    }

  }

  public static class maintenaceServer_args implements org.apache.thrift.TBase<maintenaceServer_args, maintenaceServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<maintenaceServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("maintenaceServer_args");

    private static final org.apache.thrift.protocol.TField PRE__MAINTENANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("PRE_MAINTENANCE", org.apache.thrift.protocol.TType.BOOL, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new maintenaceServer_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new maintenaceServer_argsTupleSchemeFactory();

    public boolean PRE_MAINTENANCE; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRE__MAINTENANCE((short)1, "PRE_MAINTENANCE");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRE__MAINTENANCE
            return PRE__MAINTENANCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRE_MAINTENANCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRE__MAINTENANCE, new org.apache.thrift.meta_data.FieldMetaData("PRE_MAINTENANCE", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(maintenaceServer_args.class, metaDataMap);
    }

    public maintenaceServer_args() {
    }

    public maintenaceServer_args(
      boolean PRE_MAINTENANCE)
    {
      this();
      this.PRE_MAINTENANCE = PRE_MAINTENANCE;
      setPRE_MAINTENANCEIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public maintenaceServer_args(maintenaceServer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.PRE_MAINTENANCE = other.PRE_MAINTENANCE;
    }

    public maintenaceServer_args deepCopy() {
      return new maintenaceServer_args(this);
    }

    @Override
    public void clear() {
      setPRE_MAINTENANCEIsSet(false);
      this.PRE_MAINTENANCE = false;
    }

    public boolean isPRE_MAINTENANCE() {
      return this.PRE_MAINTENANCE;
    }

    public maintenaceServer_args setPRE_MAINTENANCE(boolean PRE_MAINTENANCE) {
      this.PRE_MAINTENANCE = PRE_MAINTENANCE;
      setPRE_MAINTENANCEIsSet(true);
      return this;
    }

    public void unsetPRE_MAINTENANCE() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRE_MAINTENANCE_ISSET_ID);
    }

    /** Returns true if field PRE_MAINTENANCE is set (has been assigned a value) and false otherwise */
    public boolean isSetPRE_MAINTENANCE() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRE_MAINTENANCE_ISSET_ID);
    }

    public void setPRE_MAINTENANCEIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRE_MAINTENANCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PRE__MAINTENANCE:
        if (value == null) {
          unsetPRE_MAINTENANCE();
        } else {
          setPRE_MAINTENANCE((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PRE__MAINTENANCE:
        return isPRE_MAINTENANCE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PRE__MAINTENANCE:
        return isSetPRE_MAINTENANCE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof maintenaceServer_args)
        return this.equals((maintenaceServer_args)that);
      return false;
    }

    public boolean equals(maintenaceServer_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_PRE_MAINTENANCE = true;
      boolean that_present_PRE_MAINTENANCE = true;
      if (this_present_PRE_MAINTENANCE || that_present_PRE_MAINTENANCE) {
        if (!(this_present_PRE_MAINTENANCE && that_present_PRE_MAINTENANCE))
          return false;
        if (this.PRE_MAINTENANCE != that.PRE_MAINTENANCE)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((PRE_MAINTENANCE) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(maintenaceServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPRE_MAINTENANCE()).compareTo(other.isSetPRE_MAINTENANCE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPRE_MAINTENANCE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRE_MAINTENANCE, other.PRE_MAINTENANCE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("maintenaceServer_args(");
      boolean first = true;

      sb.append("PRE_MAINTENANCE:");
      sb.append(this.PRE_MAINTENANCE);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'PRE_MAINTENANCE' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class maintenaceServer_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public maintenaceServer_argsStandardScheme getScheme() {
        return new maintenaceServer_argsStandardScheme();
      }
    }

    private static class maintenaceServer_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<maintenaceServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, maintenaceServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRE__MAINTENANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.PRE_MAINTENANCE = iprot.readBool();
                struct.setPRE_MAINTENANCEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPRE_MAINTENANCE()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'PRE_MAINTENANCE' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, maintenaceServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PRE__MAINTENANCE_FIELD_DESC);
        oprot.writeBool(struct.PRE_MAINTENANCE);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class maintenaceServer_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public maintenaceServer_argsTupleScheme getScheme() {
        return new maintenaceServer_argsTupleScheme();
      }
    }

    private static class maintenaceServer_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<maintenaceServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, maintenaceServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeBool(struct.PRE_MAINTENANCE);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, maintenaceServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.PRE_MAINTENANCE = iprot.readBool();
        struct.setPRE_MAINTENANCEIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class maintenaceServer_result implements org.apache.thrift.TBase<maintenaceServer_result, maintenaceServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<maintenaceServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("maintenaceServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new maintenaceServer_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new maintenaceServer_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.gamethrift.entities.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(maintenaceServer_result.class, metaDataMap);
    }

    public maintenaceServer_result() {
    }

    public maintenaceServer_result(
      boolean success,
      com.bamisu.log.gamethrift.entities.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public maintenaceServer_result(maintenaceServer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException(other.e);
      }
    }

    public maintenaceServer_result deepCopy() {
      return new maintenaceServer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public maintenaceServer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException getE() {
      return this.e;
    }

    public maintenaceServer_result setE(com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.gamethrift.entities.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof maintenaceServer_result)
        return this.equals((maintenaceServer_result)that);
      return false;
    }

    public boolean equals(maintenaceServer_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(maintenaceServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("maintenaceServer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class maintenaceServer_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public maintenaceServer_resultStandardScheme getScheme() {
        return new maintenaceServer_resultStandardScheme();
      }
    }

    private static class maintenaceServer_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<maintenaceServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, maintenaceServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, maintenaceServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class maintenaceServer_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public maintenaceServer_resultTupleScheme getScheme() {
        return new maintenaceServer_resultTupleScheme();
      }
    }

    private static class maintenaceServer_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<maintenaceServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, maintenaceServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, maintenaceServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCCUServer_args implements org.apache.thrift.TBase<getCCUServer_args, getCCUServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCCUServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCCUServer_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCCUServer_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCCUServer_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCCUServer_args.class, metaDataMap);
    }

    public getCCUServer_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCCUServer_args(getCCUServer_args other) {
    }

    public getCCUServer_args deepCopy() {
      return new getCCUServer_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCCUServer_args)
        return this.equals((getCCUServer_args)that);
      return false;
    }

    public boolean equals(getCCUServer_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getCCUServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCCUServer_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCCUServer_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCCUServer_argsStandardScheme getScheme() {
        return new getCCUServer_argsStandardScheme();
      }
    }

    private static class getCCUServer_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCCUServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCCUServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCCUServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCCUServer_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCCUServer_argsTupleScheme getScheme() {
        return new getCCUServer_argsTupleScheme();
      }
    }

    private static class getCCUServer_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCCUServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCCUServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCCUServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCCUServer_result implements org.apache.thrift.TBase<getCCUServer_result, getCCUServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCCUServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCCUServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCCUServer_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCCUServer_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.gamethrift.entities.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCCUServer_result.class, metaDataMap);
    }

    public getCCUServer_result() {
    }

    public getCCUServer_result(
      java.lang.String success,
      com.bamisu.log.gamethrift.entities.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCCUServer_result(getCCUServer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException(other.e);
      }
    }

    public getCCUServer_result deepCopy() {
      return new getCCUServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getCCUServer_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException getE() {
      return this.e;
    }

    public getCCUServer_result setE(com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.gamethrift.entities.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCCUServer_result)
        return this.equals((getCCUServer_result)that);
      return false;
    }

    public boolean equals(getCCUServer_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCCUServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCCUServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCCUServer_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCCUServer_resultStandardScheme getScheme() {
        return new getCCUServer_resultStandardScheme();
      }
    }

    private static class getCCUServer_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCCUServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCCUServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCCUServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCCUServer_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCCUServer_resultTupleScheme getScheme() {
        return new getCCUServer_resultTupleScheme();
      }
    }

    private static class getCCUServer_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCCUServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCCUServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCCUServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class activeEventModuleServer_args implements org.apache.thrift.TBase<activeEventModuleServer_args, activeEventModuleServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<activeEventModuleServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activeEventModuleServer_args");

    private static final org.apache.thrift.protocol.TField MODULE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStamp", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ZONE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneName", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new activeEventModuleServer_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new activeEventModuleServer_argsTupleSchemeFactory();

    public java.lang.String moduleName; // required
    public boolean active; // required
    public int timeStamp; // required
    public java.lang.String zoneName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODULE_NAME((short)1, "moduleName"),
      ACTIVE((short)2, "active"),
      TIME_STAMP((short)3, "timeStamp"),
      ZONE_NAME((short)4, "zoneName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODULE_NAME
            return MODULE_NAME;
          case 2: // ACTIVE
            return ACTIVE;
          case 3: // TIME_STAMP
            return TIME_STAMP;
          case 4: // ZONE_NAME
            return ZONE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACTIVE_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODULE_NAME, new org.apache.thrift.meta_data.FieldMetaData("moduleName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("timeStamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ZONE_NAME, new org.apache.thrift.meta_data.FieldMetaData("zoneName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activeEventModuleServer_args.class, metaDataMap);
    }

    public activeEventModuleServer_args() {
    }

    public activeEventModuleServer_args(
      java.lang.String moduleName,
      boolean active,
      int timeStamp,
      java.lang.String zoneName)
    {
      this();
      this.moduleName = moduleName;
      this.active = active;
      setActiveIsSet(true);
      this.timeStamp = timeStamp;
      setTimeStampIsSet(true);
      this.zoneName = zoneName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activeEventModuleServer_args(activeEventModuleServer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetModuleName()) {
        this.moduleName = other.moduleName;
      }
      this.active = other.active;
      this.timeStamp = other.timeStamp;
      if (other.isSetZoneName()) {
        this.zoneName = other.zoneName;
      }
    }

    public activeEventModuleServer_args deepCopy() {
      return new activeEventModuleServer_args(this);
    }

    @Override
    public void clear() {
      this.moduleName = null;
      setActiveIsSet(false);
      this.active = false;
      setTimeStampIsSet(false);
      this.timeStamp = 0;
      this.zoneName = null;
    }

    public java.lang.String getModuleName() {
      return this.moduleName;
    }

    public activeEventModuleServer_args setModuleName(java.lang.String moduleName) {
      this.moduleName = moduleName;
      return this;
    }

    public void unsetModuleName() {
      this.moduleName = null;
    }

    /** Returns true if field moduleName is set (has been assigned a value) and false otherwise */
    public boolean isSetModuleName() {
      return this.moduleName != null;
    }

    public void setModuleNameIsSet(boolean value) {
      if (!value) {
        this.moduleName = null;
      }
    }

    public boolean isActive() {
      return this.active;
    }

    public activeEventModuleServer_args setActive(boolean active) {
      this.active = active;
      setActiveIsSet(true);
      return this;
    }

    public void unsetActive() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
    }

    /** Returns true if field active is set (has been assigned a value) and false otherwise */
    public boolean isSetActive() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
    }

    public void setActiveIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
    }

    public int getTimeStamp() {
      return this.timeStamp;
    }

    public activeEventModuleServer_args setTimeStamp(int timeStamp) {
      this.timeStamp = timeStamp;
      setTimeStampIsSet(true);
      return this;
    }

    public void unsetTimeStamp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timeStamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeStamp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimeStampIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public java.lang.String getZoneName() {
      return this.zoneName;
    }

    public activeEventModuleServer_args setZoneName(java.lang.String zoneName) {
      this.zoneName = zoneName;
      return this;
    }

    public void unsetZoneName() {
      this.zoneName = null;
    }

    /** Returns true if field zoneName is set (has been assigned a value) and false otherwise */
    public boolean isSetZoneName() {
      return this.zoneName != null;
    }

    public void setZoneNameIsSet(boolean value) {
      if (!value) {
        this.zoneName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MODULE_NAME:
        if (value == null) {
          unsetModuleName();
        } else {
          setModuleName((java.lang.String)value);
        }
        break;

      case ACTIVE:
        if (value == null) {
          unsetActive();
        } else {
          setActive((java.lang.Boolean)value);
        }
        break;

      case TIME_STAMP:
        if (value == null) {
          unsetTimeStamp();
        } else {
          setTimeStamp((java.lang.Integer)value);
        }
        break;

      case ZONE_NAME:
        if (value == null) {
          unsetZoneName();
        } else {
          setZoneName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODULE_NAME:
        return getModuleName();

      case ACTIVE:
        return isActive();

      case TIME_STAMP:
        return getTimeStamp();

      case ZONE_NAME:
        return getZoneName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODULE_NAME:
        return isSetModuleName();
      case ACTIVE:
        return isSetActive();
      case TIME_STAMP:
        return isSetTimeStamp();
      case ZONE_NAME:
        return isSetZoneName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof activeEventModuleServer_args)
        return this.equals((activeEventModuleServer_args)that);
      return false;
    }

    public boolean equals(activeEventModuleServer_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_moduleName = true && this.isSetModuleName();
      boolean that_present_moduleName = true && that.isSetModuleName();
      if (this_present_moduleName || that_present_moduleName) {
        if (!(this_present_moduleName && that_present_moduleName))
          return false;
        if (!this.moduleName.equals(that.moduleName))
          return false;
      }

      boolean this_present_active = true;
      boolean that_present_active = true;
      if (this_present_active || that_present_active) {
        if (!(this_present_active && that_present_active))
          return false;
        if (this.active != that.active)
          return false;
      }

      boolean this_present_timeStamp = true;
      boolean that_present_timeStamp = true;
      if (this_present_timeStamp || that_present_timeStamp) {
        if (!(this_present_timeStamp && that_present_timeStamp))
          return false;
        if (this.timeStamp != that.timeStamp)
          return false;
      }

      boolean this_present_zoneName = true && this.isSetZoneName();
      boolean that_present_zoneName = true && that.isSetZoneName();
      if (this_present_zoneName || that_present_zoneName) {
        if (!(this_present_zoneName && that_present_zoneName))
          return false;
        if (!this.zoneName.equals(that.zoneName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetModuleName()) ? 131071 : 524287);
      if (isSetModuleName())
        hashCode = hashCode * 8191 + moduleName.hashCode();

      hashCode = hashCode * 8191 + ((active) ? 131071 : 524287);

      hashCode = hashCode * 8191 + timeStamp;

      hashCode = hashCode * 8191 + ((isSetZoneName()) ? 131071 : 524287);
      if (isSetZoneName())
        hashCode = hashCode * 8191 + zoneName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(activeEventModuleServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetModuleName()).compareTo(other.isSetModuleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModuleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleName, other.moduleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetActive()).compareTo(other.isSetActive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, other.active);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeStamp()).compareTo(other.isSetTimeStamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeStamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStamp, other.timeStamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetZoneName()).compareTo(other.isSetZoneName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZoneName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneName, other.zoneName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("activeEventModuleServer_args(");
      boolean first = true;

      sb.append("moduleName:");
      if (this.moduleName == null) {
        sb.append("null");
      } else {
        sb.append(this.moduleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("active:");
      sb.append(this.active);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeStamp:");
      sb.append(this.timeStamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("zoneName:");
      if (this.zoneName == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (moduleName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'moduleName' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'active' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'timeStamp' because it's a primitive and you chose the non-beans generator.
      if (zoneName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zoneName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activeEventModuleServer_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activeEventModuleServer_argsStandardScheme getScheme() {
        return new activeEventModuleServer_argsStandardScheme();
      }
    }

    private static class activeEventModuleServer_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<activeEventModuleServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activeEventModuleServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODULE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.moduleName = iprot.readString();
                struct.setModuleNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.active = iprot.readBool();
                struct.setActiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_STAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeStamp = iprot.readI32();
                struct.setTimeStampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ZONE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zoneName = iprot.readString();
                struct.setZoneNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetActive()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'active' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetTimeStamp()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeStamp' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activeEventModuleServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.moduleName != null) {
          oprot.writeFieldBegin(MODULE_NAME_FIELD_DESC);
          oprot.writeString(struct.moduleName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
        oprot.writeBool(struct.active);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
        oprot.writeI32(struct.timeStamp);
        oprot.writeFieldEnd();
        if (struct.zoneName != null) {
          oprot.writeFieldBegin(ZONE_NAME_FIELD_DESC);
          oprot.writeString(struct.zoneName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activeEventModuleServer_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activeEventModuleServer_argsTupleScheme getScheme() {
        return new activeEventModuleServer_argsTupleScheme();
      }
    }

    private static class activeEventModuleServer_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<activeEventModuleServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activeEventModuleServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.moduleName);
        oprot.writeBool(struct.active);
        oprot.writeI32(struct.timeStamp);
        oprot.writeString(struct.zoneName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activeEventModuleServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.moduleName = iprot.readString();
        struct.setModuleNameIsSet(true);
        struct.active = iprot.readBool();
        struct.setActiveIsSet(true);
        struct.timeStamp = iprot.readI32();
        struct.setTimeStampIsSet(true);
        struct.zoneName = iprot.readString();
        struct.setZoneNameIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class activeEventModuleServer_result implements org.apache.thrift.TBase<activeEventModuleServer_result, activeEventModuleServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<activeEventModuleServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activeEventModuleServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new activeEventModuleServer_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new activeEventModuleServer_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.gamethrift.entities.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activeEventModuleServer_result.class, metaDataMap);
    }

    public activeEventModuleServer_result() {
    }

    public activeEventModuleServer_result(
      boolean success,
      com.bamisu.log.gamethrift.entities.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activeEventModuleServer_result(activeEventModuleServer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException(other.e);
      }
    }

    public activeEventModuleServer_result deepCopy() {
      return new activeEventModuleServer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public activeEventModuleServer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException getE() {
      return this.e;
    }

    public activeEventModuleServer_result setE(com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.gamethrift.entities.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof activeEventModuleServer_result)
        return this.equals((activeEventModuleServer_result)that);
      return false;
    }

    public boolean equals(activeEventModuleServer_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(activeEventModuleServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("activeEventModuleServer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activeEventModuleServer_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activeEventModuleServer_resultStandardScheme getScheme() {
        return new activeEventModuleServer_resultStandardScheme();
      }
    }

    private static class activeEventModuleServer_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<activeEventModuleServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activeEventModuleServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activeEventModuleServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activeEventModuleServer_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public activeEventModuleServer_resultTupleScheme getScheme() {
        return new activeEventModuleServer_resultTupleScheme();
      }
    }

    private static class activeEventModuleServer_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<activeEventModuleServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activeEventModuleServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activeEventModuleServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
