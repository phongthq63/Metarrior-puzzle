/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lizardtek.svapi.service.IAP;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-04-27")
public class IAPClientService {

  public interface Iface {

    public boolean addSaleIAP(java.lang.String zoneName, java.lang.String jsonData) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean removeSaleIAP(java.lang.String zoneName, java.util.List<java.lang.String> listIdSale) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean buyIAP(java.lang.String zoneName, long uid, java.lang.String idPackage) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addSaleIAP(java.lang.String zoneName, java.lang.String jsonData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void removeSaleIAP(java.lang.String zoneName, java.util.List<java.lang.String> listIdSale, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void buyIAP(java.lang.String zoneName, long uid, java.lang.String idPackage, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addSaleIAP(java.lang.String zoneName, java.lang.String jsonData) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_addSaleIAP(zoneName, jsonData);
      return recv_addSaleIAP();
    }

    public void send_addSaleIAP(java.lang.String zoneName, java.lang.String jsonData) throws org.apache.thrift.TException
    {
      addSaleIAP_args args = new addSaleIAP_args();
      args.setZoneName(zoneName);
      args.setJsonData(jsonData);
      sendBase("addSaleIAP", args);
    }

    public boolean recv_addSaleIAP() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      addSaleIAP_result result = new addSaleIAP_result();
      receiveBase(result, "addSaleIAP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSaleIAP failed: unknown result");
    }

    public boolean removeSaleIAP(java.lang.String zoneName, java.util.List<java.lang.String> listIdSale) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_removeSaleIAP(zoneName, listIdSale);
      return recv_removeSaleIAP();
    }

    public void send_removeSaleIAP(java.lang.String zoneName, java.util.List<java.lang.String> listIdSale) throws org.apache.thrift.TException
    {
      removeSaleIAP_args args = new removeSaleIAP_args();
      args.setZoneName(zoneName);
      args.setListIdSale(listIdSale);
      sendBase("removeSaleIAP", args);
    }

    public boolean recv_removeSaleIAP() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      removeSaleIAP_result result = new removeSaleIAP_result();
      receiveBase(result, "removeSaleIAP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeSaleIAP failed: unknown result");
    }

    public boolean buyIAP(java.lang.String zoneName, long uid, java.lang.String idPackage) throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_buyIAP(zoneName, uid, idPackage);
      return recv_buyIAP();
    }

    public void send_buyIAP(java.lang.String zoneName, long uid, java.lang.String idPackage) throws org.apache.thrift.TException
    {
      buyIAP_args args = new buyIAP_args();
      args.setZoneName(zoneName);
      args.setUid(uid);
      args.setIdPackage(idPackage);
      sendBase("buyIAP", args);
    }

    public boolean recv_buyIAP() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException
    {
      buyIAP_result result = new buyIAP_result();
      receiveBase(result, "buyIAP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "buyIAP failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addSaleIAP(java.lang.String zoneName, java.lang.String jsonData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSaleIAP_call method_call = new addSaleIAP_call(zoneName, jsonData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSaleIAP_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String zoneName;
      private java.lang.String jsonData;
      public addSaleIAP_call(java.lang.String zoneName, java.lang.String jsonData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zoneName = zoneName;
        this.jsonData = jsonData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSaleIAP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSaleIAP_args args = new addSaleIAP_args();
        args.setZoneName(zoneName);
        args.setJsonData(jsonData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSaleIAP();
      }
    }

    public void removeSaleIAP(java.lang.String zoneName, java.util.List<java.lang.String> listIdSale, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeSaleIAP_call method_call = new removeSaleIAP_call(zoneName, listIdSale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeSaleIAP_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String zoneName;
      private java.util.List<java.lang.String> listIdSale;
      public removeSaleIAP_call(java.lang.String zoneName, java.util.List<java.lang.String> listIdSale, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zoneName = zoneName;
        this.listIdSale = listIdSale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeSaleIAP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeSaleIAP_args args = new removeSaleIAP_args();
        args.setZoneName(zoneName);
        args.setListIdSale(listIdSale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeSaleIAP();
      }
    }

    public void buyIAP(java.lang.String zoneName, long uid, java.lang.String idPackage, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      buyIAP_call method_call = new buyIAP_call(zoneName, uid, idPackage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class buyIAP_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String zoneName;
      private long uid;
      private java.lang.String idPackage;
      public buyIAP_call(java.lang.String zoneName, long uid, java.lang.String idPackage, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.zoneName = zoneName;
        this.uid = uid;
        this.idPackage = idPackage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("buyIAP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        buyIAP_args args = new buyIAP_args();
        args.setZoneName(zoneName);
        args.setUid(uid);
        args.setIdPackage(idPackage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.bamisu.log.gamethrift.entities.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_buyIAP();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addSaleIAP", new addSaleIAP());
      processMap.put("removeSaleIAP", new removeSaleIAP());
      processMap.put("buyIAP", new buyIAP());
      return processMap;
    }

    public static class addSaleIAP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSaleIAP_args> {
      public addSaleIAP() {
        super("addSaleIAP");
      }

      public addSaleIAP_args getEmptyArgsInstance() {
        return new addSaleIAP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addSaleIAP_result getResult(I iface, addSaleIAP_args args) throws org.apache.thrift.TException {
        addSaleIAP_result result = new addSaleIAP_result();
        try {
          result.success = iface.addSaleIAP(args.zoneName, args.jsonData);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class removeSaleIAP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeSaleIAP_args> {
      public removeSaleIAP() {
        super("removeSaleIAP");
      }

      public removeSaleIAP_args getEmptyArgsInstance() {
        return new removeSaleIAP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public removeSaleIAP_result getResult(I iface, removeSaleIAP_args args) throws org.apache.thrift.TException {
        removeSaleIAP_result result = new removeSaleIAP_result();
        try {
          result.success = iface.removeSaleIAP(args.zoneName, args.listIdSale);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class buyIAP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, buyIAP_args> {
      public buyIAP() {
        super("buyIAP");
      }

      public buyIAP_args getEmptyArgsInstance() {
        return new buyIAP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public buyIAP_result getResult(I iface, buyIAP_args args) throws org.apache.thrift.TException {
        buyIAP_result result = new buyIAP_result();
        try {
          result.success = iface.buyIAP(args.zoneName, args.uid, args.idPackage);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addSaleIAP", new addSaleIAP());
      processMap.put("removeSaleIAP", new removeSaleIAP());
      processMap.put("buyIAP", new buyIAP());
      return processMap;
    }

    public static class addSaleIAP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSaleIAP_args, java.lang.Boolean> {
      public addSaleIAP() {
        super("addSaleIAP");
      }

      public addSaleIAP_args getEmptyArgsInstance() {
        return new addSaleIAP_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            addSaleIAP_result result = new addSaleIAP_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addSaleIAP_result result = new addSaleIAP_result();
            if (e instanceof com.bamisu.log.gamethrift.entities.exception.ThriftSVException) {
              result.e = (com.bamisu.log.gamethrift.entities.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSaleIAP_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.addSaleIAP(args.zoneName, args.jsonData,resultHandler);
      }
    }

    public static class removeSaleIAP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeSaleIAP_args, java.lang.Boolean> {
      public removeSaleIAP() {
        super("removeSaleIAP");
      }

      public removeSaleIAP_args getEmptyArgsInstance() {
        return new removeSaleIAP_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            removeSaleIAP_result result = new removeSaleIAP_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeSaleIAP_result result = new removeSaleIAP_result();
            if (e instanceof com.bamisu.log.gamethrift.entities.exception.ThriftSVException) {
              result.e = (com.bamisu.log.gamethrift.entities.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeSaleIAP_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.removeSaleIAP(args.zoneName, args.listIdSale,resultHandler);
      }
    }

    public static class buyIAP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, buyIAP_args, java.lang.Boolean> {
      public buyIAP() {
        super("buyIAP");
      }

      public buyIAP_args getEmptyArgsInstance() {
        return new buyIAP_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            buyIAP_result result = new buyIAP_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            buyIAP_result result = new buyIAP_result();
            if (e instanceof com.bamisu.log.gamethrift.entities.exception.ThriftSVException) {
              result.e = (com.bamisu.log.gamethrift.entities.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, buyIAP_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.buyIAP(args.zoneName, args.uid, args.idPackage,resultHandler);
      }
    }

  }

  public static class addSaleIAP_args implements org.apache.thrift.TBase<addSaleIAP_args, addSaleIAP_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSaleIAP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSaleIAP_args");

    private static final org.apache.thrift.protocol.TField ZONE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonData", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSaleIAP_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSaleIAP_argsTupleSchemeFactory();

    public java.lang.String zoneName; // required
    public java.lang.String jsonData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZONE_NAME((short)1, "zoneName"),
      JSON_DATA((short)2, "jsonData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZONE_NAME
            return ZONE_NAME;
          case 2: // JSON_DATA
            return JSON_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZONE_NAME, new org.apache.thrift.meta_data.FieldMetaData("zoneName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_DATA, new org.apache.thrift.meta_data.FieldMetaData("jsonData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSaleIAP_args.class, metaDataMap);
    }

    public addSaleIAP_args() {
    }

    public addSaleIAP_args(
      java.lang.String zoneName,
      java.lang.String jsonData)
    {
      this();
      this.zoneName = zoneName;
      this.jsonData = jsonData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSaleIAP_args(addSaleIAP_args other) {
      if (other.isSetZoneName()) {
        this.zoneName = other.zoneName;
      }
      if (other.isSetJsonData()) {
        this.jsonData = other.jsonData;
      }
    }

    public addSaleIAP_args deepCopy() {
      return new addSaleIAP_args(this);
    }

    @Override
    public void clear() {
      this.zoneName = null;
      this.jsonData = null;
    }

    public java.lang.String getZoneName() {
      return this.zoneName;
    }

    public addSaleIAP_args setZoneName(java.lang.String zoneName) {
      this.zoneName = zoneName;
      return this;
    }

    public void unsetZoneName() {
      this.zoneName = null;
    }

    /** Returns true if field zoneName is set (has been assigned a value) and false otherwise */
    public boolean isSetZoneName() {
      return this.zoneName != null;
    }

    public void setZoneNameIsSet(boolean value) {
      if (!value) {
        this.zoneName = null;
      }
    }

    public java.lang.String getJsonData() {
      return this.jsonData;
    }

    public addSaleIAP_args setJsonData(java.lang.String jsonData) {
      this.jsonData = jsonData;
      return this;
    }

    public void unsetJsonData() {
      this.jsonData = null;
    }

    /** Returns true if field jsonData is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonData() {
      return this.jsonData != null;
    }

    public void setJsonDataIsSet(boolean value) {
      if (!value) {
        this.jsonData = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ZONE_NAME:
        if (value == null) {
          unsetZoneName();
        } else {
          setZoneName((java.lang.String)value);
        }
        break;

      case JSON_DATA:
        if (value == null) {
          unsetJsonData();
        } else {
          setJsonData((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ZONE_NAME:
        return getZoneName();

      case JSON_DATA:
        return getJsonData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ZONE_NAME:
        return isSetZoneName();
      case JSON_DATA:
        return isSetJsonData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addSaleIAP_args)
        return this.equals((addSaleIAP_args)that);
      return false;
    }

    public boolean equals(addSaleIAP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zoneName = true && this.isSetZoneName();
      boolean that_present_zoneName = true && that.isSetZoneName();
      if (this_present_zoneName || that_present_zoneName) {
        if (!(this_present_zoneName && that_present_zoneName))
          return false;
        if (!this.zoneName.equals(that.zoneName))
          return false;
      }

      boolean this_present_jsonData = true && this.isSetJsonData();
      boolean that_present_jsonData = true && that.isSetJsonData();
      if (this_present_jsonData || that_present_jsonData) {
        if (!(this_present_jsonData && that_present_jsonData))
          return false;
        if (!this.jsonData.equals(that.jsonData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZoneName()) ? 131071 : 524287);
      if (isSetZoneName())
        hashCode = hashCode * 8191 + zoneName.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonData()) ? 131071 : 524287);
      if (isSetJsonData())
        hashCode = hashCode * 8191 + jsonData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addSaleIAP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetZoneName()).compareTo(other.isSetZoneName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZoneName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneName, other.zoneName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJsonData()).compareTo(other.isSetJsonData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonData, other.jsonData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addSaleIAP_args(");
      boolean first = true;

      sb.append("zoneName:");
      if (this.zoneName == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonData:");
      if (this.jsonData == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (zoneName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zoneName' was not present! Struct: " + toString());
      }
      if (jsonData == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jsonData' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSaleIAP_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSaleIAP_argsStandardScheme getScheme() {
        return new addSaleIAP_argsStandardScheme();
      }
    }

    private static class addSaleIAP_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSaleIAP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSaleIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZONE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zoneName = iprot.readString();
                struct.setZoneNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonData = iprot.readString();
                struct.setJsonDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSaleIAP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zoneName != null) {
          oprot.writeFieldBegin(ZONE_NAME_FIELD_DESC);
          oprot.writeString(struct.zoneName);
          oprot.writeFieldEnd();
        }
        if (struct.jsonData != null) {
          oprot.writeFieldBegin(JSON_DATA_FIELD_DESC);
          oprot.writeString(struct.jsonData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSaleIAP_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSaleIAP_argsTupleScheme getScheme() {
        return new addSaleIAP_argsTupleScheme();
      }
    }

    private static class addSaleIAP_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSaleIAP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSaleIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.zoneName);
        oprot.writeString(struct.jsonData);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSaleIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.zoneName = iprot.readString();
        struct.setZoneNameIsSet(true);
        struct.jsonData = iprot.readString();
        struct.setJsonDataIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSaleIAP_result implements org.apache.thrift.TBase<addSaleIAP_result, addSaleIAP_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSaleIAP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSaleIAP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSaleIAP_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSaleIAP_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.gamethrift.entities.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSaleIAP_result.class, metaDataMap);
    }

    public addSaleIAP_result() {
    }

    public addSaleIAP_result(
      boolean success,
      com.bamisu.log.gamethrift.entities.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSaleIAP_result(addSaleIAP_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException(other.e);
      }
    }

    public addSaleIAP_result deepCopy() {
      return new addSaleIAP_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addSaleIAP_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException getE() {
      return this.e;
    }

    public addSaleIAP_result setE(com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.gamethrift.entities.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addSaleIAP_result)
        return this.equals((addSaleIAP_result)that);
      return false;
    }

    public boolean equals(addSaleIAP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addSaleIAP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addSaleIAP_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSaleIAP_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSaleIAP_resultStandardScheme getScheme() {
        return new addSaleIAP_resultStandardScheme();
      }
    }

    private static class addSaleIAP_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSaleIAP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSaleIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSaleIAP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSaleIAP_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSaleIAP_resultTupleScheme getScheme() {
        return new addSaleIAP_resultTupleScheme();
      }
    }

    private static class addSaleIAP_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSaleIAP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSaleIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSaleIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeSaleIAP_args implements org.apache.thrift.TBase<removeSaleIAP_args, removeSaleIAP_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeSaleIAP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSaleIAP_args");

    private static final org.apache.thrift.protocol.TField ZONE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_ID_SALE_FIELD_DESC = new org.apache.thrift.protocol.TField("listIdSale", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeSaleIAP_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeSaleIAP_argsTupleSchemeFactory();

    public java.lang.String zoneName; // required
    public java.util.List<java.lang.String> listIdSale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZONE_NAME((short)1, "zoneName"),
      LIST_ID_SALE((short)2, "listIdSale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZONE_NAME
            return ZONE_NAME;
          case 2: // LIST_ID_SALE
            return LIST_ID_SALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZONE_NAME, new org.apache.thrift.meta_data.FieldMetaData("zoneName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIST_ID_SALE, new org.apache.thrift.meta_data.FieldMetaData("listIdSale", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSaleIAP_args.class, metaDataMap);
    }

    public removeSaleIAP_args() {
    }

    public removeSaleIAP_args(
      java.lang.String zoneName,
      java.util.List<java.lang.String> listIdSale)
    {
      this();
      this.zoneName = zoneName;
      this.listIdSale = listIdSale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSaleIAP_args(removeSaleIAP_args other) {
      if (other.isSetZoneName()) {
        this.zoneName = other.zoneName;
      }
      if (other.isSetListIdSale()) {
        java.util.List<java.lang.String> __this__listIdSale = new java.util.ArrayList<java.lang.String>(other.listIdSale);
        this.listIdSale = __this__listIdSale;
      }
    }

    public removeSaleIAP_args deepCopy() {
      return new removeSaleIAP_args(this);
    }

    @Override
    public void clear() {
      this.zoneName = null;
      this.listIdSale = null;
    }

    public java.lang.String getZoneName() {
      return this.zoneName;
    }

    public removeSaleIAP_args setZoneName(java.lang.String zoneName) {
      this.zoneName = zoneName;
      return this;
    }

    public void unsetZoneName() {
      this.zoneName = null;
    }

    /** Returns true if field zoneName is set (has been assigned a value) and false otherwise */
    public boolean isSetZoneName() {
      return this.zoneName != null;
    }

    public void setZoneNameIsSet(boolean value) {
      if (!value) {
        this.zoneName = null;
      }
    }

    public int getListIdSaleSize() {
      return (this.listIdSale == null) ? 0 : this.listIdSale.size();
    }

    public java.util.Iterator<java.lang.String> getListIdSaleIterator() {
      return (this.listIdSale == null) ? null : this.listIdSale.iterator();
    }

    public void addToListIdSale(java.lang.String elem) {
      if (this.listIdSale == null) {
        this.listIdSale = new java.util.ArrayList<java.lang.String>();
      }
      this.listIdSale.add(elem);
    }

    public java.util.List<java.lang.String> getListIdSale() {
      return this.listIdSale;
    }

    public removeSaleIAP_args setListIdSale(java.util.List<java.lang.String> listIdSale) {
      this.listIdSale = listIdSale;
      return this;
    }

    public void unsetListIdSale() {
      this.listIdSale = null;
    }

    /** Returns true if field listIdSale is set (has been assigned a value) and false otherwise */
    public boolean isSetListIdSale() {
      return this.listIdSale != null;
    }

    public void setListIdSaleIsSet(boolean value) {
      if (!value) {
        this.listIdSale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ZONE_NAME:
        if (value == null) {
          unsetZoneName();
        } else {
          setZoneName((java.lang.String)value);
        }
        break;

      case LIST_ID_SALE:
        if (value == null) {
          unsetListIdSale();
        } else {
          setListIdSale((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ZONE_NAME:
        return getZoneName();

      case LIST_ID_SALE:
        return getListIdSale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ZONE_NAME:
        return isSetZoneName();
      case LIST_ID_SALE:
        return isSetListIdSale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSaleIAP_args)
        return this.equals((removeSaleIAP_args)that);
      return false;
    }

    public boolean equals(removeSaleIAP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zoneName = true && this.isSetZoneName();
      boolean that_present_zoneName = true && that.isSetZoneName();
      if (this_present_zoneName || that_present_zoneName) {
        if (!(this_present_zoneName && that_present_zoneName))
          return false;
        if (!this.zoneName.equals(that.zoneName))
          return false;
      }

      boolean this_present_listIdSale = true && this.isSetListIdSale();
      boolean that_present_listIdSale = true && that.isSetListIdSale();
      if (this_present_listIdSale || that_present_listIdSale) {
        if (!(this_present_listIdSale && that_present_listIdSale))
          return false;
        if (!this.listIdSale.equals(that.listIdSale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZoneName()) ? 131071 : 524287);
      if (isSetZoneName())
        hashCode = hashCode * 8191 + zoneName.hashCode();

      hashCode = hashCode * 8191 + ((isSetListIdSale()) ? 131071 : 524287);
      if (isSetListIdSale())
        hashCode = hashCode * 8191 + listIdSale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeSaleIAP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetZoneName()).compareTo(other.isSetZoneName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZoneName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneName, other.zoneName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetListIdSale()).compareTo(other.isSetListIdSale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListIdSale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listIdSale, other.listIdSale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeSaleIAP_args(");
      boolean first = true;

      sb.append("zoneName:");
      if (this.zoneName == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listIdSale:");
      if (this.listIdSale == null) {
        sb.append("null");
      } else {
        sb.append(this.listIdSale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (zoneName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zoneName' was not present! Struct: " + toString());
      }
      if (listIdSale == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'listIdSale' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSaleIAP_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSaleIAP_argsStandardScheme getScheme() {
        return new removeSaleIAP_argsStandardScheme();
      }
    }

    private static class removeSaleIAP_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeSaleIAP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSaleIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZONE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zoneName = iprot.readString();
                struct.setZoneNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_ID_SALE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.listIdSale = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.listIdSale.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setListIdSaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSaleIAP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zoneName != null) {
          oprot.writeFieldBegin(ZONE_NAME_FIELD_DESC);
          oprot.writeString(struct.zoneName);
          oprot.writeFieldEnd();
        }
        if (struct.listIdSale != null) {
          oprot.writeFieldBegin(LIST_ID_SALE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listIdSale.size()));
            for (java.lang.String _iter3 : struct.listIdSale)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSaleIAP_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSaleIAP_argsTupleScheme getScheme() {
        return new removeSaleIAP_argsTupleScheme();
      }
    }

    private static class removeSaleIAP_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeSaleIAP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSaleIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.zoneName);
        {
          oprot.writeI32(struct.listIdSale.size());
          for (java.lang.String _iter4 : struct.listIdSale)
          {
            oprot.writeString(_iter4);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSaleIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.zoneName = iprot.readString();
        struct.setZoneNameIsSet(true);
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.listIdSale = new java.util.ArrayList<java.lang.String>(_list5.size);
          java.lang.String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.listIdSale.add(_elem6);
          }
        }
        struct.setListIdSaleIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeSaleIAP_result implements org.apache.thrift.TBase<removeSaleIAP_result, removeSaleIAP_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeSaleIAP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSaleIAP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeSaleIAP_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeSaleIAP_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.gamethrift.entities.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSaleIAP_result.class, metaDataMap);
    }

    public removeSaleIAP_result() {
    }

    public removeSaleIAP_result(
      boolean success,
      com.bamisu.log.gamethrift.entities.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSaleIAP_result(removeSaleIAP_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException(other.e);
      }
    }

    public removeSaleIAP_result deepCopy() {
      return new removeSaleIAP_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeSaleIAP_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException getE() {
      return this.e;
    }

    public removeSaleIAP_result setE(com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.gamethrift.entities.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSaleIAP_result)
        return this.equals((removeSaleIAP_result)that);
      return false;
    }

    public boolean equals(removeSaleIAP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeSaleIAP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeSaleIAP_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSaleIAP_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSaleIAP_resultStandardScheme getScheme() {
        return new removeSaleIAP_resultStandardScheme();
      }
    }

    private static class removeSaleIAP_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeSaleIAP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSaleIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSaleIAP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSaleIAP_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeSaleIAP_resultTupleScheme getScheme() {
        return new removeSaleIAP_resultTupleScheme();
      }
    }

    private static class removeSaleIAP_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeSaleIAP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSaleIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSaleIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class buyIAP_args implements org.apache.thrift.TBase<buyIAP_args, buyIAP_args._Fields>, java.io.Serializable, Cloneable, Comparable<buyIAP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buyIAP_args");

    private static final org.apache.thrift.protocol.TField ZONE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ID_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("idPackage", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new buyIAP_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new buyIAP_argsTupleSchemeFactory();

    public java.lang.String zoneName; // required
    public long uid; // required
    public java.lang.String idPackage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ZONE_NAME((short)1, "zoneName"),
      UID((short)2, "uid"),
      ID_PACKAGE((short)3, "idPackage");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ZONE_NAME
            return ZONE_NAME;
          case 2: // UID
            return UID;
          case 3: // ID_PACKAGE
            return ID_PACKAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ZONE_NAME, new org.apache.thrift.meta_data.FieldMetaData("zoneName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.ID_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("idPackage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buyIAP_args.class, metaDataMap);
    }

    public buyIAP_args() {
    }

    public buyIAP_args(
      java.lang.String zoneName,
      long uid,
      java.lang.String idPackage)
    {
      this();
      this.zoneName = zoneName;
      this.uid = uid;
      setUidIsSet(true);
      this.idPackage = idPackage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyIAP_args(buyIAP_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetZoneName()) {
        this.zoneName = other.zoneName;
      }
      this.uid = other.uid;
      if (other.isSetIdPackage()) {
        this.idPackage = other.idPackage;
      }
    }

    public buyIAP_args deepCopy() {
      return new buyIAP_args(this);
    }

    @Override
    public void clear() {
      this.zoneName = null;
      setUidIsSet(false);
      this.uid = 0;
      this.idPackage = null;
    }

    public java.lang.String getZoneName() {
      return this.zoneName;
    }

    public buyIAP_args setZoneName(java.lang.String zoneName) {
      this.zoneName = zoneName;
      return this;
    }

    public void unsetZoneName() {
      this.zoneName = null;
    }

    /** Returns true if field zoneName is set (has been assigned a value) and false otherwise */
    public boolean isSetZoneName() {
      return this.zoneName != null;
    }

    public void setZoneNameIsSet(boolean value) {
      if (!value) {
        this.zoneName = null;
      }
    }

    public long getUid() {
      return this.uid;
    }

    public buyIAP_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public java.lang.String getIdPackage() {
      return this.idPackage;
    }

    public buyIAP_args setIdPackage(java.lang.String idPackage) {
      this.idPackage = idPackage;
      return this;
    }

    public void unsetIdPackage() {
      this.idPackage = null;
    }

    /** Returns true if field idPackage is set (has been assigned a value) and false otherwise */
    public boolean isSetIdPackage() {
      return this.idPackage != null;
    }

    public void setIdPackageIsSet(boolean value) {
      if (!value) {
        this.idPackage = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ZONE_NAME:
        if (value == null) {
          unsetZoneName();
        } else {
          setZoneName((java.lang.String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Long)value);
        }
        break;

      case ID_PACKAGE:
        if (value == null) {
          unsetIdPackage();
        } else {
          setIdPackage((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ZONE_NAME:
        return getZoneName();

      case UID:
        return getUid();

      case ID_PACKAGE:
        return getIdPackage();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ZONE_NAME:
        return isSetZoneName();
      case UID:
        return isSetUid();
      case ID_PACKAGE:
        return isSetIdPackage();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof buyIAP_args)
        return this.equals((buyIAP_args)that);
      return false;
    }

    public boolean equals(buyIAP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_zoneName = true && this.isSetZoneName();
      boolean that_present_zoneName = true && that.isSetZoneName();
      if (this_present_zoneName || that_present_zoneName) {
        if (!(this_present_zoneName && that_present_zoneName))
          return false;
        if (!this.zoneName.equals(that.zoneName))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_idPackage = true && this.isSetIdPackage();
      boolean that_present_idPackage = true && that.isSetIdPackage();
      if (this_present_idPackage || that_present_idPackage) {
        if (!(this_present_idPackage && that_present_idPackage))
          return false;
        if (!this.idPackage.equals(that.idPackage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetZoneName()) ? 131071 : 524287);
      if (isSetZoneName())
        hashCode = hashCode * 8191 + zoneName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

      hashCode = hashCode * 8191 + ((isSetIdPackage()) ? 131071 : 524287);
      if (isSetIdPackage())
        hashCode = hashCode * 8191 + idPackage.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(buyIAP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetZoneName()).compareTo(other.isSetZoneName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZoneName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneName, other.zoneName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIdPackage()).compareTo(other.isSetIdPackage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdPackage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idPackage, other.idPackage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("buyIAP_args(");
      boolean first = true;

      sb.append("zoneName:");
      if (this.zoneName == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("idPackage:");
      if (this.idPackage == null) {
        sb.append("null");
      } else {
        sb.append(this.idPackage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (zoneName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zoneName' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'uid' because it's a primitive and you chose the non-beans generator.
      if (idPackage == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'idPackage' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buyIAP_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public buyIAP_argsStandardScheme getScheme() {
        return new buyIAP_argsStandardScheme();
      }
    }

    private static class buyIAP_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<buyIAP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buyIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ZONE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.zoneName = iprot.readString();
                struct.setZoneNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ID_PACKAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idPackage = iprot.readString();
                struct.setIdPackageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetUid()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buyIAP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.zoneName != null) {
          oprot.writeFieldBegin(ZONE_NAME_FIELD_DESC);
          oprot.writeString(struct.zoneName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.idPackage != null) {
          oprot.writeFieldBegin(ID_PACKAGE_FIELD_DESC);
          oprot.writeString(struct.idPackage);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buyIAP_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public buyIAP_argsTupleScheme getScheme() {
        return new buyIAP_argsTupleScheme();
      }
    }

    private static class buyIAP_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<buyIAP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buyIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.zoneName);
        oprot.writeI64(struct.uid);
        oprot.writeString(struct.idPackage);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buyIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.zoneName = iprot.readString();
        struct.setZoneNameIsSet(true);
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
        struct.idPackage = iprot.readString();
        struct.setIdPackageIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class buyIAP_result implements org.apache.thrift.TBase<buyIAP_result, buyIAP_result._Fields>, java.io.Serializable, Cloneable, Comparable<buyIAP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buyIAP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new buyIAP_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new buyIAP_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.gamethrift.entities.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buyIAP_result.class, metaDataMap);
    }

    public buyIAP_result() {
    }

    public buyIAP_result(
      boolean success,
      com.bamisu.log.gamethrift.entities.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyIAP_result(buyIAP_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException(other.e);
      }
    }

    public buyIAP_result deepCopy() {
      return new buyIAP_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public buyIAP_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.gamethrift.entities.exception.ThriftSVException getE() {
      return this.e;
    }

    public buyIAP_result setE(com.bamisu.log.gamethrift.entities.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.gamethrift.entities.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof buyIAP_result)
        return this.equals((buyIAP_result)that);
      return false;
    }

    public boolean equals(buyIAP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(buyIAP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("buyIAP_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buyIAP_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public buyIAP_resultStandardScheme getScheme() {
        return new buyIAP_resultStandardScheme();
      }
    }

    private static class buyIAP_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<buyIAP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buyIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buyIAP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buyIAP_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public buyIAP_resultTupleScheme getScheme() {
        return new buyIAP_resultTupleScheme();
      }
    }

    private static class buyIAP_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<buyIAP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buyIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buyIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.gamethrift.entities.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
