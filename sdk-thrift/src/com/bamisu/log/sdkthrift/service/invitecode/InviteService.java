/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bamisu.log.sdkthrift.service.invitecode;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-09-09")
public class InviteService {

  public interface Iface {

    public boolean haveInputInviteCode(String accountID) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean haveExsistInviteCode(String inviteCode) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public String inputInviteCode(String accountID, String inviteCode) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public String getUserInviteModel(String accountID) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean canRewardInviteBonus(String accountID, String idBonus, int point) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean rewardInviteBonus(String accountID, String idBonus, int point) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean updateRewardInviteDetail(String accountID, String jsonUpdate) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void haveInputInviteCode(String accountID, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void haveExsistInviteCode(String inviteCode, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void inputInviteCode(String accountID, String inviteCode, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void getUserInviteModel(String accountID, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void canRewardInviteBonus(String accountID, String idBonus, int point, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void rewardInviteBonus(String accountID, String idBonus, int point, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void updateRewardInviteDetail(String accountID, String jsonUpdate, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean haveInputInviteCode(String accountID) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_haveInputInviteCode(accountID);
      return recv_haveInputInviteCode();
    }

    public void send_haveInputInviteCode(String accountID) throws org.apache.thrift.TException
    {
      haveInputInviteCode_args args = new haveInputInviteCode_args();
      args.setAccountID(accountID);
      sendBase("haveInputInviteCode", args);
    }

    public boolean recv_haveInputInviteCode() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      haveInputInviteCode_result result = new haveInputInviteCode_result();
      receiveBase(result, "haveInputInviteCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "haveInputInviteCode failed: unknown result");
    }

    public boolean haveExsistInviteCode(String inviteCode) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_haveExsistInviteCode(inviteCode);
      return recv_haveExsistInviteCode();
    }

    public void send_haveExsistInviteCode(String inviteCode) throws org.apache.thrift.TException
    {
      haveExsistInviteCode_args args = new haveExsistInviteCode_args();
      args.setInviteCode(inviteCode);
      sendBase("haveExsistInviteCode", args);
    }

    public boolean recv_haveExsistInviteCode() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      haveExsistInviteCode_result result = new haveExsistInviteCode_result();
      receiveBase(result, "haveExsistInviteCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "haveExsistInviteCode failed: unknown result");
    }

    public String inputInviteCode(String accountID, String inviteCode) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_inputInviteCode(accountID, inviteCode);
      return recv_inputInviteCode();
    }

    public void send_inputInviteCode(String accountID, String inviteCode) throws org.apache.thrift.TException
    {
      inputInviteCode_args args = new inputInviteCode_args();
      args.setAccountID(accountID);
      args.setInviteCode(inviteCode);
      sendBase("inputInviteCode", args);
    }

    public String recv_inputInviteCode() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      inputInviteCode_result result = new inputInviteCode_result();
      receiveBase(result, "inputInviteCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "inputInviteCode failed: unknown result");
    }

    public String getUserInviteModel(String accountID) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_getUserInviteModel(accountID);
      return recv_getUserInviteModel();
    }

    public void send_getUserInviteModel(String accountID) throws org.apache.thrift.TException
    {
      getUserInviteModel_args args = new getUserInviteModel_args();
      args.setAccountID(accountID);
      sendBase("getUserInviteModel", args);
    }

    public String recv_getUserInviteModel() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      getUserInviteModel_result result = new getUserInviteModel_result();
      receiveBase(result, "getUserInviteModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInviteModel failed: unknown result");
    }

    public boolean canRewardInviteBonus(String accountID, String idBonus, int point) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_canRewardInviteBonus(accountID, idBonus, point);
      return recv_canRewardInviteBonus();
    }

    public void send_canRewardInviteBonus(String accountID, String idBonus, int point) throws org.apache.thrift.TException
    {
      canRewardInviteBonus_args args = new canRewardInviteBonus_args();
      args.setAccountID(accountID);
      args.setIdBonus(idBonus);
      args.setPoint(point);
      sendBase("canRewardInviteBonus", args);
    }

    public boolean recv_canRewardInviteBonus() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      canRewardInviteBonus_result result = new canRewardInviteBonus_result();
      receiveBase(result, "canRewardInviteBonus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "canRewardInviteBonus failed: unknown result");
    }

    public boolean rewardInviteBonus(String accountID, String idBonus, int point) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_rewardInviteBonus(accountID, idBonus, point);
      return recv_rewardInviteBonus();
    }

    public void send_rewardInviteBonus(String accountID, String idBonus, int point) throws org.apache.thrift.TException
    {
      rewardInviteBonus_args args = new rewardInviteBonus_args();
      args.setAccountID(accountID);
      args.setIdBonus(idBonus);
      args.setPoint(point);
      sendBase("rewardInviteBonus", args);
    }

    public boolean recv_rewardInviteBonus() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      rewardInviteBonus_result result = new rewardInviteBonus_result();
      receiveBase(result, "rewardInviteBonus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rewardInviteBonus failed: unknown result");
    }

    public boolean updateRewardInviteDetail(String accountID, String jsonUpdate) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_updateRewardInviteDetail(accountID, jsonUpdate);
      return recv_updateRewardInviteDetail();
    }

    public void send_updateRewardInviteDetail(String accountID, String jsonUpdate) throws org.apache.thrift.TException
    {
      updateRewardInviteDetail_args args = new updateRewardInviteDetail_args();
      args.setAccountID(accountID);
      args.setJsonUpdate(jsonUpdate);
      sendBase("updateRewardInviteDetail", args);
    }

    public boolean recv_updateRewardInviteDetail() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      updateRewardInviteDetail_result result = new updateRewardInviteDetail_result();
      receiveBase(result, "updateRewardInviteDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRewardInviteDetail failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void haveInputInviteCode(String accountID, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      haveInputInviteCode_call method_call = new haveInputInviteCode_call(accountID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class haveInputInviteCode_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String accountID;
      public haveInputInviteCode_call(String accountID, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("haveInputInviteCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        haveInputInviteCode_args args = new haveInputInviteCode_args();
        args.setAccountID(accountID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_haveInputInviteCode();
      }
    }

    public void haveExsistInviteCode(String inviteCode, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      haveExsistInviteCode_call method_call = new haveExsistInviteCode_call(inviteCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class haveExsistInviteCode_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String inviteCode;
      public haveExsistInviteCode_call(String inviteCode, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inviteCode = inviteCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("haveExsistInviteCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        haveExsistInviteCode_args args = new haveExsistInviteCode_args();
        args.setInviteCode(inviteCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_haveExsistInviteCode();
      }
    }

    public void inputInviteCode(String accountID, String inviteCode, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      inputInviteCode_call method_call = new inputInviteCode_call(accountID, inviteCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class inputInviteCode_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String accountID;
      private String inviteCode;
      public inputInviteCode_call(String accountID, String inviteCode, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.inviteCode = inviteCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inputInviteCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        inputInviteCode_args args = new inputInviteCode_args();
        args.setAccountID(accountID);
        args.setInviteCode(inviteCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_inputInviteCode();
      }
    }

    public void getUserInviteModel(String accountID, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInviteModel_call method_call = new getUserInviteModel_call(accountID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInviteModel_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String accountID;
      public getUserInviteModel_call(String accountID, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInviteModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInviteModel_args args = new getUserInviteModel_args();
        args.setAccountID(accountID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInviteModel();
      }
    }

    public void canRewardInviteBonus(String accountID, String idBonus, int point, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      canRewardInviteBonus_call method_call = new canRewardInviteBonus_call(accountID, idBonus, point, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class canRewardInviteBonus_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String accountID;
      private String idBonus;
      private int point;
      public canRewardInviteBonus_call(String accountID, String idBonus, int point, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.idBonus = idBonus;
        this.point = point;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("canRewardInviteBonus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        canRewardInviteBonus_args args = new canRewardInviteBonus_args();
        args.setAccountID(accountID);
        args.setIdBonus(idBonus);
        args.setPoint(point);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_canRewardInviteBonus();
      }
    }

    public void rewardInviteBonus(String accountID, String idBonus, int point, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rewardInviteBonus_call method_call = new rewardInviteBonus_call(accountID, idBonus, point, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rewardInviteBonus_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String accountID;
      private String idBonus;
      private int point;
      public rewardInviteBonus_call(String accountID, String idBonus, int point, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.idBonus = idBonus;
        this.point = point;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rewardInviteBonus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rewardInviteBonus_args args = new rewardInviteBonus_args();
        args.setAccountID(accountID);
        args.setIdBonus(idBonus);
        args.setPoint(point);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rewardInviteBonus();
      }
    }

    public void updateRewardInviteDetail(String accountID, String jsonUpdate, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRewardInviteDetail_call method_call = new updateRewardInviteDetail_call(accountID, jsonUpdate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRewardInviteDetail_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String accountID;
      private String jsonUpdate;
      public updateRewardInviteDetail_call(String accountID, String jsonUpdate, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.jsonUpdate = jsonUpdate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRewardInviteDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRewardInviteDetail_args args = new updateRewardInviteDetail_args();
        args.setAccountID(accountID);
        args.setJsonUpdate(jsonUpdate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRewardInviteDetail();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("haveInputInviteCode", new haveInputInviteCode());
      processMap.put("haveExsistInviteCode", new haveExsistInviteCode());
      processMap.put("inputInviteCode", new inputInviteCode());
      processMap.put("getUserInviteModel", new getUserInviteModel());
      processMap.put("canRewardInviteBonus", new canRewardInviteBonus());
      processMap.put("rewardInviteBonus", new rewardInviteBonus());
      processMap.put("updateRewardInviteDetail", new updateRewardInviteDetail());
      return processMap;
    }

    public static class haveInputInviteCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, haveInputInviteCode_args> {
      public haveInputInviteCode() {
        super("haveInputInviteCode");
      }

      public haveInputInviteCode_args getEmptyArgsInstance() {
        return new haveInputInviteCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public haveInputInviteCode_result getResult(I iface, haveInputInviteCode_args args) throws org.apache.thrift.TException {
        haveInputInviteCode_result result = new haveInputInviteCode_result();
        try {
          result.success = iface.haveInputInviteCode(args.accountID);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class haveExsistInviteCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, haveExsistInviteCode_args> {
      public haveExsistInviteCode() {
        super("haveExsistInviteCode");
      }

      public haveExsistInviteCode_args getEmptyArgsInstance() {
        return new haveExsistInviteCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public haveExsistInviteCode_result getResult(I iface, haveExsistInviteCode_args args) throws org.apache.thrift.TException {
        haveExsistInviteCode_result result = new haveExsistInviteCode_result();
        try {
          result.success = iface.haveExsistInviteCode(args.inviteCode);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class inputInviteCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inputInviteCode_args> {
      public inputInviteCode() {
        super("inputInviteCode");
      }

      public inputInviteCode_args getEmptyArgsInstance() {
        return new inputInviteCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public inputInviteCode_result getResult(I iface, inputInviteCode_args args) throws org.apache.thrift.TException {
        inputInviteCode_result result = new inputInviteCode_result();
        try {
          result.success = iface.inputInviteCode(args.accountID, args.inviteCode);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getUserInviteModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInviteModel_args> {
      public getUserInviteModel() {
        super("getUserInviteModel");
      }

      public getUserInviteModel_args getEmptyArgsInstance() {
        return new getUserInviteModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getUserInviteModel_result getResult(I iface, getUserInviteModel_args args) throws org.apache.thrift.TException {
        getUserInviteModel_result result = new getUserInviteModel_result();
        try {
          result.success = iface.getUserInviteModel(args.accountID);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class canRewardInviteBonus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, canRewardInviteBonus_args> {
      public canRewardInviteBonus() {
        super("canRewardInviteBonus");
      }

      public canRewardInviteBonus_args getEmptyArgsInstance() {
        return new canRewardInviteBonus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public canRewardInviteBonus_result getResult(I iface, canRewardInviteBonus_args args) throws org.apache.thrift.TException {
        canRewardInviteBonus_result result = new canRewardInviteBonus_result();
        try {
          result.success = iface.canRewardInviteBonus(args.accountID, args.idBonus, args.point);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class rewardInviteBonus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rewardInviteBonus_args> {
      public rewardInviteBonus() {
        super("rewardInviteBonus");
      }

      public rewardInviteBonus_args getEmptyArgsInstance() {
        return new rewardInviteBonus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public rewardInviteBonus_result getResult(I iface, rewardInviteBonus_args args) throws org.apache.thrift.TException {
        rewardInviteBonus_result result = new rewardInviteBonus_result();
        try {
          result.success = iface.rewardInviteBonus(args.accountID, args.idBonus, args.point);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateRewardInviteDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRewardInviteDetail_args> {
      public updateRewardInviteDetail() {
        super("updateRewardInviteDetail");
      }

      public updateRewardInviteDetail_args getEmptyArgsInstance() {
        return new updateRewardInviteDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateRewardInviteDetail_result getResult(I iface, updateRewardInviteDetail_args args) throws org.apache.thrift.TException {
        updateRewardInviteDetail_result result = new updateRewardInviteDetail_result();
        try {
          result.success = iface.updateRewardInviteDetail(args.accountID, args.jsonUpdate);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("haveInputInviteCode", new haveInputInviteCode());
      processMap.put("haveExsistInviteCode", new haveExsistInviteCode());
      processMap.put("inputInviteCode", new inputInviteCode());
      processMap.put("getUserInviteModel", new getUserInviteModel());
      processMap.put("canRewardInviteBonus", new canRewardInviteBonus());
      processMap.put("rewardInviteBonus", new rewardInviteBonus());
      processMap.put("updateRewardInviteDetail", new updateRewardInviteDetail());
      return processMap;
    }

    public static class haveInputInviteCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, haveInputInviteCode_args, Boolean> {
      public haveInputInviteCode() {
        super("haveInputInviteCode");
      }

      public haveInputInviteCode_args getEmptyArgsInstance() {
        return new haveInputInviteCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            haveInputInviteCode_result result = new haveInputInviteCode_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            haveInputInviteCode_result result = new haveInputInviteCode_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, haveInputInviteCode_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.haveInputInviteCode(args.accountID,resultHandler);
      }
    }

    public static class haveExsistInviteCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, haveExsistInviteCode_args, Boolean> {
      public haveExsistInviteCode() {
        super("haveExsistInviteCode");
      }

      public haveExsistInviteCode_args getEmptyArgsInstance() {
        return new haveExsistInviteCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            haveExsistInviteCode_result result = new haveExsistInviteCode_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            haveExsistInviteCode_result result = new haveExsistInviteCode_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, haveExsistInviteCode_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.haveExsistInviteCode(args.inviteCode,resultHandler);
      }
    }

    public static class inputInviteCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, inputInviteCode_args, String> {
      public inputInviteCode() {
        super("inputInviteCode");
      }

      public inputInviteCode_args getEmptyArgsInstance() {
        return new inputInviteCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            inputInviteCode_result result = new inputInviteCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            inputInviteCode_result result = new inputInviteCode_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, inputInviteCode_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.inputInviteCode(args.accountID, args.inviteCode,resultHandler);
      }
    }

    public static class getUserInviteModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInviteModel_args, String> {
      public getUserInviteModel() {
        super("getUserInviteModel");
      }

      public getUserInviteModel_args getEmptyArgsInstance() {
        return new getUserInviteModel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            getUserInviteModel_result result = new getUserInviteModel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserInviteModel_result result = new getUserInviteModel_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInviteModel_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.getUserInviteModel(args.accountID,resultHandler);
      }
    }

    public static class canRewardInviteBonus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, canRewardInviteBonus_args, Boolean> {
      public canRewardInviteBonus() {
        super("canRewardInviteBonus");
      }

      public canRewardInviteBonus_args getEmptyArgsInstance() {
        return new canRewardInviteBonus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            canRewardInviteBonus_result result = new canRewardInviteBonus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            canRewardInviteBonus_result result = new canRewardInviteBonus_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, canRewardInviteBonus_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.canRewardInviteBonus(args.accountID, args.idBonus, args.point,resultHandler);
      }
    }

    public static class rewardInviteBonus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rewardInviteBonus_args, Boolean> {
      public rewardInviteBonus() {
        super("rewardInviteBonus");
      }

      public rewardInviteBonus_args getEmptyArgsInstance() {
        return new rewardInviteBonus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            rewardInviteBonus_result result = new rewardInviteBonus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rewardInviteBonus_result result = new rewardInviteBonus_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rewardInviteBonus_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.rewardInviteBonus(args.accountID, args.idBonus, args.point,resultHandler);
      }
    }

    public static class updateRewardInviteDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRewardInviteDetail_args, Boolean> {
      public updateRewardInviteDetail() {
        super("updateRewardInviteDetail");
      }

      public updateRewardInviteDetail_args getEmptyArgsInstance() {
        return new updateRewardInviteDetail_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            updateRewardInviteDetail_result result = new updateRewardInviteDetail_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateRewardInviteDetail_result result = new updateRewardInviteDetail_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRewardInviteDetail_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateRewardInviteDetail(args.accountID, args.jsonUpdate,resultHandler);
      }
    }

  }

  public static class haveInputInviteCode_args implements org.apache.thrift.TBase<haveInputInviteCode_args, haveInputInviteCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<haveInputInviteCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("haveInputInviteCode_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new haveInputInviteCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new haveInputInviteCode_argsTupleSchemeFactory();

    public String accountID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(haveInputInviteCode_args.class, metaDataMap);
    }

    public haveInputInviteCode_args() {
    }

    public haveInputInviteCode_args(
      String accountID)
    {
      this();
      this.accountID = accountID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public haveInputInviteCode_args(haveInputInviteCode_args other) {
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
    }

    public haveInputInviteCode_args deepCopy() {
      return new haveInputInviteCode_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public haveInputInviteCode_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof haveInputInviteCode_args)
        return this.equals((haveInputInviteCode_args)that);
      return false;
    }

    public boolean equals(haveInputInviteCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(haveInputInviteCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("haveInputInviteCode_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class haveInputInviteCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveInputInviteCode_argsStandardScheme getScheme() {
        return new haveInputInviteCode_argsStandardScheme();
      }
    }

    private static class haveInputInviteCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<haveInputInviteCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, haveInputInviteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, haveInputInviteCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class haveInputInviteCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveInputInviteCode_argsTupleScheme getScheme() {
        return new haveInputInviteCode_argsTupleScheme();
      }
    }

    private static class haveInputInviteCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<haveInputInviteCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, haveInputInviteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, haveInputInviteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class haveInputInviteCode_result implements org.apache.thrift.TBase<haveInputInviteCode_result, haveInputInviteCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<haveInputInviteCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("haveInputInviteCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new haveInputInviteCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new haveInputInviteCode_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(haveInputInviteCode_result.class, metaDataMap);
    }

    public haveInputInviteCode_result() {
    }

    public haveInputInviteCode_result(
      boolean success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public haveInputInviteCode_result(haveInputInviteCode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public haveInputInviteCode_result deepCopy() {
      return new haveInputInviteCode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public haveInputInviteCode_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public haveInputInviteCode_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof haveInputInviteCode_result)
        return this.equals((haveInputInviteCode_result)that);
      return false;
    }

    public boolean equals(haveInputInviteCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(haveInputInviteCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("haveInputInviteCode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class haveInputInviteCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveInputInviteCode_resultStandardScheme getScheme() {
        return new haveInputInviteCode_resultStandardScheme();
      }
    }

    private static class haveInputInviteCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<haveInputInviteCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, haveInputInviteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, haveInputInviteCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class haveInputInviteCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveInputInviteCode_resultTupleScheme getScheme() {
        return new haveInputInviteCode_resultTupleScheme();
      }
    }

    private static class haveInputInviteCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<haveInputInviteCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, haveInputInviteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, haveInputInviteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class haveExsistInviteCode_args implements org.apache.thrift.TBase<haveExsistInviteCode_args, haveExsistInviteCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<haveExsistInviteCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("haveExsistInviteCode_args");

    private static final org.apache.thrift.protocol.TField INVITE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("inviteCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new haveExsistInviteCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new haveExsistInviteCode_argsTupleSchemeFactory();

    public String inviteCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVITE_CODE((short)1, "inviteCode");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVITE_CODE
            return INVITE_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVITE_CODE, new org.apache.thrift.meta_data.FieldMetaData("inviteCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(haveExsistInviteCode_args.class, metaDataMap);
    }

    public haveExsistInviteCode_args() {
    }

    public haveExsistInviteCode_args(
      String inviteCode)
    {
      this();
      this.inviteCode = inviteCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public haveExsistInviteCode_args(haveExsistInviteCode_args other) {
      if (other.isSetInviteCode()) {
        this.inviteCode = other.inviteCode;
      }
    }

    public haveExsistInviteCode_args deepCopy() {
      return new haveExsistInviteCode_args(this);
    }

    @Override
    public void clear() {
      this.inviteCode = null;
    }

    public String getInviteCode() {
      return this.inviteCode;
    }

    public haveExsistInviteCode_args setInviteCode(String inviteCode) {
      this.inviteCode = inviteCode;
      return this;
    }

    public void unsetInviteCode() {
      this.inviteCode = null;
    }

    /** Returns true if field inviteCode is set (has been assigned a value) and false otherwise */
    public boolean isSetInviteCode() {
      return this.inviteCode != null;
    }

    public void setInviteCodeIsSet(boolean value) {
      if (!value) {
        this.inviteCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVITE_CODE:
        if (value == null) {
          unsetInviteCode();
        } else {
          setInviteCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVITE_CODE:
        return getInviteCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVITE_CODE:
        return isSetInviteCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof haveExsistInviteCode_args)
        return this.equals((haveExsistInviteCode_args)that);
      return false;
    }

    public boolean equals(haveExsistInviteCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_inviteCode = true && this.isSetInviteCode();
      boolean that_present_inviteCode = true && that.isSetInviteCode();
      if (this_present_inviteCode || that_present_inviteCode) {
        if (!(this_present_inviteCode && that_present_inviteCode))
          return false;
        if (!this.inviteCode.equals(that.inviteCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInviteCode()) ? 131071 : 524287);
      if (isSetInviteCode())
        hashCode = hashCode * 8191 + inviteCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(haveExsistInviteCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInviteCode()).compareTo(other.isSetInviteCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInviteCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inviteCode, other.inviteCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("haveExsistInviteCode_args(");
      boolean first = true;

      sb.append("inviteCode:");
      if (this.inviteCode == null) {
        sb.append("null");
      } else {
        sb.append(this.inviteCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (inviteCode == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inviteCode' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class haveExsistInviteCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveExsistInviteCode_argsStandardScheme getScheme() {
        return new haveExsistInviteCode_argsStandardScheme();
      }
    }

    private static class haveExsistInviteCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<haveExsistInviteCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, haveExsistInviteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVITE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inviteCode = iprot.readString();
                struct.setInviteCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, haveExsistInviteCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inviteCode != null) {
          oprot.writeFieldBegin(INVITE_CODE_FIELD_DESC);
          oprot.writeString(struct.inviteCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class haveExsistInviteCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveExsistInviteCode_argsTupleScheme getScheme() {
        return new haveExsistInviteCode_argsTupleScheme();
      }
    }

    private static class haveExsistInviteCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<haveExsistInviteCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, haveExsistInviteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.inviteCode);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, haveExsistInviteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.inviteCode = iprot.readString();
        struct.setInviteCodeIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class haveExsistInviteCode_result implements org.apache.thrift.TBase<haveExsistInviteCode_result, haveExsistInviteCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<haveExsistInviteCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("haveExsistInviteCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new haveExsistInviteCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new haveExsistInviteCode_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(haveExsistInviteCode_result.class, metaDataMap);
    }

    public haveExsistInviteCode_result() {
    }

    public haveExsistInviteCode_result(
      boolean success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public haveExsistInviteCode_result(haveExsistInviteCode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public haveExsistInviteCode_result deepCopy() {
      return new haveExsistInviteCode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public haveExsistInviteCode_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public haveExsistInviteCode_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof haveExsistInviteCode_result)
        return this.equals((haveExsistInviteCode_result)that);
      return false;
    }

    public boolean equals(haveExsistInviteCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(haveExsistInviteCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("haveExsistInviteCode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class haveExsistInviteCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveExsistInviteCode_resultStandardScheme getScheme() {
        return new haveExsistInviteCode_resultStandardScheme();
      }
    }

    private static class haveExsistInviteCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<haveExsistInviteCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, haveExsistInviteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, haveExsistInviteCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class haveExsistInviteCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveExsistInviteCode_resultTupleScheme getScheme() {
        return new haveExsistInviteCode_resultTupleScheme();
      }
    }

    private static class haveExsistInviteCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<haveExsistInviteCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, haveExsistInviteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, haveExsistInviteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class inputInviteCode_args implements org.apache.thrift.TBase<inputInviteCode_args, inputInviteCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<inputInviteCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inputInviteCode_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INVITE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("inviteCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new inputInviteCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new inputInviteCode_argsTupleSchemeFactory();

    public String accountID; // required
    public String inviteCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      INVITE_CODE((short)2, "inviteCode");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // INVITE_CODE
            return INVITE_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INVITE_CODE, new org.apache.thrift.meta_data.FieldMetaData("inviteCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inputInviteCode_args.class, metaDataMap);
    }

    public inputInviteCode_args() {
    }

    public inputInviteCode_args(
      String accountID,
      String inviteCode)
    {
      this();
      this.accountID = accountID;
      this.inviteCode = inviteCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inputInviteCode_args(inputInviteCode_args other) {
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      if (other.isSetInviteCode()) {
        this.inviteCode = other.inviteCode;
      }
    }

    public inputInviteCode_args deepCopy() {
      return new inputInviteCode_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      this.inviteCode = null;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public inputInviteCode_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public String getInviteCode() {
      return this.inviteCode;
    }

    public inputInviteCode_args setInviteCode(String inviteCode) {
      this.inviteCode = inviteCode;
      return this;
    }

    public void unsetInviteCode() {
      this.inviteCode = null;
    }

    /** Returns true if field inviteCode is set (has been assigned a value) and false otherwise */
    public boolean isSetInviteCode() {
      return this.inviteCode != null;
    }

    public void setInviteCodeIsSet(boolean value) {
      if (!value) {
        this.inviteCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case INVITE_CODE:
        if (value == null) {
          unsetInviteCode();
        } else {
          setInviteCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case INVITE_CODE:
        return getInviteCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case INVITE_CODE:
        return isSetInviteCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inputInviteCode_args)
        return this.equals((inputInviteCode_args)that);
      return false;
    }

    public boolean equals(inputInviteCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_inviteCode = true && this.isSetInviteCode();
      boolean that_present_inviteCode = true && that.isSetInviteCode();
      if (this_present_inviteCode || that_present_inviteCode) {
        if (!(this_present_inviteCode && that_present_inviteCode))
          return false;
        if (!this.inviteCode.equals(that.inviteCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + ((isSetInviteCode()) ? 131071 : 524287);
      if (isSetInviteCode())
        hashCode = hashCode * 8191 + inviteCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(inputInviteCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInviteCode()).compareTo(other.isSetInviteCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInviteCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inviteCode, other.inviteCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inputInviteCode_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inviteCode:");
      if (this.inviteCode == null) {
        sb.append("null");
      } else {
        sb.append(this.inviteCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      if (inviteCode == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inviteCode' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inputInviteCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public inputInviteCode_argsStandardScheme getScheme() {
        return new inputInviteCode_argsStandardScheme();
      }
    }

    private static class inputInviteCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<inputInviteCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inputInviteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVITE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inviteCode = iprot.readString();
                struct.setInviteCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inputInviteCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        if (struct.inviteCode != null) {
          oprot.writeFieldBegin(INVITE_CODE_FIELD_DESC);
          oprot.writeString(struct.inviteCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inputInviteCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public inputInviteCode_argsTupleScheme getScheme() {
        return new inputInviteCode_argsTupleScheme();
      }
    }

    private static class inputInviteCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<inputInviteCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inputInviteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeString(struct.inviteCode);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inputInviteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.inviteCode = iprot.readString();
        struct.setInviteCodeIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class inputInviteCode_result implements org.apache.thrift.TBase<inputInviteCode_result, inputInviteCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<inputInviteCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inputInviteCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new inputInviteCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new inputInviteCode_resultTupleSchemeFactory();

    public String success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inputInviteCode_result.class, metaDataMap);
    }

    public inputInviteCode_result() {
    }

    public inputInviteCode_result(
      String success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inputInviteCode_result(inputInviteCode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public inputInviteCode_result deepCopy() {
      return new inputInviteCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public inputInviteCode_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public inputInviteCode_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inputInviteCode_result)
        return this.equals((inputInviteCode_result)that);
      return false;
    }

    public boolean equals(inputInviteCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(inputInviteCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inputInviteCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inputInviteCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public inputInviteCode_resultStandardScheme getScheme() {
        return new inputInviteCode_resultStandardScheme();
      }
    }

    private static class inputInviteCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<inputInviteCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inputInviteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inputInviteCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inputInviteCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public inputInviteCode_resultTupleScheme getScheme() {
        return new inputInviteCode_resultTupleScheme();
      }
    }

    private static class inputInviteCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<inputInviteCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inputInviteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inputInviteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInviteModel_args implements org.apache.thrift.TBase<getUserInviteModel_args, getUserInviteModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInviteModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInviteModel_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInviteModel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInviteModel_argsTupleSchemeFactory();

    public String accountID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInviteModel_args.class, metaDataMap);
    }

    public getUserInviteModel_args() {
    }

    public getUserInviteModel_args(
      String accountID)
    {
      this();
      this.accountID = accountID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInviteModel_args(getUserInviteModel_args other) {
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
    }

    public getUserInviteModel_args deepCopy() {
      return new getUserInviteModel_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public getUserInviteModel_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInviteModel_args)
        return this.equals((getUserInviteModel_args)that);
      return false;
    }

    public boolean equals(getUserInviteModel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInviteModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInviteModel_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInviteModel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInviteModel_argsStandardScheme getScheme() {
        return new getUserInviteModel_argsStandardScheme();
      }
    }

    private static class getUserInviteModel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInviteModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInviteModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInviteModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInviteModel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInviteModel_argsTupleScheme getScheme() {
        return new getUserInviteModel_argsTupleScheme();
      }
    }

    private static class getUserInviteModel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInviteModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInviteModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInviteModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInviteModel_result implements org.apache.thrift.TBase<getUserInviteModel_result, getUserInviteModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInviteModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInviteModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInviteModel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInviteModel_resultTupleSchemeFactory();

    public String success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInviteModel_result.class, metaDataMap);
    }

    public getUserInviteModel_result() {
    }

    public getUserInviteModel_result(
      String success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInviteModel_result(getUserInviteModel_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public getUserInviteModel_result deepCopy() {
      return new getUserInviteModel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getUserInviteModel_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public getUserInviteModel_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInviteModel_result)
        return this.equals((getUserInviteModel_result)that);
      return false;
    }

    public boolean equals(getUserInviteModel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInviteModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInviteModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInviteModel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInviteModel_resultStandardScheme getScheme() {
        return new getUserInviteModel_resultStandardScheme();
      }
    }

    private static class getUserInviteModel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInviteModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInviteModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInviteModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInviteModel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInviteModel_resultTupleScheme getScheme() {
        return new getUserInviteModel_resultTupleScheme();
      }
    }

    private static class getUserInviteModel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInviteModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInviteModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInviteModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class canRewardInviteBonus_args implements org.apache.thrift.TBase<canRewardInviteBonus_args, canRewardInviteBonus_args._Fields>, java.io.Serializable, Cloneable, Comparable<canRewardInviteBonus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canRewardInviteBonus_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_BONUS_FIELD_DESC = new org.apache.thrift.protocol.TField("idBonus", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canRewardInviteBonus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canRewardInviteBonus_argsTupleSchemeFactory();

    public String accountID; // required
    public String idBonus; // required
    public int point; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      ID_BONUS((short)2, "idBonus"),
      POINT((short)3, "point");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // ID_BONUS
            return ID_BONUS;
          case 3: // POINT
            return POINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POINT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID_BONUS, new org.apache.thrift.meta_data.FieldMetaData("idBonus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canRewardInviteBonus_args.class, metaDataMap);
    }

    public canRewardInviteBonus_args() {
    }

    public canRewardInviteBonus_args(
      String accountID,
      String idBonus,
      int point)
    {
      this();
      this.accountID = accountID;
      this.idBonus = idBonus;
      this.point = point;
      setPointIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canRewardInviteBonus_args(canRewardInviteBonus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      if (other.isSetIdBonus()) {
        this.idBonus = other.idBonus;
      }
      this.point = other.point;
    }

    public canRewardInviteBonus_args deepCopy() {
      return new canRewardInviteBonus_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      this.idBonus = null;
      setPointIsSet(false);
      this.point = 0;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public canRewardInviteBonus_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public String getIdBonus() {
      return this.idBonus;
    }

    public canRewardInviteBonus_args setIdBonus(String idBonus) {
      this.idBonus = idBonus;
      return this;
    }

    public void unsetIdBonus() {
      this.idBonus = null;
    }

    /** Returns true if field idBonus is set (has been assigned a value) and false otherwise */
    public boolean isSetIdBonus() {
      return this.idBonus != null;
    }

    public void setIdBonusIsSet(boolean value) {
      if (!value) {
        this.idBonus = null;
      }
    }

    public int getPoint() {
      return this.point;
    }

    public canRewardInviteBonus_args setPoint(int point) {
      this.point = point;
      setPointIsSet(true);
      return this;
    }

    public void unsetPoint() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
    }

    /** Returns true if field point is set (has been assigned a value) and false otherwise */
    public boolean isSetPoint() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
    }

    public void setPointIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case ID_BONUS:
        if (value == null) {
          unsetIdBonus();
        } else {
          setIdBonus((String)value);
        }
        break;

      case POINT:
        if (value == null) {
          unsetPoint();
        } else {
          setPoint((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case ID_BONUS:
        return getIdBonus();

      case POINT:
        return getPoint();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case ID_BONUS:
        return isSetIdBonus();
      case POINT:
        return isSetPoint();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof canRewardInviteBonus_args)
        return this.equals((canRewardInviteBonus_args)that);
      return false;
    }

    public boolean equals(canRewardInviteBonus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_idBonus = true && this.isSetIdBonus();
      boolean that_present_idBonus = true && that.isSetIdBonus();
      if (this_present_idBonus || that_present_idBonus) {
        if (!(this_present_idBonus && that_present_idBonus))
          return false;
        if (!this.idBonus.equals(that.idBonus))
          return false;
      }

      boolean this_present_point = true;
      boolean that_present_point = true;
      if (this_present_point || that_present_point) {
        if (!(this_present_point && that_present_point))
          return false;
        if (this.point != that.point)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + ((isSetIdBonus()) ? 131071 : 524287);
      if (isSetIdBonus())
        hashCode = hashCode * 8191 + idBonus.hashCode();

      hashCode = hashCode * 8191 + point;

      return hashCode;
    }

    @Override
    public int compareTo(canRewardInviteBonus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdBonus()).compareTo(other.isSetIdBonus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdBonus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idBonus, other.idBonus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPoint()).compareTo(other.isSetPoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, other.point);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canRewardInviteBonus_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idBonus:");
      if (this.idBonus == null) {
        sb.append("null");
      } else {
        sb.append(this.idBonus);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("point:");
      sb.append(this.point);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      if (idBonus == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'idBonus' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'point' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canRewardInviteBonus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canRewardInviteBonus_argsStandardScheme getScheme() {
        return new canRewardInviteBonus_argsStandardScheme();
      }
    }

    private static class canRewardInviteBonus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<canRewardInviteBonus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canRewardInviteBonus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID_BONUS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idBonus = iprot.readString();
                struct.setIdBonusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POINT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.point = iprot.readI32();
                struct.setPointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPoint()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'point' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canRewardInviteBonus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        if (struct.idBonus != null) {
          oprot.writeFieldBegin(ID_BONUS_FIELD_DESC);
          oprot.writeString(struct.idBonus);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POINT_FIELD_DESC);
        oprot.writeI32(struct.point);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canRewardInviteBonus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canRewardInviteBonus_argsTupleScheme getScheme() {
        return new canRewardInviteBonus_argsTupleScheme();
      }
    }

    private static class canRewardInviteBonus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<canRewardInviteBonus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canRewardInviteBonus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeString(struct.idBonus);
        oprot.writeI32(struct.point);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canRewardInviteBonus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.idBonus = iprot.readString();
        struct.setIdBonusIsSet(true);
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class canRewardInviteBonus_result implements org.apache.thrift.TBase<canRewardInviteBonus_result, canRewardInviteBonus_result._Fields>, java.io.Serializable, Cloneable, Comparable<canRewardInviteBonus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canRewardInviteBonus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canRewardInviteBonus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canRewardInviteBonus_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canRewardInviteBonus_result.class, metaDataMap);
    }

    public canRewardInviteBonus_result() {
    }

    public canRewardInviteBonus_result(
      boolean success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canRewardInviteBonus_result(canRewardInviteBonus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public canRewardInviteBonus_result deepCopy() {
      return new canRewardInviteBonus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public canRewardInviteBonus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public canRewardInviteBonus_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof canRewardInviteBonus_result)
        return this.equals((canRewardInviteBonus_result)that);
      return false;
    }

    public boolean equals(canRewardInviteBonus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(canRewardInviteBonus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canRewardInviteBonus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canRewardInviteBonus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canRewardInviteBonus_resultStandardScheme getScheme() {
        return new canRewardInviteBonus_resultStandardScheme();
      }
    }

    private static class canRewardInviteBonus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<canRewardInviteBonus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canRewardInviteBonus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canRewardInviteBonus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canRewardInviteBonus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public canRewardInviteBonus_resultTupleScheme getScheme() {
        return new canRewardInviteBonus_resultTupleScheme();
      }
    }

    private static class canRewardInviteBonus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<canRewardInviteBonus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canRewardInviteBonus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canRewardInviteBonus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rewardInviteBonus_args implements org.apache.thrift.TBase<rewardInviteBonus_args, rewardInviteBonus_args._Fields>, java.io.Serializable, Cloneable, Comparable<rewardInviteBonus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rewardInviteBonus_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_BONUS_FIELD_DESC = new org.apache.thrift.protocol.TField("idBonus", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rewardInviteBonus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rewardInviteBonus_argsTupleSchemeFactory();

    public String accountID; // required
    public String idBonus; // required
    public int point; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      ID_BONUS((short)2, "idBonus"),
      POINT((short)3, "point");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // ID_BONUS
            return ID_BONUS;
          case 3: // POINT
            return POINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POINT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID_BONUS, new org.apache.thrift.meta_data.FieldMetaData("idBonus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rewardInviteBonus_args.class, metaDataMap);
    }

    public rewardInviteBonus_args() {
    }

    public rewardInviteBonus_args(
      String accountID,
      String idBonus,
      int point)
    {
      this();
      this.accountID = accountID;
      this.idBonus = idBonus;
      this.point = point;
      setPointIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rewardInviteBonus_args(rewardInviteBonus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      if (other.isSetIdBonus()) {
        this.idBonus = other.idBonus;
      }
      this.point = other.point;
    }

    public rewardInviteBonus_args deepCopy() {
      return new rewardInviteBonus_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      this.idBonus = null;
      setPointIsSet(false);
      this.point = 0;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public rewardInviteBonus_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public String getIdBonus() {
      return this.idBonus;
    }

    public rewardInviteBonus_args setIdBonus(String idBonus) {
      this.idBonus = idBonus;
      return this;
    }

    public void unsetIdBonus() {
      this.idBonus = null;
    }

    /** Returns true if field idBonus is set (has been assigned a value) and false otherwise */
    public boolean isSetIdBonus() {
      return this.idBonus != null;
    }

    public void setIdBonusIsSet(boolean value) {
      if (!value) {
        this.idBonus = null;
      }
    }

    public int getPoint() {
      return this.point;
    }

    public rewardInviteBonus_args setPoint(int point) {
      this.point = point;
      setPointIsSet(true);
      return this;
    }

    public void unsetPoint() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
    }

    /** Returns true if field point is set (has been assigned a value) and false otherwise */
    public boolean isSetPoint() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
    }

    public void setPointIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case ID_BONUS:
        if (value == null) {
          unsetIdBonus();
        } else {
          setIdBonus((String)value);
        }
        break;

      case POINT:
        if (value == null) {
          unsetPoint();
        } else {
          setPoint((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case ID_BONUS:
        return getIdBonus();

      case POINT:
        return getPoint();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case ID_BONUS:
        return isSetIdBonus();
      case POINT:
        return isSetPoint();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rewardInviteBonus_args)
        return this.equals((rewardInviteBonus_args)that);
      return false;
    }

    public boolean equals(rewardInviteBonus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_idBonus = true && this.isSetIdBonus();
      boolean that_present_idBonus = true && that.isSetIdBonus();
      if (this_present_idBonus || that_present_idBonus) {
        if (!(this_present_idBonus && that_present_idBonus))
          return false;
        if (!this.idBonus.equals(that.idBonus))
          return false;
      }

      boolean this_present_point = true;
      boolean that_present_point = true;
      if (this_present_point || that_present_point) {
        if (!(this_present_point && that_present_point))
          return false;
        if (this.point != that.point)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + ((isSetIdBonus()) ? 131071 : 524287);
      if (isSetIdBonus())
        hashCode = hashCode * 8191 + idBonus.hashCode();

      hashCode = hashCode * 8191 + point;

      return hashCode;
    }

    @Override
    public int compareTo(rewardInviteBonus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdBonus()).compareTo(other.isSetIdBonus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdBonus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idBonus, other.idBonus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPoint()).compareTo(other.isSetPoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, other.point);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rewardInviteBonus_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idBonus:");
      if (this.idBonus == null) {
        sb.append("null");
      } else {
        sb.append(this.idBonus);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("point:");
      sb.append(this.point);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      if (idBonus == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'idBonus' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'point' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rewardInviteBonus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rewardInviteBonus_argsStandardScheme getScheme() {
        return new rewardInviteBonus_argsStandardScheme();
      }
    }

    private static class rewardInviteBonus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rewardInviteBonus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rewardInviteBonus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID_BONUS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idBonus = iprot.readString();
                struct.setIdBonusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POINT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.point = iprot.readI32();
                struct.setPointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPoint()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'point' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rewardInviteBonus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        if (struct.idBonus != null) {
          oprot.writeFieldBegin(ID_BONUS_FIELD_DESC);
          oprot.writeString(struct.idBonus);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POINT_FIELD_DESC);
        oprot.writeI32(struct.point);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rewardInviteBonus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rewardInviteBonus_argsTupleScheme getScheme() {
        return new rewardInviteBonus_argsTupleScheme();
      }
    }

    private static class rewardInviteBonus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rewardInviteBonus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rewardInviteBonus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeString(struct.idBonus);
        oprot.writeI32(struct.point);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rewardInviteBonus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.idBonus = iprot.readString();
        struct.setIdBonusIsSet(true);
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rewardInviteBonus_result implements org.apache.thrift.TBase<rewardInviteBonus_result, rewardInviteBonus_result._Fields>, java.io.Serializable, Cloneable, Comparable<rewardInviteBonus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rewardInviteBonus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rewardInviteBonus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rewardInviteBonus_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rewardInviteBonus_result.class, metaDataMap);
    }

    public rewardInviteBonus_result() {
    }

    public rewardInviteBonus_result(
      boolean success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rewardInviteBonus_result(rewardInviteBonus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public rewardInviteBonus_result deepCopy() {
      return new rewardInviteBonus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public rewardInviteBonus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public rewardInviteBonus_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rewardInviteBonus_result)
        return this.equals((rewardInviteBonus_result)that);
      return false;
    }

    public boolean equals(rewardInviteBonus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rewardInviteBonus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rewardInviteBonus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rewardInviteBonus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rewardInviteBonus_resultStandardScheme getScheme() {
        return new rewardInviteBonus_resultStandardScheme();
      }
    }

    private static class rewardInviteBonus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rewardInviteBonus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rewardInviteBonus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rewardInviteBonus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rewardInviteBonus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rewardInviteBonus_resultTupleScheme getScheme() {
        return new rewardInviteBonus_resultTupleScheme();
      }
    }

    private static class rewardInviteBonus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rewardInviteBonus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rewardInviteBonus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rewardInviteBonus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateRewardInviteDetail_args implements org.apache.thrift.TBase<updateRewardInviteDetail_args, updateRewardInviteDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRewardInviteDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRewardInviteDetail_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JSON_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonUpdate", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateRewardInviteDetail_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateRewardInviteDetail_argsTupleSchemeFactory();

    public String accountID; // required
    public String jsonUpdate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      JSON_UPDATE((short)2, "jsonUpdate");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // JSON_UPDATE
            return JSON_UPDATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JSON_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("jsonUpdate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRewardInviteDetail_args.class, metaDataMap);
    }

    public updateRewardInviteDetail_args() {
    }

    public updateRewardInviteDetail_args(
      String accountID,
      String jsonUpdate)
    {
      this();
      this.accountID = accountID;
      this.jsonUpdate = jsonUpdate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRewardInviteDetail_args(updateRewardInviteDetail_args other) {
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      if (other.isSetJsonUpdate()) {
        this.jsonUpdate = other.jsonUpdate;
      }
    }

    public updateRewardInviteDetail_args deepCopy() {
      return new updateRewardInviteDetail_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      this.jsonUpdate = null;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public updateRewardInviteDetail_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public String getJsonUpdate() {
      return this.jsonUpdate;
    }

    public updateRewardInviteDetail_args setJsonUpdate(String jsonUpdate) {
      this.jsonUpdate = jsonUpdate;
      return this;
    }

    public void unsetJsonUpdate() {
      this.jsonUpdate = null;
    }

    /** Returns true if field jsonUpdate is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonUpdate() {
      return this.jsonUpdate != null;
    }

    public void setJsonUpdateIsSet(boolean value) {
      if (!value) {
        this.jsonUpdate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case JSON_UPDATE:
        if (value == null) {
          unsetJsonUpdate();
        } else {
          setJsonUpdate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case JSON_UPDATE:
        return getJsonUpdate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case JSON_UPDATE:
        return isSetJsonUpdate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRewardInviteDetail_args)
        return this.equals((updateRewardInviteDetail_args)that);
      return false;
    }

    public boolean equals(updateRewardInviteDetail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_jsonUpdate = true && this.isSetJsonUpdate();
      boolean that_present_jsonUpdate = true && that.isSetJsonUpdate();
      if (this_present_jsonUpdate || that_present_jsonUpdate) {
        if (!(this_present_jsonUpdate && that_present_jsonUpdate))
          return false;
        if (!this.jsonUpdate.equals(that.jsonUpdate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + ((isSetJsonUpdate()) ? 131071 : 524287);
      if (isSetJsonUpdate())
        hashCode = hashCode * 8191 + jsonUpdate.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateRewardInviteDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJsonUpdate()).compareTo(other.isSetJsonUpdate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonUpdate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonUpdate, other.jsonUpdate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRewardInviteDetail_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jsonUpdate:");
      if (this.jsonUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonUpdate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      if (jsonUpdate == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jsonUpdate' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRewardInviteDetail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateRewardInviteDetail_argsStandardScheme getScheme() {
        return new updateRewardInviteDetail_argsStandardScheme();
      }
    }

    private static class updateRewardInviteDetail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateRewardInviteDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRewardInviteDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JSON_UPDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonUpdate = iprot.readString();
                struct.setJsonUpdateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRewardInviteDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        if (struct.jsonUpdate != null) {
          oprot.writeFieldBegin(JSON_UPDATE_FIELD_DESC);
          oprot.writeString(struct.jsonUpdate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRewardInviteDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateRewardInviteDetail_argsTupleScheme getScheme() {
        return new updateRewardInviteDetail_argsTupleScheme();
      }
    }

    private static class updateRewardInviteDetail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateRewardInviteDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRewardInviteDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeString(struct.jsonUpdate);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRewardInviteDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.jsonUpdate = iprot.readString();
        struct.setJsonUpdateIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateRewardInviteDetail_result implements org.apache.thrift.TBase<updateRewardInviteDetail_result, updateRewardInviteDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRewardInviteDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRewardInviteDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateRewardInviteDetail_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateRewardInviteDetail_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRewardInviteDetail_result.class, metaDataMap);
    }

    public updateRewardInviteDetail_result() {
    }

    public updateRewardInviteDetail_result(
      boolean success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRewardInviteDetail_result(updateRewardInviteDetail_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public updateRewardInviteDetail_result deepCopy() {
      return new updateRewardInviteDetail_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateRewardInviteDetail_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public updateRewardInviteDetail_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRewardInviteDetail_result)
        return this.equals((updateRewardInviteDetail_result)that);
      return false;
    }

    public boolean equals(updateRewardInviteDetail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateRewardInviteDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRewardInviteDetail_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRewardInviteDetail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateRewardInviteDetail_resultStandardScheme getScheme() {
        return new updateRewardInviteDetail_resultStandardScheme();
      }
    }

    private static class updateRewardInviteDetail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateRewardInviteDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRewardInviteDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRewardInviteDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRewardInviteDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateRewardInviteDetail_resultTupleScheme getScheme() {
        return new updateRewardInviteDetail_resultTupleScheme();
      }
    }

    private static class updateRewardInviteDetail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateRewardInviteDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRewardInviteDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRewardInviteDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
