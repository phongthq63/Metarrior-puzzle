/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bamisu.log.sdkthrift.service.account;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2022-08-01")
public class AccountService {

  public interface Iface {

    public com.bamisu.log.sdkthrift.entities.TLoginResult loginGame(String token, int serverID, String clientIP, int os, String did) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public com.bamisu.log.sdkthrift.entities.TLinkAccountResult linkAccount(String accountID, long userID, int serverID, int socialNetwork, String socialNetworkToken) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public com.bamisu.log.sdkthrift.entities.TSwitchAccountResult switchAccount(int socialNetwork, String socialNetworkToken) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public void updateLevel(String accountID, int serverID, int level) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public void updateAvatar(String accountID, int serverID, String avatar, int frame) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public void updateDisplayName(String accountID, int serverID, String displayName) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public void joinServer(String accountID, int serverID, long userID, String displayName, String avatar, int avatarFrame, int level) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public void logIAP(String accountID, int serverId, long userID, int gate, String idAPI, String purchaseToken, String transactionId) throws org.apache.thrift.TException;

    public String getUniqueIdSocialNetwork(String accountID, int socialNetworkID) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public long getUserId(String socialNetworkKey, int socialNetworkID, String serverId) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public com.bamisu.log.sdkthrift.entities.TLoginResult usernameLoginGame(String username, String password, int serverID, String clientIP, int os, String did) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean updateUsernameAndPassword(String accountId, String username, String password, String email, String code) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean changePassword(String accountId, String password) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public String getUsername(String accountId) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public String getWalletByAccountId(String accountId) throws org.apache.thrift.TException;

    public long linkWallet(String accountId, String address, String username, String password, int zoneId) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public com.bamisu.log.sdkthrift.entities.TLinkedAccount getLinkedAccount(String accountId) throws org.apache.thrift.TException;

    public com.bamisu.log.sdkthrift.entities.TUserInfo getUserInfo(String walletAddress) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loginGame(String token, int serverID, String clientIP, int os, String did, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult> resultHandler) throws org.apache.thrift.TException;

    public void linkAccount(String accountID, long userID, int serverID, int socialNetwork, String socialNetworkToken, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkAccountResult> resultHandler) throws org.apache.thrift.TException;

    public void switchAccount(int socialNetwork, String socialNetworkToken, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TSwitchAccountResult> resultHandler) throws org.apache.thrift.TException;

    public void updateLevel(String accountID, int serverID, int level, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void updateAvatar(String accountID, int serverID, String avatar, int frame, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void updateDisplayName(String accountID, int serverID, String displayName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void joinServer(String accountID, int serverID, long userID, String displayName, String avatar, int avatarFrame, int level, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void logIAP(String accountID, int serverId, long userID, int gate, String idAPI, String purchaseToken, String transactionId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getUniqueIdSocialNetwork(String accountID, int socialNetworkID, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void getUserId(String socialNetworkKey, int socialNetworkID, String serverId, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws org.apache.thrift.TException;

    public void usernameLoginGame(String username, String password, int serverID, String clientIP, int os, String did, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult> resultHandler) throws org.apache.thrift.TException;

    public void updateUsernameAndPassword(String accountId, String username, String password, String email, String code, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void changePassword(String accountId, String password, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getUsername(String accountId, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void getWalletByAccountId(String accountId, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

    public void linkWallet(String accountId, String address, String username, String password, int zoneId, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws org.apache.thrift.TException;

    public void getLinkedAccount(String accountId, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkedAccount> resultHandler) throws org.apache.thrift.TException;

    public void getUserInfo(String walletAddress, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TUserInfo> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.bamisu.log.sdkthrift.entities.TLoginResult loginGame(String token, int serverID, String clientIP, int os, String did) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_loginGame(token, serverID, clientIP, os, did);
      return recv_loginGame();
    }

    public void send_loginGame(String token, int serverID, String clientIP, int os, String did) throws org.apache.thrift.TException
    {
      loginGame_args args = new loginGame_args();
      args.setToken(token);
      args.setServerID(serverID);
      args.setClientIP(clientIP);
      args.setOs(os);
      args.setDid(did);
      sendBase("loginGame", args);
    }

    public com.bamisu.log.sdkthrift.entities.TLoginResult recv_loginGame() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      loginGame_result result = new loginGame_result();
      receiveBase(result, "loginGame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginGame failed: unknown result");
    }

    public com.bamisu.log.sdkthrift.entities.TLinkAccountResult linkAccount(String accountID, long userID, int serverID, int socialNetwork, String socialNetworkToken) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_linkAccount(accountID, userID, serverID, socialNetwork, socialNetworkToken);
      return recv_linkAccount();
    }

    public void send_linkAccount(String accountID, long userID, int serverID, int socialNetwork, String socialNetworkToken) throws org.apache.thrift.TException
    {
      linkAccount_args args = new linkAccount_args();
      args.setAccountID(accountID);
      args.setUserID(userID);
      args.setServerID(serverID);
      args.setSocialNetwork(socialNetwork);
      args.setSocialNetworkToken(socialNetworkToken);
      sendBase("linkAccount", args);
    }

    public com.bamisu.log.sdkthrift.entities.TLinkAccountResult recv_linkAccount() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      linkAccount_result result = new linkAccount_result();
      receiveBase(result, "linkAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "linkAccount failed: unknown result");
    }

    public com.bamisu.log.sdkthrift.entities.TSwitchAccountResult switchAccount(int socialNetwork, String socialNetworkToken) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_switchAccount(socialNetwork, socialNetworkToken);
      return recv_switchAccount();
    }

    public void send_switchAccount(int socialNetwork, String socialNetworkToken) throws org.apache.thrift.TException
    {
      switchAccount_args args = new switchAccount_args();
      args.setSocialNetwork(socialNetwork);
      args.setSocialNetworkToken(socialNetworkToken);
      sendBase("switchAccount", args);
    }

    public com.bamisu.log.sdkthrift.entities.TSwitchAccountResult recv_switchAccount() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      switchAccount_result result = new switchAccount_result();
      receiveBase(result, "switchAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "switchAccount failed: unknown result");
    }

    public void updateLevel(String accountID, int serverID, int level) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_updateLevel(accountID, serverID, level);
      recv_updateLevel();
    }

    public void send_updateLevel(String accountID, int serverID, int level) throws org.apache.thrift.TException
    {
      updateLevel_args args = new updateLevel_args();
      args.setAccountID(accountID);
      args.setServerID(serverID);
      args.setLevel(level);
      sendBase("updateLevel", args);
    }

    public void recv_updateLevel() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      updateLevel_result result = new updateLevel_result();
      receiveBase(result, "updateLevel");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateAvatar(String accountID, int serverID, String avatar, int frame) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_updateAvatar(accountID, serverID, avatar, frame);
      recv_updateAvatar();
    }

    public void send_updateAvatar(String accountID, int serverID, String avatar, int frame) throws org.apache.thrift.TException
    {
      updateAvatar_args args = new updateAvatar_args();
      args.setAccountID(accountID);
      args.setServerID(serverID);
      args.setAvatar(avatar);
      args.setFrame(frame);
      sendBase("updateAvatar", args);
    }

    public void recv_updateAvatar() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      updateAvatar_result result = new updateAvatar_result();
      receiveBase(result, "updateAvatar");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateDisplayName(String accountID, int serverID, String displayName) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_updateDisplayName(accountID, serverID, displayName);
      recv_updateDisplayName();
    }

    public void send_updateDisplayName(String accountID, int serverID, String displayName) throws org.apache.thrift.TException
    {
      updateDisplayName_args args = new updateDisplayName_args();
      args.setAccountID(accountID);
      args.setServerID(serverID);
      args.setDisplayName(displayName);
      sendBase("updateDisplayName", args);
    }

    public void recv_updateDisplayName() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      updateDisplayName_result result = new updateDisplayName_result();
      receiveBase(result, "updateDisplayName");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void joinServer(String accountID, int serverID, long userID, String displayName, String avatar, int avatarFrame, int level) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_joinServer(accountID, serverID, userID, displayName, avatar, avatarFrame, level);
      recv_joinServer();
    }

    public void send_joinServer(String accountID, int serverID, long userID, String displayName, String avatar, int avatarFrame, int level) throws org.apache.thrift.TException
    {
      joinServer_args args = new joinServer_args();
      args.setAccountID(accountID);
      args.setServerID(serverID);
      args.setUserID(userID);
      args.setDisplayName(displayName);
      args.setAvatar(avatar);
      args.setAvatarFrame(avatarFrame);
      args.setLevel(level);
      sendBase("joinServer", args);
    }

    public void recv_joinServer() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      joinServer_result result = new joinServer_result();
      receiveBase(result, "joinServer");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void logIAP(String accountID, int serverId, long userID, int gate, String idAPI, String purchaseToken, String transactionId) throws org.apache.thrift.TException
    {
      send_logIAP(accountID, serverId, userID, gate, idAPI, purchaseToken, transactionId);
      recv_logIAP();
    }

    public void send_logIAP(String accountID, int serverId, long userID, int gate, String idAPI, String purchaseToken, String transactionId) throws org.apache.thrift.TException
    {
      logIAP_args args = new logIAP_args();
      args.setAccountID(accountID);
      args.setServerId(serverId);
      args.setUserID(userID);
      args.setGate(gate);
      args.setIdAPI(idAPI);
      args.setPurchaseToken(purchaseToken);
      args.setTransactionId(transactionId);
      sendBase("logIAP", args);
    }

    public void recv_logIAP() throws org.apache.thrift.TException
    {
      logIAP_result result = new logIAP_result();
      receiveBase(result, "logIAP");
      return;
    }

    public String getUniqueIdSocialNetwork(String accountID, int socialNetworkID) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_getUniqueIdSocialNetwork(accountID, socialNetworkID);
      return recv_getUniqueIdSocialNetwork();
    }

    public void send_getUniqueIdSocialNetwork(String accountID, int socialNetworkID) throws org.apache.thrift.TException
    {
      getUniqueIdSocialNetwork_args args = new getUniqueIdSocialNetwork_args();
      args.setAccountID(accountID);
      args.setSocialNetworkID(socialNetworkID);
      sendBase("getUniqueIdSocialNetwork", args);
    }

    public String recv_getUniqueIdSocialNetwork() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      getUniqueIdSocialNetwork_result result = new getUniqueIdSocialNetwork_result();
      receiveBase(result, "getUniqueIdSocialNetwork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUniqueIdSocialNetwork failed: unknown result");
    }

    public long getUserId(String socialNetworkKey, int socialNetworkID, String serverId) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_getUserId(socialNetworkKey, socialNetworkID, serverId);
      return recv_getUserId();
    }

    public void send_getUserId(String socialNetworkKey, int socialNetworkID, String serverId) throws org.apache.thrift.TException
    {
      getUserId_args args = new getUserId_args();
      args.setSocialNetworkKey(socialNetworkKey);
      args.setSocialNetworkID(socialNetworkID);
      args.setServerId(serverId);
      sendBase("getUserId", args);
    }

    public long recv_getUserId() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      getUserId_result result = new getUserId_result();
      receiveBase(result, "getUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserId failed: unknown result");
    }

    public com.bamisu.log.sdkthrift.entities.TLoginResult usernameLoginGame(String username, String password, int serverID, String clientIP, int os, String did) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_usernameLoginGame(username, password, serverID, clientIP, os, did);
      return recv_usernameLoginGame();
    }

    public void send_usernameLoginGame(String username, String password, int serverID, String clientIP, int os, String did) throws org.apache.thrift.TException
    {
      usernameLoginGame_args args = new usernameLoginGame_args();
      args.setUsername(username);
      args.setPassword(password);
      args.setServerID(serverID);
      args.setClientIP(clientIP);
      args.setOs(os);
      args.setDid(did);
      sendBase("usernameLoginGame", args);
    }

    public com.bamisu.log.sdkthrift.entities.TLoginResult recv_usernameLoginGame() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      usernameLoginGame_result result = new usernameLoginGame_result();
      receiveBase(result, "usernameLoginGame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "usernameLoginGame failed: unknown result");
    }

    public boolean updateUsernameAndPassword(String accountId, String username, String password, String email, String code) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_updateUsernameAndPassword(accountId, username, password, email, code);
      return recv_updateUsernameAndPassword();
    }

    public void send_updateUsernameAndPassword(String accountId, String username, String password, String email, String code) throws org.apache.thrift.TException
    {
      updateUsernameAndPassword_args args = new updateUsernameAndPassword_args();
      args.setAccountId(accountId);
      args.setUsername(username);
      args.setPassword(password);
      args.setEmail(email);
      args.setCode(code);
      sendBase("updateUsernameAndPassword", args);
    }

    public boolean recv_updateUsernameAndPassword() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      updateUsernameAndPassword_result result = new updateUsernameAndPassword_result();
      receiveBase(result, "updateUsernameAndPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUsernameAndPassword failed: unknown result");
    }

    public boolean changePassword(String accountId, String password) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_changePassword(accountId, password);
      return recv_changePassword();
    }

    public void send_changePassword(String accountId, String password) throws org.apache.thrift.TException
    {
      changePassword_args args = new changePassword_args();
      args.setAccountId(accountId);
      args.setPassword(password);
      sendBase("changePassword", args);
    }

    public boolean recv_changePassword() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      changePassword_result result = new changePassword_result();
      receiveBase(result, "changePassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changePassword failed: unknown result");
    }

    public String getUsername(String accountId) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_getUsername(accountId);
      return recv_getUsername();
    }

    public void send_getUsername(String accountId) throws org.apache.thrift.TException
    {
      getUsername_args args = new getUsername_args();
      args.setAccountId(accountId);
      sendBase("getUsername", args);
    }

    public String recv_getUsername() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      getUsername_result result = new getUsername_result();
      receiveBase(result, "getUsername");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUsername failed: unknown result");
    }

    public String getWalletByAccountId(String accountId) throws org.apache.thrift.TException
    {
      send_getWalletByAccountId(accountId);
      return recv_getWalletByAccountId();
    }

    public void send_getWalletByAccountId(String accountId) throws org.apache.thrift.TException
    {
      getWalletByAccountId_args args = new getWalletByAccountId_args();
      args.setAccountId(accountId);
      sendBase("getWalletByAccountId", args);
    }

    public String recv_getWalletByAccountId() throws org.apache.thrift.TException
    {
      getWalletByAccountId_result result = new getWalletByAccountId_result();
      receiveBase(result, "getWalletByAccountId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWalletByAccountId failed: unknown result");
    }

    public long linkWallet(String accountId, String address, String username, String password, int zoneId) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_linkWallet(accountId, address, username, password, zoneId);
      return recv_linkWallet();
    }

    public void send_linkWallet(String accountId, String address, String username, String password, int zoneId) throws org.apache.thrift.TException
    {
      linkWallet_args args = new linkWallet_args();
      args.setAccountId(accountId);
      args.setAddress(address);
      args.setUsername(username);
      args.setPassword(password);
      args.setZoneId(zoneId);
      sendBase("linkWallet", args);
    }

    public long recv_linkWallet() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      linkWallet_result result = new linkWallet_result();
      receiveBase(result, "linkWallet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "linkWallet failed: unknown result");
    }

    public com.bamisu.log.sdkthrift.entities.TLinkedAccount getLinkedAccount(String accountId) throws org.apache.thrift.TException
    {
      send_getLinkedAccount(accountId);
      return recv_getLinkedAccount();
    }

    public void send_getLinkedAccount(String accountId) throws org.apache.thrift.TException
    {
      getLinkedAccount_args args = new getLinkedAccount_args();
      args.setAccountId(accountId);
      sendBase("getLinkedAccount", args);
    }

    public com.bamisu.log.sdkthrift.entities.TLinkedAccount recv_getLinkedAccount() throws org.apache.thrift.TException
    {
      getLinkedAccount_result result = new getLinkedAccount_result();
      receiveBase(result, "getLinkedAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLinkedAccount failed: unknown result");
    }

    public com.bamisu.log.sdkthrift.entities.TUserInfo getUserInfo(String walletAddress) throws org.apache.thrift.TException
    {
      send_getUserInfo(walletAddress);
      return recv_getUserInfo();
    }

    public void send_getUserInfo(String walletAddress) throws org.apache.thrift.TException
    {
      getUserInfo_args args = new getUserInfo_args();
      args.setWalletAddress(walletAddress);
      sendBase("getUserInfo", args);
    }

    public com.bamisu.log.sdkthrift.entities.TUserInfo recv_getUserInfo() throws org.apache.thrift.TException
    {
      getUserInfo_result result = new getUserInfo_result();
      receiveBase(result, "getUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loginGame(String token, int serverID, String clientIP, int os, String did, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginGame_call method_call = new loginGame_call(token, serverID, clientIP, os, did, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginGame_call extends org.apache.thrift.async.TAsyncMethodCall<com.bamisu.log.sdkthrift.entities.TLoginResult> {
      private String token;
      private int serverID;
      private String clientIP;
      private int os;
      private String did;
      public loginGame_call(String token, int serverID, String clientIP, int os, String did, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.serverID = serverID;
        this.clientIP = clientIP;
        this.os = os;
        this.did = did;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginGame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginGame_args args = new loginGame_args();
        args.setToken(token);
        args.setServerID(serverID);
        args.setClientIP(clientIP);
        args.setOs(os);
        args.setDid(did);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.bamisu.log.sdkthrift.entities.TLoginResult getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginGame();
      }
    }

    public void linkAccount(String accountID, long userID, int serverID, int socialNetwork, String socialNetworkToken, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkAccountResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      linkAccount_call method_call = new linkAccount_call(accountID, userID, serverID, socialNetwork, socialNetworkToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class linkAccount_call extends org.apache.thrift.async.TAsyncMethodCall<com.bamisu.log.sdkthrift.entities.TLinkAccountResult> {
      private String accountID;
      private long userID;
      private int serverID;
      private int socialNetwork;
      private String socialNetworkToken;
      public linkAccount_call(String accountID, long userID, int serverID, int socialNetwork, String socialNetworkToken, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkAccountResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.userID = userID;
        this.serverID = serverID;
        this.socialNetwork = socialNetwork;
        this.socialNetworkToken = socialNetworkToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("linkAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        linkAccount_args args = new linkAccount_args();
        args.setAccountID(accountID);
        args.setUserID(userID);
        args.setServerID(serverID);
        args.setSocialNetwork(socialNetwork);
        args.setSocialNetworkToken(socialNetworkToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.bamisu.log.sdkthrift.entities.TLinkAccountResult getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_linkAccount();
      }
    }

    public void switchAccount(int socialNetwork, String socialNetworkToken, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TSwitchAccountResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      switchAccount_call method_call = new switchAccount_call(socialNetwork, socialNetworkToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class switchAccount_call extends org.apache.thrift.async.TAsyncMethodCall<com.bamisu.log.sdkthrift.entities.TSwitchAccountResult> {
      private int socialNetwork;
      private String socialNetworkToken;
      public switchAccount_call(int socialNetwork, String socialNetworkToken, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TSwitchAccountResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.socialNetwork = socialNetwork;
        this.socialNetworkToken = socialNetworkToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("switchAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        switchAccount_args args = new switchAccount_args();
        args.setSocialNetwork(socialNetwork);
        args.setSocialNetworkToken(socialNetworkToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.bamisu.log.sdkthrift.entities.TSwitchAccountResult getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_switchAccount();
      }
    }

    public void updateLevel(String accountID, int serverID, int level, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLevel_call method_call = new updateLevel_call(accountID, serverID, level, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLevel_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String accountID;
      private int serverID;
      private int level;
      public updateLevel_call(String accountID, int serverID, int level, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.serverID = serverID;
        this.level = level;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLevel_args args = new updateLevel_args();
        args.setAccountID(accountID);
        args.setServerID(serverID);
        args.setLevel(level);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void updateAvatar(String accountID, int serverID, String avatar, int frame, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAvatar_call method_call = new updateAvatar_call(accountID, serverID, avatar, frame, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAvatar_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String accountID;
      private int serverID;
      private String avatar;
      private int frame;
      public updateAvatar_call(String accountID, int serverID, String avatar, int frame, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.serverID = serverID;
        this.avatar = avatar;
        this.frame = frame;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAvatar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAvatar_args args = new updateAvatar_args();
        args.setAccountID(accountID);
        args.setServerID(serverID);
        args.setAvatar(avatar);
        args.setFrame(frame);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void updateDisplayName(String accountID, int serverID, String displayName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDisplayName_call method_call = new updateDisplayName_call(accountID, serverID, displayName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDisplayName_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String accountID;
      private int serverID;
      private String displayName;
      public updateDisplayName_call(String accountID, int serverID, String displayName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.serverID = serverID;
        this.displayName = displayName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDisplayName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDisplayName_args args = new updateDisplayName_args();
        args.setAccountID(accountID);
        args.setServerID(serverID);
        args.setDisplayName(displayName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void joinServer(String accountID, int serverID, long userID, String displayName, String avatar, int avatarFrame, int level, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      joinServer_call method_call = new joinServer_call(accountID, serverID, userID, displayName, avatar, avatarFrame, level, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class joinServer_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String accountID;
      private int serverID;
      private long userID;
      private String displayName;
      private String avatar;
      private int avatarFrame;
      private int level;
      public joinServer_call(String accountID, int serverID, long userID, String displayName, String avatar, int avatarFrame, int level, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.serverID = serverID;
        this.userID = userID;
        this.displayName = displayName;
        this.avatar = avatar;
        this.avatarFrame = avatarFrame;
        this.level = level;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("joinServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        joinServer_args args = new joinServer_args();
        args.setAccountID(accountID);
        args.setServerID(serverID);
        args.setUserID(userID);
        args.setDisplayName(displayName);
        args.setAvatar(avatar);
        args.setAvatarFrame(avatarFrame);
        args.setLevel(level);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void logIAP(String accountID, int serverId, long userID, int gate, String idAPI, String purchaseToken, String transactionId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logIAP_call method_call = new logIAP_call(accountID, serverId, userID, gate, idAPI, purchaseToken, transactionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logIAP_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String accountID;
      private int serverId;
      private long userID;
      private int gate;
      private String idAPI;
      private String purchaseToken;
      private String transactionId;
      public logIAP_call(String accountID, int serverId, long userID, int gate, String idAPI, String purchaseToken, String transactionId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.serverId = serverId;
        this.userID = userID;
        this.gate = gate;
        this.idAPI = idAPI;
        this.purchaseToken = purchaseToken;
        this.transactionId = transactionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logIAP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logIAP_args args = new logIAP_args();
        args.setAccountID(accountID);
        args.setServerId(serverId);
        args.setUserID(userID);
        args.setGate(gate);
        args.setIdAPI(idAPI);
        args.setPurchaseToken(purchaseToken);
        args.setTransactionId(transactionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getUniqueIdSocialNetwork(String accountID, int socialNetworkID, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUniqueIdSocialNetwork_call method_call = new getUniqueIdSocialNetwork_call(accountID, socialNetworkID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUniqueIdSocialNetwork_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String accountID;
      private int socialNetworkID;
      public getUniqueIdSocialNetwork_call(String accountID, int socialNetworkID, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.socialNetworkID = socialNetworkID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUniqueIdSocialNetwork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUniqueIdSocialNetwork_args args = new getUniqueIdSocialNetwork_args();
        args.setAccountID(accountID);
        args.setSocialNetworkID(socialNetworkID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUniqueIdSocialNetwork();
      }
    }

    public void getUserId(String socialNetworkKey, int socialNetworkID, String serverId, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserId_call method_call = new getUserId_call(socialNetworkKey, socialNetworkID, serverId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserId_call extends org.apache.thrift.async.TAsyncMethodCall<Long> {
      private String socialNetworkKey;
      private int socialNetworkID;
      private String serverId;
      public getUserId_call(String socialNetworkKey, int socialNetworkID, String serverId, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.socialNetworkKey = socialNetworkKey;
        this.socialNetworkID = socialNetworkID;
        this.serverId = serverId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserId_args args = new getUserId_args();
        args.setSocialNetworkKey(socialNetworkKey);
        args.setSocialNetworkID(socialNetworkID);
        args.setServerId(serverId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Long getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserId();
      }
    }

    public void usernameLoginGame(String username, String password, int serverID, String clientIP, int os, String did, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      usernameLoginGame_call method_call = new usernameLoginGame_call(username, password, serverID, clientIP, os, did, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class usernameLoginGame_call extends org.apache.thrift.async.TAsyncMethodCall<com.bamisu.log.sdkthrift.entities.TLoginResult> {
      private String username;
      private String password;
      private int serverID;
      private String clientIP;
      private int os;
      private String did;
      public usernameLoginGame_call(String username, String password, int serverID, String clientIP, int os, String did, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
        this.serverID = serverID;
        this.clientIP = clientIP;
        this.os = os;
        this.did = did;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("usernameLoginGame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        usernameLoginGame_args args = new usernameLoginGame_args();
        args.setUsername(username);
        args.setPassword(password);
        args.setServerID(serverID);
        args.setClientIP(clientIP);
        args.setOs(os);
        args.setDid(did);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.bamisu.log.sdkthrift.entities.TLoginResult getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_usernameLoginGame();
      }
    }

    public void updateUsernameAndPassword(String accountId, String username, String password, String email, String code, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUsernameAndPassword_call method_call = new updateUsernameAndPassword_call(accountId, username, password, email, code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUsernameAndPassword_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String accountId;
      private String username;
      private String password;
      private String email;
      private String code;
      public updateUsernameAndPassword_call(String accountId, String username, String password, String email, String code, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountId = accountId;
        this.username = username;
        this.password = password;
        this.email = email;
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUsernameAndPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUsernameAndPassword_args args = new updateUsernameAndPassword_args();
        args.setAccountId(accountId);
        args.setUsername(username);
        args.setPassword(password);
        args.setEmail(email);
        args.setCode(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUsernameAndPassword();
      }
    }

    public void changePassword(String accountId, String password, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changePassword_call method_call = new changePassword_call(accountId, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changePassword_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String accountId;
      private String password;
      public changePassword_call(String accountId, String password, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountId = accountId;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changePassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changePassword_args args = new changePassword_args();
        args.setAccountId(accountId);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changePassword();
      }
    }

    public void getUsername(String accountId, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUsername_call method_call = new getUsername_call(accountId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUsername_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String accountId;
      public getUsername_call(String accountId, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountId = accountId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUsername", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUsername_args args = new getUsername_args();
        args.setAccountId(accountId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUsername();
      }
    }

    public void getWalletByAccountId(String accountId, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWalletByAccountId_call method_call = new getWalletByAccountId_call(accountId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWalletByAccountId_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String accountId;
      public getWalletByAccountId_call(String accountId, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountId = accountId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletByAccountId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWalletByAccountId_args args = new getWalletByAccountId_args();
        args.setAccountId(accountId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWalletByAccountId();
      }
    }

    public void linkWallet(String accountId, String address, String username, String password, int zoneId, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      linkWallet_call method_call = new linkWallet_call(accountId, address, username, password, zoneId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class linkWallet_call extends org.apache.thrift.async.TAsyncMethodCall<Long> {
      private String accountId;
      private String address;
      private String username;
      private String password;
      private int zoneId;
      public linkWallet_call(String accountId, String address, String username, String password, int zoneId, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountId = accountId;
        this.address = address;
        this.username = username;
        this.password = password;
        this.zoneId = zoneId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("linkWallet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        linkWallet_args args = new linkWallet_args();
        args.setAccountId(accountId);
        args.setAddress(address);
        args.setUsername(username);
        args.setPassword(password);
        args.setZoneId(zoneId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Long getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_linkWallet();
      }
    }

    public void getLinkedAccount(String accountId, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkedAccount> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLinkedAccount_call method_call = new getLinkedAccount_call(accountId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLinkedAccount_call extends org.apache.thrift.async.TAsyncMethodCall<com.bamisu.log.sdkthrift.entities.TLinkedAccount> {
      private String accountId;
      public getLinkedAccount_call(String accountId, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkedAccount> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountId = accountId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLinkedAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLinkedAccount_args args = new getLinkedAccount_args();
        args.setAccountId(accountId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.bamisu.log.sdkthrift.entities.TLinkedAccount getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLinkedAccount();
      }
    }

    public void getUserInfo(String walletAddress, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TUserInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfo_call method_call = new getUserInfo_call(walletAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.bamisu.log.sdkthrift.entities.TUserInfo> {
      private String walletAddress;
      public getUserInfo_call(String walletAddress, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TUserInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletAddress = walletAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfo_args args = new getUserInfo_args();
        args.setWalletAddress(walletAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.bamisu.log.sdkthrift.entities.TUserInfo getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loginGame", new loginGame());
      processMap.put("linkAccount", new linkAccount());
      processMap.put("switchAccount", new switchAccount());
      processMap.put("updateLevel", new updateLevel());
      processMap.put("updateAvatar", new updateAvatar());
      processMap.put("updateDisplayName", new updateDisplayName());
      processMap.put("joinServer", new joinServer());
      processMap.put("logIAP", new logIAP());
      processMap.put("getUniqueIdSocialNetwork", new getUniqueIdSocialNetwork());
      processMap.put("getUserId", new getUserId());
      processMap.put("usernameLoginGame", new usernameLoginGame());
      processMap.put("updateUsernameAndPassword", new updateUsernameAndPassword());
      processMap.put("changePassword", new changePassword());
      processMap.put("getUsername", new getUsername());
      processMap.put("getWalletByAccountId", new getWalletByAccountId());
      processMap.put("linkWallet", new linkWallet());
      processMap.put("getLinkedAccount", new getLinkedAccount());
      processMap.put("getUserInfo", new getUserInfo());
      return processMap;
    }

    public static class loginGame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginGame_args> {
      public loginGame() {
        super("loginGame");
      }

      public loginGame_args getEmptyArgsInstance() {
        return new loginGame_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public loginGame_result getResult(I iface, loginGame_args args) throws org.apache.thrift.TException {
        loginGame_result result = new loginGame_result();
        try {
          result.success = iface.loginGame(args.token, args.serverID, args.clientIP, args.os, args.did);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class linkAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, linkAccount_args> {
      public linkAccount() {
        super("linkAccount");
      }

      public linkAccount_args getEmptyArgsInstance() {
        return new linkAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public linkAccount_result getResult(I iface, linkAccount_args args) throws org.apache.thrift.TException {
        linkAccount_result result = new linkAccount_result();
        try {
          result.success = iface.linkAccount(args.accountID, args.userID, args.serverID, args.socialNetwork, args.socialNetworkToken);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class switchAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, switchAccount_args> {
      public switchAccount() {
        super("switchAccount");
      }

      public switchAccount_args getEmptyArgsInstance() {
        return new switchAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public switchAccount_result getResult(I iface, switchAccount_args args) throws org.apache.thrift.TException {
        switchAccount_result result = new switchAccount_result();
        try {
          result.success = iface.switchAccount(args.socialNetwork, args.socialNetworkToken);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLevel_args> {
      public updateLevel() {
        super("updateLevel");
      }

      public updateLevel_args getEmptyArgsInstance() {
        return new updateLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateLevel_result getResult(I iface, updateLevel_args args) throws org.apache.thrift.TException {
        updateLevel_result result = new updateLevel_result();
        try {
          iface.updateLevel(args.accountID, args.serverID, args.level);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateAvatar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAvatar_args> {
      public updateAvatar() {
        super("updateAvatar");
      }

      public updateAvatar_args getEmptyArgsInstance() {
        return new updateAvatar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateAvatar_result getResult(I iface, updateAvatar_args args) throws org.apache.thrift.TException {
        updateAvatar_result result = new updateAvatar_result();
        try {
          iface.updateAvatar(args.accountID, args.serverID, args.avatar, args.frame);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateDisplayName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDisplayName_args> {
      public updateDisplayName() {
        super("updateDisplayName");
      }

      public updateDisplayName_args getEmptyArgsInstance() {
        return new updateDisplayName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateDisplayName_result getResult(I iface, updateDisplayName_args args) throws org.apache.thrift.TException {
        updateDisplayName_result result = new updateDisplayName_result();
        try {
          iface.updateDisplayName(args.accountID, args.serverID, args.displayName);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class joinServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, joinServer_args> {
      public joinServer() {
        super("joinServer");
      }

      public joinServer_args getEmptyArgsInstance() {
        return new joinServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public joinServer_result getResult(I iface, joinServer_args args) throws org.apache.thrift.TException {
        joinServer_result result = new joinServer_result();
        try {
          iface.joinServer(args.accountID, args.serverID, args.userID, args.displayName, args.avatar, args.avatarFrame, args.level);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class logIAP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logIAP_args> {
      public logIAP() {
        super("logIAP");
      }

      public logIAP_args getEmptyArgsInstance() {
        return new logIAP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public logIAP_result getResult(I iface, logIAP_args args) throws org.apache.thrift.TException {
        logIAP_result result = new logIAP_result();
        iface.logIAP(args.accountID, args.serverId, args.userID, args.gate, args.idAPI, args.purchaseToken, args.transactionId);
        return result;
      }
    }

    public static class getUniqueIdSocialNetwork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUniqueIdSocialNetwork_args> {
      public getUniqueIdSocialNetwork() {
        super("getUniqueIdSocialNetwork");
      }

      public getUniqueIdSocialNetwork_args getEmptyArgsInstance() {
        return new getUniqueIdSocialNetwork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getUniqueIdSocialNetwork_result getResult(I iface, getUniqueIdSocialNetwork_args args) throws org.apache.thrift.TException {
        getUniqueIdSocialNetwork_result result = new getUniqueIdSocialNetwork_result();
        try {
          result.success = iface.getUniqueIdSocialNetwork(args.accountID, args.socialNetworkID);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserId_args> {
      public getUserId() {
        super("getUserId");
      }

      public getUserId_args getEmptyArgsInstance() {
        return new getUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getUserId_result getResult(I iface, getUserId_args args) throws org.apache.thrift.TException {
        getUserId_result result = new getUserId_result();
        try {
          result.success = iface.getUserId(args.socialNetworkKey, args.socialNetworkID, args.serverId);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class usernameLoginGame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, usernameLoginGame_args> {
      public usernameLoginGame() {
        super("usernameLoginGame");
      }

      public usernameLoginGame_args getEmptyArgsInstance() {
        return new usernameLoginGame_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public usernameLoginGame_result getResult(I iface, usernameLoginGame_args args) throws org.apache.thrift.TException {
        usernameLoginGame_result result = new usernameLoginGame_result();
        try {
          result.success = iface.usernameLoginGame(args.username, args.password, args.serverID, args.clientIP, args.os, args.did);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateUsernameAndPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUsernameAndPassword_args> {
      public updateUsernameAndPassword() {
        super("updateUsernameAndPassword");
      }

      public updateUsernameAndPassword_args getEmptyArgsInstance() {
        return new updateUsernameAndPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateUsernameAndPassword_result getResult(I iface, updateUsernameAndPassword_args args) throws org.apache.thrift.TException {
        updateUsernameAndPassword_result result = new updateUsernameAndPassword_result();
        try {
          result.success = iface.updateUsernameAndPassword(args.accountId, args.username, args.password, args.email, args.code);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class changePassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changePassword_args> {
      public changePassword() {
        super("changePassword");
      }

      public changePassword_args getEmptyArgsInstance() {
        return new changePassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public changePassword_result getResult(I iface, changePassword_args args) throws org.apache.thrift.TException {
        changePassword_result result = new changePassword_result();
        try {
          result.success = iface.changePassword(args.accountId, args.password);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getUsername<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUsername_args> {
      public getUsername() {
        super("getUsername");
      }

      public getUsername_args getEmptyArgsInstance() {
        return new getUsername_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getUsername_result getResult(I iface, getUsername_args args) throws org.apache.thrift.TException {
        getUsername_result result = new getUsername_result();
        try {
          result.success = iface.getUsername(args.accountId);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getWalletByAccountId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWalletByAccountId_args> {
      public getWalletByAccountId() {
        super("getWalletByAccountId");
      }

      public getWalletByAccountId_args getEmptyArgsInstance() {
        return new getWalletByAccountId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getWalletByAccountId_result getResult(I iface, getWalletByAccountId_args args) throws org.apache.thrift.TException {
        getWalletByAccountId_result result = new getWalletByAccountId_result();
        result.success = iface.getWalletByAccountId(args.accountId);
        return result;
      }
    }

    public static class linkWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, linkWallet_args> {
      public linkWallet() {
        super("linkWallet");
      }

      public linkWallet_args getEmptyArgsInstance() {
        return new linkWallet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public linkWallet_result getResult(I iface, linkWallet_args args) throws org.apache.thrift.TException {
        linkWallet_result result = new linkWallet_result();
        try {
          result.success = iface.linkWallet(args.accountId, args.address, args.username, args.password, args.zoneId);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getLinkedAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLinkedAccount_args> {
      public getLinkedAccount() {
        super("getLinkedAccount");
      }

      public getLinkedAccount_args getEmptyArgsInstance() {
        return new getLinkedAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getLinkedAccount_result getResult(I iface, getLinkedAccount_args args) throws org.apache.thrift.TException {
        getLinkedAccount_result result = new getLinkedAccount_result();
        result.success = iface.getLinkedAccount(args.accountId);
        return result;
      }
    }

    public static class getUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfo_args> {
      public getUserInfo() {
        super("getUserInfo");
      }

      public getUserInfo_args getEmptyArgsInstance() {
        return new getUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getUserInfo_result getResult(I iface, getUserInfo_args args) throws org.apache.thrift.TException {
        getUserInfo_result result = new getUserInfo_result();
        result.success = iface.getUserInfo(args.walletAddress);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("loginGame", new loginGame());
      processMap.put("linkAccount", new linkAccount());
      processMap.put("switchAccount", new switchAccount());
      processMap.put("updateLevel", new updateLevel());
      processMap.put("updateAvatar", new updateAvatar());
      processMap.put("updateDisplayName", new updateDisplayName());
      processMap.put("joinServer", new joinServer());
      processMap.put("logIAP", new logIAP());
      processMap.put("getUniqueIdSocialNetwork", new getUniqueIdSocialNetwork());
      processMap.put("getUserId", new getUserId());
      processMap.put("usernameLoginGame", new usernameLoginGame());
      processMap.put("updateUsernameAndPassword", new updateUsernameAndPassword());
      processMap.put("changePassword", new changePassword());
      processMap.put("getUsername", new getUsername());
      processMap.put("getWalletByAccountId", new getWalletByAccountId());
      processMap.put("linkWallet", new linkWallet());
      processMap.put("getLinkedAccount", new getLinkedAccount());
      processMap.put("getUserInfo", new getUserInfo());
      return processMap;
    }

    public static class loginGame<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginGame_args, com.bamisu.log.sdkthrift.entities.TLoginResult> {
      public loginGame() {
        super("loginGame");
      }

      public loginGame_args getEmptyArgsInstance() {
        return new loginGame_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult>() { 
          public void onComplete(com.bamisu.log.sdkthrift.entities.TLoginResult o) {
            loginGame_result result = new loginGame_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            loginGame_result result = new loginGame_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginGame_args args, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult> resultHandler) throws org.apache.thrift.TException {
        iface.loginGame(args.token, args.serverID, args.clientIP, args.os, args.did,resultHandler);
      }
    }

    public static class linkAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, linkAccount_args, com.bamisu.log.sdkthrift.entities.TLinkAccountResult> {
      public linkAccount() {
        super("linkAccount");
      }

      public linkAccount_args getEmptyArgsInstance() {
        return new linkAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkAccountResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkAccountResult>() { 
          public void onComplete(com.bamisu.log.sdkthrift.entities.TLinkAccountResult o) {
            linkAccount_result result = new linkAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            linkAccount_result result = new linkAccount_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, linkAccount_args args, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkAccountResult> resultHandler) throws org.apache.thrift.TException {
        iface.linkAccount(args.accountID, args.userID, args.serverID, args.socialNetwork, args.socialNetworkToken,resultHandler);
      }
    }

    public static class switchAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, switchAccount_args, com.bamisu.log.sdkthrift.entities.TSwitchAccountResult> {
      public switchAccount() {
        super("switchAccount");
      }

      public switchAccount_args getEmptyArgsInstance() {
        return new switchAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TSwitchAccountResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TSwitchAccountResult>() { 
          public void onComplete(com.bamisu.log.sdkthrift.entities.TSwitchAccountResult o) {
            switchAccount_result result = new switchAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            switchAccount_result result = new switchAccount_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, switchAccount_args args, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TSwitchAccountResult> resultHandler) throws org.apache.thrift.TException {
        iface.switchAccount(args.socialNetwork, args.socialNetworkToken,resultHandler);
      }
    }

    public static class updateLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateLevel_args, Void> {
      public updateLevel() {
        super("updateLevel");
      }

      public updateLevel_args getEmptyArgsInstance() {
        return new updateLevel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateLevel_result result = new updateLevel_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateLevel_result result = new updateLevel_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateLevel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateLevel(args.accountID, args.serverID, args.level,resultHandler);
      }
    }

    public static class updateAvatar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAvatar_args, Void> {
      public updateAvatar() {
        super("updateAvatar");
      }

      public updateAvatar_args getEmptyArgsInstance() {
        return new updateAvatar_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateAvatar_result result = new updateAvatar_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateAvatar_result result = new updateAvatar_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAvatar_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateAvatar(args.accountID, args.serverID, args.avatar, args.frame,resultHandler);
      }
    }

    public static class updateDisplayName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDisplayName_args, Void> {
      public updateDisplayName() {
        super("updateDisplayName");
      }

      public updateDisplayName_args getEmptyArgsInstance() {
        return new updateDisplayName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateDisplayName_result result = new updateDisplayName_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateDisplayName_result result = new updateDisplayName_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDisplayName_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateDisplayName(args.accountID, args.serverID, args.displayName,resultHandler);
      }
    }

    public static class joinServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, joinServer_args, Void> {
      public joinServer() {
        super("joinServer");
      }

      public joinServer_args getEmptyArgsInstance() {
        return new joinServer_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            joinServer_result result = new joinServer_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            joinServer_result result = new joinServer_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, joinServer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.joinServer(args.accountID, args.serverID, args.userID, args.displayName, args.avatar, args.avatarFrame, args.level,resultHandler);
      }
    }

    public static class logIAP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logIAP_args, Void> {
      public logIAP() {
        super("logIAP");
      }

      public logIAP_args getEmptyArgsInstance() {
        return new logIAP_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            logIAP_result result = new logIAP_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            logIAP_result result = new logIAP_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logIAP_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.logIAP(args.accountID, args.serverId, args.userID, args.gate, args.idAPI, args.purchaseToken, args.transactionId,resultHandler);
      }
    }

    public static class getUniqueIdSocialNetwork<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUniqueIdSocialNetwork_args, String> {
      public getUniqueIdSocialNetwork() {
        super("getUniqueIdSocialNetwork");
      }

      public getUniqueIdSocialNetwork_args getEmptyArgsInstance() {
        return new getUniqueIdSocialNetwork_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            getUniqueIdSocialNetwork_result result = new getUniqueIdSocialNetwork_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUniqueIdSocialNetwork_result result = new getUniqueIdSocialNetwork_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUniqueIdSocialNetwork_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.getUniqueIdSocialNetwork(args.accountID, args.socialNetworkID,resultHandler);
      }
    }

    public static class getUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserId_args, Long> {
      public getUserId() {
        super("getUserId");
      }

      public getUserId_args getEmptyArgsInstance() {
        return new getUserId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Long>() {
          public void onComplete(Long o) {
            getUserId_result result = new getUserId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserId_result result = new getUserId_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws org.apache.thrift.TException {
        iface.getUserId(args.socialNetworkKey, args.socialNetworkID, args.serverId,resultHandler);
      }
    }

    public static class usernameLoginGame<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, usernameLoginGame_args, com.bamisu.log.sdkthrift.entities.TLoginResult> {
      public usernameLoginGame() {
        super("usernameLoginGame");
      }

      public usernameLoginGame_args getEmptyArgsInstance() {
        return new usernameLoginGame_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult>() { 
          public void onComplete(com.bamisu.log.sdkthrift.entities.TLoginResult o) {
            usernameLoginGame_result result = new usernameLoginGame_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            usernameLoginGame_result result = new usernameLoginGame_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, usernameLoginGame_args args, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLoginResult> resultHandler) throws org.apache.thrift.TException {
        iface.usernameLoginGame(args.username, args.password, args.serverID, args.clientIP, args.os, args.did,resultHandler);
      }
    }

    public static class updateUsernameAndPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUsernameAndPassword_args, Boolean> {
      public updateUsernameAndPassword() {
        super("updateUsernameAndPassword");
      }

      public updateUsernameAndPassword_args getEmptyArgsInstance() {
        return new updateUsernameAndPassword_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            updateUsernameAndPassword_result result = new updateUsernameAndPassword_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateUsernameAndPassword_result result = new updateUsernameAndPassword_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUsernameAndPassword_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateUsernameAndPassword(args.accountId, args.username, args.password, args.email, args.code,resultHandler);
      }
    }

    public static class changePassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changePassword_args, Boolean> {
      public changePassword() {
        super("changePassword");
      }

      public changePassword_args getEmptyArgsInstance() {
        return new changePassword_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            changePassword_result result = new changePassword_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            changePassword_result result = new changePassword_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changePassword_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.changePassword(args.accountId, args.password,resultHandler);
      }
    }

    public static class getUsername<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUsername_args, String> {
      public getUsername() {
        super("getUsername");
      }

      public getUsername_args getEmptyArgsInstance() {
        return new getUsername_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            getUsername_result result = new getUsername_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUsername_result result = new getUsername_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUsername_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.getUsername(args.accountId,resultHandler);
      }
    }

    public static class getWalletByAccountId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWalletByAccountId_args, String> {
      public getWalletByAccountId() {
        super("getWalletByAccountId");
      }

      public getWalletByAccountId_args getEmptyArgsInstance() {
        return new getWalletByAccountId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            getWalletByAccountId_result result = new getWalletByAccountId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getWalletByAccountId_result result = new getWalletByAccountId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWalletByAccountId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.getWalletByAccountId(args.accountId,resultHandler);
      }
    }

    public static class linkWallet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, linkWallet_args, Long> {
      public linkWallet() {
        super("linkWallet");
      }

      public linkWallet_args getEmptyArgsInstance() {
        return new linkWallet_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Long>() {
          public void onComplete(Long o) {
            linkWallet_result result = new linkWallet_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            linkWallet_result result = new linkWallet_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, linkWallet_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws org.apache.thrift.TException {
        iface.linkWallet(args.accountId, args.address, args.username, args.password, args.zoneId,resultHandler);
      }
    }

    public static class getLinkedAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLinkedAccount_args, com.bamisu.log.sdkthrift.entities.TLinkedAccount> {
      public getLinkedAccount() {
        super("getLinkedAccount");
      }

      public getLinkedAccount_args getEmptyArgsInstance() {
        return new getLinkedAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkedAccount> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkedAccount>() { 
          public void onComplete(com.bamisu.log.sdkthrift.entities.TLinkedAccount o) {
            getLinkedAccount_result result = new getLinkedAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getLinkedAccount_result result = new getLinkedAccount_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLinkedAccount_args args, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TLinkedAccount> resultHandler) throws org.apache.thrift.TException {
        iface.getLinkedAccount(args.accountId,resultHandler);
      }
    }

    public static class getUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfo_args, com.bamisu.log.sdkthrift.entities.TUserInfo> {
      public getUserInfo() {
        super("getUserInfo");
      }

      public getUserInfo_args getEmptyArgsInstance() {
        return new getUserInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TUserInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TUserInfo>() { 
          public void onComplete(com.bamisu.log.sdkthrift.entities.TUserInfo o) {
            getUserInfo_result result = new getUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserInfo_result result = new getUserInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.bamisu.log.sdkthrift.entities.TUserInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getUserInfo(args.walletAddress,resultHandler);
      }
    }

  }

  public static class loginGame_args implements org.apache.thrift.TBase<loginGame_args, loginGame_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginGame_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginGame_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIP", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginGame_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginGame_argsTupleSchemeFactory();

    public String token; // required
    public int serverID; // required
    public String clientIP; // required
    public int os; // required
    public String did; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      SERVER_ID((short)2, "serverID"),
      CLIENT_IP((short)3, "clientIP"),
      OS((short)4, "os"),
      DID((short)5, "did");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // SERVER_ID
            return SERVER_ID;
          case 3: // CLIENT_IP
            return CLIENT_IP;
          case 4: // OS
            return OS;
          case 5: // DID
            return DID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private static final int __OS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("clientIP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginGame_args.class, metaDataMap);
    }

    public loginGame_args() {
    }

    public loginGame_args(
      String token,
      int serverID,
      String clientIP,
      int os,
      String did)
    {
      this();
      this.token = token;
      this.serverID = serverID;
      setServerIDIsSet(true);
      this.clientIP = clientIP;
      this.os = os;
      setOsIsSet(true);
      this.did = did;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginGame_args(loginGame_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this.serverID = other.serverID;
      if (other.isSetClientIP()) {
        this.clientIP = other.clientIP;
      }
      this.os = other.os;
      if (other.isSetDid()) {
        this.did = other.did;
      }
    }

    public loginGame_args deepCopy() {
      return new loginGame_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setServerIDIsSet(false);
      this.serverID = 0;
      this.clientIP = null;
      setOsIsSet(false);
      this.os = 0;
      this.did = null;
    }

    public String getToken() {
      return this.token;
    }

    public loginGame_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getServerID() {
      return this.serverID;
    }

    public loginGame_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public String getClientIP() {
      return this.clientIP;
    }

    public loginGame_args setClientIP(String clientIP) {
      this.clientIP = clientIP;
      return this;
    }

    public void unsetClientIP() {
      this.clientIP = null;
    }

    /** Returns true if field clientIP is set (has been assigned a value) and false otherwise */
    public boolean isSetClientIP() {
      return this.clientIP != null;
    }

    public void setClientIPIsSet(boolean value) {
      if (!value) {
        this.clientIP = null;
      }
    }

    public int getOs() {
      return this.os;
    }

    public loginGame_args setOs(int os) {
      this.os = os;
      setOsIsSet(true);
      return this;
    }

    public void unsetOs() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OS_ISSET_ID);
    }

    /** Returns true if field os is set (has been assigned a value) and false otherwise */
    public boolean isSetOs() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OS_ISSET_ID);
    }

    public void setOsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OS_ISSET_ID, value);
    }

    public String getDid() {
      return this.did;
    }

    public loginGame_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      case CLIENT_IP:
        if (value == null) {
          unsetClientIP();
        } else {
          setClientIP((String)value);
        }
        break;

      case OS:
        if (value == null) {
          unsetOs();
        } else {
          setOs((Integer)value);
        }
        break;

      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case SERVER_ID:
        return getServerID();

      case CLIENT_IP:
        return getClientIP();

      case OS:
        return getOs();

      case DID:
        return getDid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case SERVER_ID:
        return isSetServerID();
      case CLIENT_IP:
        return isSetClientIP();
      case OS:
        return isSetOs();
      case DID:
        return isSetDid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginGame_args)
        return this.equals((loginGame_args)that);
      return false;
    }

    public boolean equals(loginGame_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      boolean this_present_clientIP = true && this.isSetClientIP();
      boolean that_present_clientIP = true && that.isSetClientIP();
      if (this_present_clientIP || that_present_clientIP) {
        if (!(this_present_clientIP && that_present_clientIP))
          return false;
        if (!this.clientIP.equals(that.clientIP))
          return false;
      }

      boolean this_present_os = true;
      boolean that_present_os = true;
      if (this_present_os || that_present_os) {
        if (!(this_present_os && that_present_os))
          return false;
        if (this.os != that.os)
          return false;
      }

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      hashCode = hashCode * 8191 + serverID;

      hashCode = hashCode * 8191 + ((isSetClientIP()) ? 131071 : 524287);
      if (isSetClientIP())
        hashCode = hashCode * 8191 + clientIP.hashCode();

      hashCode = hashCode * 8191 + os;

      hashCode = hashCode * 8191 + ((isSetDid()) ? 131071 : 524287);
      if (isSetDid())
        hashCode = hashCode * 8191 + did.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginGame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientIP()).compareTo(other.isSetClientIP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientIP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIP, other.clientIP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOs()).compareTo(other.isSetOs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, other.os);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDid()).compareTo(other.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, other.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginGame_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientIP:");
      if (this.clientIP == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("os:");
      sb.append(this.os);
      first = false;
      if (!first) sb.append(", ");
      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'serverID' because it's a primitive and you chose the non-beans generator.
      if (clientIP == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientIP' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'os' because it's a primitive and you chose the non-beans generator.
      if (did == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'did' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginGame_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginGame_argsStandardScheme getScheme() {
        return new loginGame_argsStandardScheme();
      }
    }

    private static class loginGame_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginGame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLIENT_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientIP = iprot.readString();
                struct.setClientIPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.os = iprot.readI32();
                struct.setOsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetServerID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverID' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetOs()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'os' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginGame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        if (struct.clientIP != null) {
          oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
          oprot.writeString(struct.clientIP);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OS_FIELD_DESC);
        oprot.writeI32(struct.os);
        oprot.writeFieldEnd();
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginGame_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginGame_argsTupleScheme getScheme() {
        return new loginGame_argsTupleScheme();
      }
    }

    private static class loginGame_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginGame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeI32(struct.serverID);
        oprot.writeString(struct.clientIP);
        oprot.writeI32(struct.os);
        oprot.writeString(struct.did);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.serverID = iprot.readI32();
        struct.setServerIDIsSet(true);
        struct.clientIP = iprot.readString();
        struct.setClientIPIsSet(true);
        struct.os = iprot.readI32();
        struct.setOsIsSet(true);
        struct.did = iprot.readString();
        struct.setDidIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loginGame_result implements org.apache.thrift.TBase<loginGame_result, loginGame_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginGame_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginGame_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginGame_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginGame_resultTupleSchemeFactory();

    public com.bamisu.log.sdkthrift.entities.TLoginResult success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.entities.TLoginResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginGame_result.class, metaDataMap);
    }

    public loginGame_result() {
    }

    public loginGame_result(
      com.bamisu.log.sdkthrift.entities.TLoginResult success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginGame_result(loginGame_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.bamisu.log.sdkthrift.entities.TLoginResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public loginGame_result deepCopy() {
      return new loginGame_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.bamisu.log.sdkthrift.entities.TLoginResult getSuccess() {
      return this.success;
    }

    public loginGame_result setSuccess(com.bamisu.log.sdkthrift.entities.TLoginResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public loginGame_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.bamisu.log.sdkthrift.entities.TLoginResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginGame_result)
        return this.equals((loginGame_result)that);
      return false;
    }

    public boolean equals(loginGame_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginGame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginGame_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginGame_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginGame_resultStandardScheme getScheme() {
        return new loginGame_resultStandardScheme();
      }
    }

    private static class loginGame_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginGame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.bamisu.log.sdkthrift.entities.TLoginResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginGame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginGame_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginGame_resultTupleScheme getScheme() {
        return new loginGame_resultTupleScheme();
      }
    }

    private static class loginGame_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginGame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.bamisu.log.sdkthrift.entities.TLoginResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class linkAccount_args implements org.apache.thrift.TBase<linkAccount_args, linkAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<linkAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("linkAccount_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SOCIAL_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("socialNetwork", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SOCIAL_NETWORK_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("socialNetworkToken", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new linkAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new linkAccount_argsTupleSchemeFactory();

    public String accountID; // required
    public long userID; // required
    public int serverID; // required
    public int socialNetwork; // required
    public String socialNetworkToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      USER_ID((short)2, "userID"),
      SERVER_ID((short)3, "serverID"),
      SOCIAL_NETWORK((short)4, "socialNetwork"),
      SOCIAL_NETWORK_TOKEN((short)5, "socialNetworkToken");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // SERVER_ID
            return SERVER_ID;
          case 4: // SOCIAL_NETWORK
            return SOCIAL_NETWORK;
          case 5: // SOCIAL_NETWORK_TOKEN
            return SOCIAL_NETWORK_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __SERVERID_ISSET_ID = 1;
    private static final int __SOCIALNETWORK_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SOCIAL_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("socialNetwork", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SOCIAL_NETWORK_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("socialNetworkToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(linkAccount_args.class, metaDataMap);
    }

    public linkAccount_args() {
    }

    public linkAccount_args(
      String accountID,
      long userID,
      int serverID,
      int socialNetwork,
      String socialNetworkToken)
    {
      this();
      this.accountID = accountID;
      this.userID = userID;
      setUserIDIsSet(true);
      this.serverID = serverID;
      setServerIDIsSet(true);
      this.socialNetwork = socialNetwork;
      setSocialNetworkIsSet(true);
      this.socialNetworkToken = socialNetworkToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linkAccount_args(linkAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      this.userID = other.userID;
      this.serverID = other.serverID;
      this.socialNetwork = other.socialNetwork;
      if (other.isSetSocialNetworkToken()) {
        this.socialNetworkToken = other.socialNetworkToken;
      }
    }

    public linkAccount_args deepCopy() {
      return new linkAccount_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      setUserIDIsSet(false);
      this.userID = 0;
      setServerIDIsSet(false);
      this.serverID = 0;
      setSocialNetworkIsSet(false);
      this.socialNetwork = 0;
      this.socialNetworkToken = null;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public linkAccount_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public long getUserID() {
      return this.userID;
    }

    public linkAccount_args setUserID(long userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getServerID() {
      return this.serverID;
    }

    public linkAccount_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public int getSocialNetwork() {
      return this.socialNetwork;
    }

    public linkAccount_args setSocialNetwork(int socialNetwork) {
      this.socialNetwork = socialNetwork;
      setSocialNetworkIsSet(true);
      return this;
    }

    public void unsetSocialNetwork() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOCIALNETWORK_ISSET_ID);
    }

    /** Returns true if field socialNetwork is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialNetwork() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOCIALNETWORK_ISSET_ID);
    }

    public void setSocialNetworkIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOCIALNETWORK_ISSET_ID, value);
    }

    public String getSocialNetworkToken() {
      return this.socialNetworkToken;
    }

    public linkAccount_args setSocialNetworkToken(String socialNetworkToken) {
      this.socialNetworkToken = socialNetworkToken;
      return this;
    }

    public void unsetSocialNetworkToken() {
      this.socialNetworkToken = null;
    }

    /** Returns true if field socialNetworkToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialNetworkToken() {
      return this.socialNetworkToken != null;
    }

    public void setSocialNetworkTokenIsSet(boolean value) {
      if (!value) {
        this.socialNetworkToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Long)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      case SOCIAL_NETWORK:
        if (value == null) {
          unsetSocialNetwork();
        } else {
          setSocialNetwork((Integer)value);
        }
        break;

      case SOCIAL_NETWORK_TOKEN:
        if (value == null) {
          unsetSocialNetworkToken();
        } else {
          setSocialNetworkToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case USER_ID:
        return getUserID();

      case SERVER_ID:
        return getServerID();

      case SOCIAL_NETWORK:
        return getSocialNetwork();

      case SOCIAL_NETWORK_TOKEN:
        return getSocialNetworkToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case USER_ID:
        return isSetUserID();
      case SERVER_ID:
        return isSetServerID();
      case SOCIAL_NETWORK:
        return isSetSocialNetwork();
      case SOCIAL_NETWORK_TOKEN:
        return isSetSocialNetworkToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linkAccount_args)
        return this.equals((linkAccount_args)that);
      return false;
    }

    public boolean equals(linkAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      boolean this_present_socialNetwork = true;
      boolean that_present_socialNetwork = true;
      if (this_present_socialNetwork || that_present_socialNetwork) {
        if (!(this_present_socialNetwork && that_present_socialNetwork))
          return false;
        if (this.socialNetwork != that.socialNetwork)
          return false;
      }

      boolean this_present_socialNetworkToken = true && this.isSetSocialNetworkToken();
      boolean that_present_socialNetworkToken = true && that.isSetSocialNetworkToken();
      if (this_present_socialNetworkToken || that_present_socialNetworkToken) {
        if (!(this_present_socialNetworkToken && that_present_socialNetworkToken))
          return false;
        if (!this.socialNetworkToken.equals(that.socialNetworkToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userID);

      hashCode = hashCode * 8191 + serverID;

      hashCode = hashCode * 8191 + socialNetwork;

      hashCode = hashCode * 8191 + ((isSetSocialNetworkToken()) ? 131071 : 524287);
      if (isSetSocialNetworkToken())
        hashCode = hashCode * 8191 + socialNetworkToken.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(linkAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSocialNetwork()).compareTo(other.isSetSocialNetwork());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialNetwork()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialNetwork, other.socialNetwork);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSocialNetworkToken()).compareTo(other.isSetSocialNetworkToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialNetworkToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialNetworkToken, other.socialNetworkToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("linkAccount_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("socialNetwork:");
      sb.append(this.socialNetwork);
      first = false;
      if (!first) sb.append(", ");
      sb.append("socialNetworkToken:");
      if (this.socialNetworkToken == null) {
        sb.append("null");
      } else {
        sb.append(this.socialNetworkToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'userID' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'serverID' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'socialNetwork' because it's a primitive and you chose the non-beans generator.
      if (socialNetworkToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'socialNetworkToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class linkAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public linkAccount_argsStandardScheme getScheme() {
        return new linkAccount_argsStandardScheme();
      }
    }

    private static class linkAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<linkAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, linkAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userID = iprot.readI64();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SOCIAL_NETWORK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.socialNetwork = iprot.readI32();
                struct.setSocialNetworkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SOCIAL_NETWORK_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.socialNetworkToken = iprot.readString();
                struct.setSocialNetworkTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetUserID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'userID' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetServerID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverID' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetSocialNetwork()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'socialNetwork' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, linkAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SOCIAL_NETWORK_FIELD_DESC);
        oprot.writeI32(struct.socialNetwork);
        oprot.writeFieldEnd();
        if (struct.socialNetworkToken != null) {
          oprot.writeFieldBegin(SOCIAL_NETWORK_TOKEN_FIELD_DESC);
          oprot.writeString(struct.socialNetworkToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class linkAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public linkAccount_argsTupleScheme getScheme() {
        return new linkAccount_argsTupleScheme();
      }
    }

    private static class linkAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<linkAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, linkAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeI64(struct.userID);
        oprot.writeI32(struct.serverID);
        oprot.writeI32(struct.socialNetwork);
        oprot.writeString(struct.socialNetworkToken);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, linkAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.userID = iprot.readI64();
        struct.setUserIDIsSet(true);
        struct.serverID = iprot.readI32();
        struct.setServerIDIsSet(true);
        struct.socialNetwork = iprot.readI32();
        struct.setSocialNetworkIsSet(true);
        struct.socialNetworkToken = iprot.readString();
        struct.setSocialNetworkTokenIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class linkAccount_result implements org.apache.thrift.TBase<linkAccount_result, linkAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<linkAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("linkAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new linkAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new linkAccount_resultTupleSchemeFactory();

    public com.bamisu.log.sdkthrift.entities.TLinkAccountResult success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.entities.TLinkAccountResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(linkAccount_result.class, metaDataMap);
    }

    public linkAccount_result() {
    }

    public linkAccount_result(
      com.bamisu.log.sdkthrift.entities.TLinkAccountResult success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linkAccount_result(linkAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.bamisu.log.sdkthrift.entities.TLinkAccountResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public linkAccount_result deepCopy() {
      return new linkAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.bamisu.log.sdkthrift.entities.TLinkAccountResult getSuccess() {
      return this.success;
    }

    public linkAccount_result setSuccess(com.bamisu.log.sdkthrift.entities.TLinkAccountResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public linkAccount_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.bamisu.log.sdkthrift.entities.TLinkAccountResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linkAccount_result)
        return this.equals((linkAccount_result)that);
      return false;
    }

    public boolean equals(linkAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(linkAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("linkAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class linkAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public linkAccount_resultStandardScheme getScheme() {
        return new linkAccount_resultStandardScheme();
      }
    }

    private static class linkAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<linkAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, linkAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.bamisu.log.sdkthrift.entities.TLinkAccountResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, linkAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class linkAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public linkAccount_resultTupleScheme getScheme() {
        return new linkAccount_resultTupleScheme();
      }
    }

    private static class linkAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<linkAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, linkAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, linkAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.bamisu.log.sdkthrift.entities.TLinkAccountResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class switchAccount_args implements org.apache.thrift.TBase<switchAccount_args, switchAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<switchAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("switchAccount_args");

    private static final org.apache.thrift.protocol.TField SOCIAL_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("socialNetwork", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SOCIAL_NETWORK_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("socialNetworkToken", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new switchAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new switchAccount_argsTupleSchemeFactory();

    public int socialNetwork; // required
    public String socialNetworkToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOCIAL_NETWORK((short)1, "socialNetwork"),
      SOCIAL_NETWORK_TOKEN((short)2, "socialNetworkToken");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOCIAL_NETWORK
            return SOCIAL_NETWORK;
          case 2: // SOCIAL_NETWORK_TOKEN
            return SOCIAL_NETWORK_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SOCIALNETWORK_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOCIAL_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("socialNetwork", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SOCIAL_NETWORK_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("socialNetworkToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(switchAccount_args.class, metaDataMap);
    }

    public switchAccount_args() {
    }

    public switchAccount_args(
      int socialNetwork,
      String socialNetworkToken)
    {
      this();
      this.socialNetwork = socialNetwork;
      setSocialNetworkIsSet(true);
      this.socialNetworkToken = socialNetworkToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public switchAccount_args(switchAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.socialNetwork = other.socialNetwork;
      if (other.isSetSocialNetworkToken()) {
        this.socialNetworkToken = other.socialNetworkToken;
      }
    }

    public switchAccount_args deepCopy() {
      return new switchAccount_args(this);
    }

    @Override
    public void clear() {
      setSocialNetworkIsSet(false);
      this.socialNetwork = 0;
      this.socialNetworkToken = null;
    }

    public int getSocialNetwork() {
      return this.socialNetwork;
    }

    public switchAccount_args setSocialNetwork(int socialNetwork) {
      this.socialNetwork = socialNetwork;
      setSocialNetworkIsSet(true);
      return this;
    }

    public void unsetSocialNetwork() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOCIALNETWORK_ISSET_ID);
    }

    /** Returns true if field socialNetwork is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialNetwork() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOCIALNETWORK_ISSET_ID);
    }

    public void setSocialNetworkIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOCIALNETWORK_ISSET_ID, value);
    }

    public String getSocialNetworkToken() {
      return this.socialNetworkToken;
    }

    public switchAccount_args setSocialNetworkToken(String socialNetworkToken) {
      this.socialNetworkToken = socialNetworkToken;
      return this;
    }

    public void unsetSocialNetworkToken() {
      this.socialNetworkToken = null;
    }

    /** Returns true if field socialNetworkToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialNetworkToken() {
      return this.socialNetworkToken != null;
    }

    public void setSocialNetworkTokenIsSet(boolean value) {
      if (!value) {
        this.socialNetworkToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOCIAL_NETWORK:
        if (value == null) {
          unsetSocialNetwork();
        } else {
          setSocialNetwork((Integer)value);
        }
        break;

      case SOCIAL_NETWORK_TOKEN:
        if (value == null) {
          unsetSocialNetworkToken();
        } else {
          setSocialNetworkToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOCIAL_NETWORK:
        return getSocialNetwork();

      case SOCIAL_NETWORK_TOKEN:
        return getSocialNetworkToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOCIAL_NETWORK:
        return isSetSocialNetwork();
      case SOCIAL_NETWORK_TOKEN:
        return isSetSocialNetworkToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof switchAccount_args)
        return this.equals((switchAccount_args)that);
      return false;
    }

    public boolean equals(switchAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_socialNetwork = true;
      boolean that_present_socialNetwork = true;
      if (this_present_socialNetwork || that_present_socialNetwork) {
        if (!(this_present_socialNetwork && that_present_socialNetwork))
          return false;
        if (this.socialNetwork != that.socialNetwork)
          return false;
      }

      boolean this_present_socialNetworkToken = true && this.isSetSocialNetworkToken();
      boolean that_present_socialNetworkToken = true && that.isSetSocialNetworkToken();
      if (this_present_socialNetworkToken || that_present_socialNetworkToken) {
        if (!(this_present_socialNetworkToken && that_present_socialNetworkToken))
          return false;
        if (!this.socialNetworkToken.equals(that.socialNetworkToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + socialNetwork;

      hashCode = hashCode * 8191 + ((isSetSocialNetworkToken()) ? 131071 : 524287);
      if (isSetSocialNetworkToken())
        hashCode = hashCode * 8191 + socialNetworkToken.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(switchAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSocialNetwork()).compareTo(other.isSetSocialNetwork());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialNetwork()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialNetwork, other.socialNetwork);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSocialNetworkToken()).compareTo(other.isSetSocialNetworkToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialNetworkToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialNetworkToken, other.socialNetworkToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("switchAccount_args(");
      boolean first = true;

      sb.append("socialNetwork:");
      sb.append(this.socialNetwork);
      first = false;
      if (!first) sb.append(", ");
      sb.append("socialNetworkToken:");
      if (this.socialNetworkToken == null) {
        sb.append("null");
      } else {
        sb.append(this.socialNetworkToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'socialNetwork' because it's a primitive and you chose the non-beans generator.
      if (socialNetworkToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'socialNetworkToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class switchAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public switchAccount_argsStandardScheme getScheme() {
        return new switchAccount_argsStandardScheme();
      }
    }

    private static class switchAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<switchAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, switchAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOCIAL_NETWORK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.socialNetwork = iprot.readI32();
                struct.setSocialNetworkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOCIAL_NETWORK_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.socialNetworkToken = iprot.readString();
                struct.setSocialNetworkTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetSocialNetwork()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'socialNetwork' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, switchAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SOCIAL_NETWORK_FIELD_DESC);
        oprot.writeI32(struct.socialNetwork);
        oprot.writeFieldEnd();
        if (struct.socialNetworkToken != null) {
          oprot.writeFieldBegin(SOCIAL_NETWORK_TOKEN_FIELD_DESC);
          oprot.writeString(struct.socialNetworkToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class switchAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public switchAccount_argsTupleScheme getScheme() {
        return new switchAccount_argsTupleScheme();
      }
    }

    private static class switchAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<switchAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, switchAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeI32(struct.socialNetwork);
        oprot.writeString(struct.socialNetworkToken);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, switchAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.socialNetwork = iprot.readI32();
        struct.setSocialNetworkIsSet(true);
        struct.socialNetworkToken = iprot.readString();
        struct.setSocialNetworkTokenIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class switchAccount_result implements org.apache.thrift.TBase<switchAccount_result, switchAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<switchAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("switchAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new switchAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new switchAccount_resultTupleSchemeFactory();

    public com.bamisu.log.sdkthrift.entities.TSwitchAccountResult success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.entities.TSwitchAccountResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(switchAccount_result.class, metaDataMap);
    }

    public switchAccount_result() {
    }

    public switchAccount_result(
      com.bamisu.log.sdkthrift.entities.TSwitchAccountResult success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public switchAccount_result(switchAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.bamisu.log.sdkthrift.entities.TSwitchAccountResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public switchAccount_result deepCopy() {
      return new switchAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.bamisu.log.sdkthrift.entities.TSwitchAccountResult getSuccess() {
      return this.success;
    }

    public switchAccount_result setSuccess(com.bamisu.log.sdkthrift.entities.TSwitchAccountResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public switchAccount_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.bamisu.log.sdkthrift.entities.TSwitchAccountResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof switchAccount_result)
        return this.equals((switchAccount_result)that);
      return false;
    }

    public boolean equals(switchAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(switchAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("switchAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class switchAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public switchAccount_resultStandardScheme getScheme() {
        return new switchAccount_resultStandardScheme();
      }
    }

    private static class switchAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<switchAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, switchAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.bamisu.log.sdkthrift.entities.TSwitchAccountResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, switchAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class switchAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public switchAccount_resultTupleScheme getScheme() {
        return new switchAccount_resultTupleScheme();
      }
    }

    private static class switchAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<switchAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, switchAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, switchAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.bamisu.log.sdkthrift.entities.TSwitchAccountResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateLevel_args implements org.apache.thrift.TBase<updateLevel_args, updateLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLevel_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateLevel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateLevel_argsTupleSchemeFactory();

    public String accountID; // required
    public int serverID; // required
    public int level; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      SERVER_ID((short)2, "serverID"),
      LEVEL((short)3, "level");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // SERVER_ID
            return SERVER_ID;
          case 3: // LEVEL
            return LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private static final int __LEVEL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLevel_args.class, metaDataMap);
    }

    public updateLevel_args() {
    }

    public updateLevel_args(
      String accountID,
      int serverID,
      int level)
    {
      this();
      this.accountID = accountID;
      this.serverID = serverID;
      setServerIDIsSet(true);
      this.level = level;
      setLevelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLevel_args(updateLevel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      this.serverID = other.serverID;
      this.level = other.level;
    }

    public updateLevel_args deepCopy() {
      return new updateLevel_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      setServerIDIsSet(false);
      this.serverID = 0;
      setLevelIsSet(false);
      this.level = 0;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public updateLevel_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public int getServerID() {
      return this.serverID;
    }

    public updateLevel_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public int getLevel() {
      return this.level;
    }

    public updateLevel_args setLevel(int level) {
      this.level = level;
      setLevelIsSet(true);
      return this;
    }

    public void unsetLevel() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
    }

    /** Returns true if field level is set (has been assigned a value) and false otherwise */
    public boolean isSetLevel() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
    }

    public void setLevelIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          setLevel((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case SERVER_ID:
        return getServerID();

      case LEVEL:
        return getLevel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case SERVER_ID:
        return isSetServerID();
      case LEVEL:
        return isSetLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLevel_args)
        return this.equals((updateLevel_args)that);
      return false;
    }

    public boolean equals(updateLevel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      boolean this_present_level = true;
      boolean that_present_level = true;
      if (this_present_level || that_present_level) {
        if (!(this_present_level && that_present_level))
          return false;
        if (this.level != that.level)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + serverID;

      hashCode = hashCode * 8191 + level;

      return hashCode;
    }

    @Override
    public int compareTo(updateLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLevel_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("level:");
      sb.append(this.level);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'serverID' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'level' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLevel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateLevel_argsStandardScheme getScheme() {
        return new updateLevel_argsStandardScheme();
      }
    }

    private static class updateLevel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.level = iprot.readI32();
                struct.setLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetServerID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverID' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetLevel()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'level' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeI32(struct.level);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLevel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateLevel_argsTupleScheme getScheme() {
        return new updateLevel_argsTupleScheme();
      }
    }

    private static class updateLevel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeI32(struct.serverID);
        oprot.writeI32(struct.level);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.serverID = iprot.readI32();
        struct.setServerIDIsSet(true);
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateLevel_result implements org.apache.thrift.TBase<updateLevel_result, updateLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLevel_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateLevel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateLevel_resultTupleSchemeFactory();

    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLevel_result.class, metaDataMap);
    }

    public updateLevel_result() {
    }

    public updateLevel_result(
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLevel_result(updateLevel_result other) {
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public updateLevel_result deepCopy() {
      return new updateLevel_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public updateLevel_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLevel_result)
        return this.equals((updateLevel_result)that);
      return false;
    }

    public boolean equals(updateLevel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLevel_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLevel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateLevel_resultStandardScheme getScheme() {
        return new updateLevel_resultStandardScheme();
      }
    }

    private static class updateLevel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLevel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateLevel_resultTupleScheme getScheme() {
        return new updateLevel_resultTupleScheme();
      }
    }

    private static class updateLevel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAvatar_args implements org.apache.thrift.TBase<updateAvatar_args, updateAvatar_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAvatar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAvatar_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("frame", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAvatar_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAvatar_argsTupleSchemeFactory();

    public String accountID; // required
    public int serverID; // required
    public String avatar; // required
    public int frame; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      SERVER_ID((short)2, "serverID"),
      AVATAR((short)3, "avatar"),
      FRAME((short)4, "frame");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // SERVER_ID
            return SERVER_ID;
          case 3: // AVATAR
            return AVATAR;
          case 4: // FRAME
            return FRAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private static final int __FRAME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FRAME, new org.apache.thrift.meta_data.FieldMetaData("frame", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAvatar_args.class, metaDataMap);
    }

    public updateAvatar_args() {
    }

    public updateAvatar_args(
      String accountID,
      int serverID,
      String avatar,
      int frame)
    {
      this();
      this.accountID = accountID;
      this.serverID = serverID;
      setServerIDIsSet(true);
      this.avatar = avatar;
      this.frame = frame;
      setFrameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAvatar_args(updateAvatar_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      this.serverID = other.serverID;
      if (other.isSetAvatar()) {
        this.avatar = other.avatar;
      }
      this.frame = other.frame;
    }

    public updateAvatar_args deepCopy() {
      return new updateAvatar_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      setServerIDIsSet(false);
      this.serverID = 0;
      this.avatar = null;
      setFrameIsSet(false);
      this.frame = 0;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public updateAvatar_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public int getServerID() {
      return this.serverID;
    }

    public updateAvatar_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public String getAvatar() {
      return this.avatar;
    }

    public updateAvatar_args setAvatar(String avatar) {
      this.avatar = avatar;
      return this;
    }

    public void unsetAvatar() {
      this.avatar = null;
    }

    /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatar() {
      return this.avatar != null;
    }

    public void setAvatarIsSet(boolean value) {
      if (!value) {
        this.avatar = null;
      }
    }

    public int getFrame() {
      return this.frame;
    }

    public updateAvatar_args setFrame(int frame) {
      this.frame = frame;
      setFrameIsSet(true);
      return this;
    }

    public void unsetFrame() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAME_ISSET_ID);
    }

    /** Returns true if field frame is set (has been assigned a value) and false otherwise */
    public boolean isSetFrame() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAME_ISSET_ID);
    }

    public void setFrameIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      case AVATAR:
        if (value == null) {
          unsetAvatar();
        } else {
          setAvatar((String)value);
        }
        break;

      case FRAME:
        if (value == null) {
          unsetFrame();
        } else {
          setFrame((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case SERVER_ID:
        return getServerID();

      case AVATAR:
        return getAvatar();

      case FRAME:
        return getFrame();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case SERVER_ID:
        return isSetServerID();
      case AVATAR:
        return isSetAvatar();
      case FRAME:
        return isSetFrame();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAvatar_args)
        return this.equals((updateAvatar_args)that);
      return false;
    }

    public boolean equals(updateAvatar_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      boolean this_present_avatar = true && this.isSetAvatar();
      boolean that_present_avatar = true && that.isSetAvatar();
      if (this_present_avatar || that_present_avatar) {
        if (!(this_present_avatar && that_present_avatar))
          return false;
        if (!this.avatar.equals(that.avatar))
          return false;
      }

      boolean this_present_frame = true;
      boolean that_present_frame = true;
      if (this_present_frame || that_present_frame) {
        if (!(this_present_frame && that_present_frame))
          return false;
        if (this.frame != that.frame)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + serverID;

      hashCode = hashCode * 8191 + ((isSetAvatar()) ? 131071 : 524287);
      if (isSetAvatar())
        hashCode = hashCode * 8191 + avatar.hashCode();

      hashCode = hashCode * 8191 + frame;

      return hashCode;
    }

    @Override
    public int compareTo(updateAvatar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatar()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFrame()).compareTo(other.isSetFrame());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrame()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frame, other.frame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAvatar_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("frame:");
      sb.append(this.frame);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'serverID' because it's a primitive and you chose the non-beans generator.
      if (avatar == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'avatar' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'frame' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAvatar_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAvatar_argsStandardScheme getScheme() {
        return new updateAvatar_argsStandardScheme();
      }
    }

    private static class updateAvatar_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAvatar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAvatar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AVATAR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatar = iprot.readString();
                struct.setAvatarIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FRAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.frame = iprot.readI32();
                struct.setFrameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetServerID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverID' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetFrame()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'frame' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAvatar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        if (struct.avatar != null) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          oprot.writeString(struct.avatar);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FRAME_FIELD_DESC);
        oprot.writeI32(struct.frame);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAvatar_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAvatar_argsTupleScheme getScheme() {
        return new updateAvatar_argsTupleScheme();
      }
    }

    private static class updateAvatar_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAvatar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAvatar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeI32(struct.serverID);
        oprot.writeString(struct.avatar);
        oprot.writeI32(struct.frame);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAvatar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.serverID = iprot.readI32();
        struct.setServerIDIsSet(true);
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
        struct.frame = iprot.readI32();
        struct.setFrameIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAvatar_result implements org.apache.thrift.TBase<updateAvatar_result, updateAvatar_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAvatar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAvatar_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAvatar_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAvatar_resultTupleSchemeFactory();

    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAvatar_result.class, metaDataMap);
    }

    public updateAvatar_result() {
    }

    public updateAvatar_result(
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAvatar_result(updateAvatar_result other) {
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public updateAvatar_result deepCopy() {
      return new updateAvatar_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public updateAvatar_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAvatar_result)
        return this.equals((updateAvatar_result)that);
      return false;
    }

    public boolean equals(updateAvatar_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAvatar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAvatar_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAvatar_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAvatar_resultStandardScheme getScheme() {
        return new updateAvatar_resultStandardScheme();
      }
    }

    private static class updateAvatar_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAvatar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAvatar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAvatar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAvatar_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAvatar_resultTupleScheme getScheme() {
        return new updateAvatar_resultTupleScheme();
      }
    }

    private static class updateAvatar_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAvatar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAvatar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAvatar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateDisplayName_args implements org.apache.thrift.TBase<updateDisplayName_args, updateDisplayName_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDisplayName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDisplayName_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateDisplayName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateDisplayName_argsTupleSchemeFactory();

    public String accountID; // required
    public int serverID; // required
    public String displayName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      SERVER_ID((short)2, "serverID"),
      DISPLAY_NAME((short)3, "displayName");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // SERVER_ID
            return SERVER_ID;
          case 3: // DISPLAY_NAME
            return DISPLAY_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDisplayName_args.class, metaDataMap);
    }

    public updateDisplayName_args() {
    }

    public updateDisplayName_args(
      String accountID,
      int serverID,
      String displayName)
    {
      this();
      this.accountID = accountID;
      this.serverID = serverID;
      setServerIDIsSet(true);
      this.displayName = displayName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDisplayName_args(updateDisplayName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      this.serverID = other.serverID;
      if (other.isSetDisplayName()) {
        this.displayName = other.displayName;
      }
    }

    public updateDisplayName_args deepCopy() {
      return new updateDisplayName_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      setServerIDIsSet(false);
      this.serverID = 0;
      this.displayName = null;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public updateDisplayName_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public int getServerID() {
      return this.serverID;
    }

    public updateDisplayName_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public String getDisplayName() {
      return this.displayName;
    }

    public updateDisplayName_args setDisplayName(String displayName) {
      this.displayName = displayName;
      return this;
    }

    public void unsetDisplayName() {
      this.displayName = null;
    }

    /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayName() {
      return this.displayName != null;
    }

    public void setDisplayNameIsSet(boolean value) {
      if (!value) {
        this.displayName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      case DISPLAY_NAME:
        if (value == null) {
          unsetDisplayName();
        } else {
          setDisplayName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case SERVER_ID:
        return getServerID();

      case DISPLAY_NAME:
        return getDisplayName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case SERVER_ID:
        return isSetServerID();
      case DISPLAY_NAME:
        return isSetDisplayName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDisplayName_args)
        return this.equals((updateDisplayName_args)that);
      return false;
    }

    public boolean equals(updateDisplayName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      boolean this_present_displayName = true && this.isSetDisplayName();
      boolean that_present_displayName = true && that.isSetDisplayName();
      if (this_present_displayName || that_present_displayName) {
        if (!(this_present_displayName && that_present_displayName))
          return false;
        if (!this.displayName.equals(that.displayName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + serverID;

      hashCode = hashCode * 8191 + ((isSetDisplayName()) ? 131071 : 524287);
      if (isSetDisplayName())
        hashCode = hashCode * 8191 + displayName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateDisplayName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(other.isSetDisplayName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, other.displayName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDisplayName_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayName:");
      if (this.displayName == null) {
        sb.append("null");
      } else {
        sb.append(this.displayName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'serverID' because it's a primitive and you chose the non-beans generator.
      if (displayName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'displayName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDisplayName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDisplayName_argsStandardScheme getScheme() {
        return new updateDisplayName_argsStandardScheme();
      }
    }

    private static class updateDisplayName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateDisplayName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDisplayName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DISPLAY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.displayName = iprot.readString();
                struct.setDisplayNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetServerID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverID' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDisplayName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        if (struct.displayName != null) {
          oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
          oprot.writeString(struct.displayName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDisplayName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDisplayName_argsTupleScheme getScheme() {
        return new updateDisplayName_argsTupleScheme();
      }
    }

    private static class updateDisplayName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateDisplayName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDisplayName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeI32(struct.serverID);
        oprot.writeString(struct.displayName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDisplayName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.serverID = iprot.readI32();
        struct.setServerIDIsSet(true);
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateDisplayName_result implements org.apache.thrift.TBase<updateDisplayName_result, updateDisplayName_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDisplayName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDisplayName_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateDisplayName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateDisplayName_resultTupleSchemeFactory();

    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDisplayName_result.class, metaDataMap);
    }

    public updateDisplayName_result() {
    }

    public updateDisplayName_result(
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDisplayName_result(updateDisplayName_result other) {
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public updateDisplayName_result deepCopy() {
      return new updateDisplayName_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public updateDisplayName_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDisplayName_result)
        return this.equals((updateDisplayName_result)that);
      return false;
    }

    public boolean equals(updateDisplayName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateDisplayName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDisplayName_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDisplayName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDisplayName_resultStandardScheme getScheme() {
        return new updateDisplayName_resultStandardScheme();
      }
    }

    private static class updateDisplayName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateDisplayName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDisplayName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDisplayName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDisplayName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateDisplayName_resultTupleScheme getScheme() {
        return new updateDisplayName_resultTupleScheme();
      }
    }

    private static class updateDisplayName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateDisplayName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDisplayName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDisplayName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class joinServer_args implements org.apache.thrift.TBase<joinServer_args, joinServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<joinServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinServer_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField AVATAR_FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarFrame", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new joinServer_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new joinServer_argsTupleSchemeFactory();

    public String accountID; // required
    public int serverID; // required
    public long userID; // required
    public String displayName; // required
    public String avatar; // required
    public int avatarFrame; // required
    public int level; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      SERVER_ID((short)2, "serverID"),
      USER_ID((short)3, "userID"),
      DISPLAY_NAME((short)4, "displayName"),
      AVATAR((short)5, "avatar"),
      AVATAR_FRAME((short)6, "avatarFrame"),
      LEVEL((short)7, "level");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // SERVER_ID
            return SERVER_ID;
          case 3: // USER_ID
            return USER_ID;
          case 4: // DISPLAY_NAME
            return DISPLAY_NAME;
          case 5: // AVATAR
            return AVATAR;
          case 6: // AVATAR_FRAME
            return AVATAR_FRAME;
          case 7: // LEVEL
            return LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private static final int __AVATARFRAME_ISSET_ID = 2;
    private static final int __LEVEL_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AVATAR_FRAME, new org.apache.thrift.meta_data.FieldMetaData("avatarFrame", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinServer_args.class, metaDataMap);
    }

    public joinServer_args() {
    }

    public joinServer_args(
      String accountID,
      int serverID,
      long userID,
      String displayName,
      String avatar,
      int avatarFrame,
      int level)
    {
      this();
      this.accountID = accountID;
      this.serverID = serverID;
      setServerIDIsSet(true);
      this.userID = userID;
      setUserIDIsSet(true);
      this.displayName = displayName;
      this.avatar = avatar;
      this.avatarFrame = avatarFrame;
      setAvatarFrameIsSet(true);
      this.level = level;
      setLevelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinServer_args(joinServer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      this.serverID = other.serverID;
      this.userID = other.userID;
      if (other.isSetDisplayName()) {
        this.displayName = other.displayName;
      }
      if (other.isSetAvatar()) {
        this.avatar = other.avatar;
      }
      this.avatarFrame = other.avatarFrame;
      this.level = other.level;
    }

    public joinServer_args deepCopy() {
      return new joinServer_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      setServerIDIsSet(false);
      this.serverID = 0;
      setUserIDIsSet(false);
      this.userID = 0;
      this.displayName = null;
      this.avatar = null;
      setAvatarFrameIsSet(false);
      this.avatarFrame = 0;
      setLevelIsSet(false);
      this.level = 0;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public joinServer_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public int getServerID() {
      return this.serverID;
    }

    public joinServer_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public long getUserID() {
      return this.userID;
    }

    public joinServer_args setUserID(long userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String getDisplayName() {
      return this.displayName;
    }

    public joinServer_args setDisplayName(String displayName) {
      this.displayName = displayName;
      return this;
    }

    public void unsetDisplayName() {
      this.displayName = null;
    }

    /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayName() {
      return this.displayName != null;
    }

    public void setDisplayNameIsSet(boolean value) {
      if (!value) {
        this.displayName = null;
      }
    }

    public String getAvatar() {
      return this.avatar;
    }

    public joinServer_args setAvatar(String avatar) {
      this.avatar = avatar;
      return this;
    }

    public void unsetAvatar() {
      this.avatar = null;
    }

    /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatar() {
      return this.avatar != null;
    }

    public void setAvatarIsSet(boolean value) {
      if (!value) {
        this.avatar = null;
      }
    }

    public int getAvatarFrame() {
      return this.avatarFrame;
    }

    public joinServer_args setAvatarFrame(int avatarFrame) {
      this.avatarFrame = avatarFrame;
      setAvatarFrameIsSet(true);
      return this;
    }

    public void unsetAvatarFrame() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVATARFRAME_ISSET_ID);
    }

    /** Returns true if field avatarFrame is set (has been assigned a value) and false otherwise */
    public boolean isSetAvatarFrame() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVATARFRAME_ISSET_ID);
    }

    public void setAvatarFrameIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVATARFRAME_ISSET_ID, value);
    }

    public int getLevel() {
      return this.level;
    }

    public joinServer_args setLevel(int level) {
      this.level = level;
      setLevelIsSet(true);
      return this;
    }

    public void unsetLevel() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
    }

    /** Returns true if field level is set (has been assigned a value) and false otherwise */
    public boolean isSetLevel() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
    }

    public void setLevelIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Long)value);
        }
        break;

      case DISPLAY_NAME:
        if (value == null) {
          unsetDisplayName();
        } else {
          setDisplayName((String)value);
        }
        break;

      case AVATAR:
        if (value == null) {
          unsetAvatar();
        } else {
          setAvatar((String)value);
        }
        break;

      case AVATAR_FRAME:
        if (value == null) {
          unsetAvatarFrame();
        } else {
          setAvatarFrame((Integer)value);
        }
        break;

      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          setLevel((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case SERVER_ID:
        return getServerID();

      case USER_ID:
        return getUserID();

      case DISPLAY_NAME:
        return getDisplayName();

      case AVATAR:
        return getAvatar();

      case AVATAR_FRAME:
        return getAvatarFrame();

      case LEVEL:
        return getLevel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case SERVER_ID:
        return isSetServerID();
      case USER_ID:
        return isSetUserID();
      case DISPLAY_NAME:
        return isSetDisplayName();
      case AVATAR:
        return isSetAvatar();
      case AVATAR_FRAME:
        return isSetAvatarFrame();
      case LEVEL:
        return isSetLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof joinServer_args)
        return this.equals((joinServer_args)that);
      return false;
    }

    public boolean equals(joinServer_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_displayName = true && this.isSetDisplayName();
      boolean that_present_displayName = true && that.isSetDisplayName();
      if (this_present_displayName || that_present_displayName) {
        if (!(this_present_displayName && that_present_displayName))
          return false;
        if (!this.displayName.equals(that.displayName))
          return false;
      }

      boolean this_present_avatar = true && this.isSetAvatar();
      boolean that_present_avatar = true && that.isSetAvatar();
      if (this_present_avatar || that_present_avatar) {
        if (!(this_present_avatar && that_present_avatar))
          return false;
        if (!this.avatar.equals(that.avatar))
          return false;
      }

      boolean this_present_avatarFrame = true;
      boolean that_present_avatarFrame = true;
      if (this_present_avatarFrame || that_present_avatarFrame) {
        if (!(this_present_avatarFrame && that_present_avatarFrame))
          return false;
        if (this.avatarFrame != that.avatarFrame)
          return false;
      }

      boolean this_present_level = true;
      boolean that_present_level = true;
      if (this_present_level || that_present_level) {
        if (!(this_present_level && that_present_level))
          return false;
        if (this.level != that.level)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + serverID;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userID);

      hashCode = hashCode * 8191 + ((isSetDisplayName()) ? 131071 : 524287);
      if (isSetDisplayName())
        hashCode = hashCode * 8191 + displayName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAvatar()) ? 131071 : 524287);
      if (isSetAvatar())
        hashCode = hashCode * 8191 + avatar.hashCode();

      hashCode = hashCode * 8191 + avatarFrame;

      hashCode = hashCode * 8191 + level;

      return hashCode;
    }

    @Override
    public int compareTo(joinServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(other.isSetDisplayName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, other.displayName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatar()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAvatarFrame()).compareTo(other.isSetAvatarFrame());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvatarFrame()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarFrame, other.avatarFrame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("joinServer_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayName:");
      if (this.displayName == null) {
        sb.append("null");
      } else {
        sb.append(this.displayName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("avatarFrame:");
      sb.append(this.avatarFrame);
      first = false;
      if (!first) sb.append(", ");
      sb.append("level:");
      sb.append(this.level);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'serverID' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'userID' because it's a primitive and you chose the non-beans generator.
      if (displayName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'displayName' was not present! Struct: " + toString());
      }
      if (avatar == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'avatar' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'avatarFrame' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'level' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinServer_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinServer_argsStandardScheme getScheme() {
        return new joinServer_argsStandardScheme();
      }
    }

    private static class joinServer_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<joinServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userID = iprot.readI64();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DISPLAY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.displayName = iprot.readString();
                struct.setDisplayNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AVATAR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.avatar = iprot.readString();
                struct.setAvatarIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // AVATAR_FRAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.avatarFrame = iprot.readI32();
                struct.setAvatarFrameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.level = iprot.readI32();
                struct.setLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetServerID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverID' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetUserID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'userID' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetAvatarFrame()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'avatarFrame' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetLevel()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'level' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userID);
        oprot.writeFieldEnd();
        if (struct.displayName != null) {
          oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
          oprot.writeString(struct.displayName);
          oprot.writeFieldEnd();
        }
        if (struct.avatar != null) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          oprot.writeString(struct.avatar);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AVATAR_FRAME_FIELD_DESC);
        oprot.writeI32(struct.avatarFrame);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeI32(struct.level);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinServer_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinServer_argsTupleScheme getScheme() {
        return new joinServer_argsTupleScheme();
      }
    }

    private static class joinServer_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<joinServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeI32(struct.serverID);
        oprot.writeI64(struct.userID);
        oprot.writeString(struct.displayName);
        oprot.writeString(struct.avatar);
        oprot.writeI32(struct.avatarFrame);
        oprot.writeI32(struct.level);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.serverID = iprot.readI32();
        struct.setServerIDIsSet(true);
        struct.userID = iprot.readI64();
        struct.setUserIDIsSet(true);
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
        struct.avatarFrame = iprot.readI32();
        struct.setAvatarFrameIsSet(true);
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class joinServer_result implements org.apache.thrift.TBase<joinServer_result, joinServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<joinServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinServer_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new joinServer_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new joinServer_resultTupleSchemeFactory();

    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinServer_result.class, metaDataMap);
    }

    public joinServer_result() {
    }

    public joinServer_result(
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinServer_result(joinServer_result other) {
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public joinServer_result deepCopy() {
      return new joinServer_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public joinServer_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof joinServer_result)
        return this.equals((joinServer_result)that);
      return false;
    }

    public boolean equals(joinServer_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(joinServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("joinServer_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinServer_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinServer_resultStandardScheme getScheme() {
        return new joinServer_resultStandardScheme();
      }
    }

    private static class joinServer_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<joinServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinServer_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public joinServer_resultTupleScheme getScheme() {
        return new joinServer_resultTupleScheme();
      }
    }

    private static class joinServer_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<joinServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logIAP_args implements org.apache.thrift.TBase<logIAP_args, logIAP_args._Fields>, java.io.Serializable, Cloneable, Comparable<logIAP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logIAP_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField GATE_FIELD_DESC = new org.apache.thrift.protocol.TField("gate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField ID_API_FIELD_DESC = new org.apache.thrift.protocol.TField("idAPI", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PURCHASE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseToken", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionId", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logIAP_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logIAP_argsTupleSchemeFactory();

    public String accountID; // required
    public int serverId; // required
    public long userID; // required
    public int gate; // required
    public String idAPI; // required
    public String purchaseToken; // required
    public String transactionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      SERVER_ID((short)2, "serverId"),
      USER_ID((short)3, "userID"),
      GATE((short)4, "gate"),
      ID_API((short)5, "idAPI"),
      PURCHASE_TOKEN((short)6, "purchaseToken"),
      TRANSACTION_ID((short)7, "transactionId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // SERVER_ID
            return SERVER_ID;
          case 3: // USER_ID
            return USER_ID;
          case 4: // GATE
            return GATE;
          case 5: // ID_API
            return ID_API;
          case 6: // PURCHASE_TOKEN
            return PURCHASE_TOKEN;
          case 7: // TRANSACTION_ID
            return TRANSACTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private static final int __GATE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.GATE, new org.apache.thrift.meta_data.FieldMetaData("gate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.ID_API, new org.apache.thrift.meta_data.FieldMetaData("idAPI", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PURCHASE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("purchaseToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transactionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logIAP_args.class, metaDataMap);
    }

    public logIAP_args() {
    }

    public logIAP_args(
      String accountID,
      int serverId,
      long userID,
      int gate,
      String idAPI,
      String purchaseToken,
      String transactionId)
    {
      this();
      this.accountID = accountID;
      this.serverId = serverId;
      setServerIdIsSet(true);
      this.userID = userID;
      setUserIDIsSet(true);
      this.gate = gate;
      setGateIsSet(true);
      this.idAPI = idAPI;
      this.purchaseToken = purchaseToken;
      this.transactionId = transactionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logIAP_args(logIAP_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      this.serverId = other.serverId;
      this.userID = other.userID;
      this.gate = other.gate;
      if (other.isSetIdAPI()) {
        this.idAPI = other.idAPI;
      }
      if (other.isSetPurchaseToken()) {
        this.purchaseToken = other.purchaseToken;
      }
      if (other.isSetTransactionId()) {
        this.transactionId = other.transactionId;
      }
    }

    public logIAP_args deepCopy() {
      return new logIAP_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      setServerIdIsSet(false);
      this.serverId = 0;
      setUserIDIsSet(false);
      this.userID = 0;
      setGateIsSet(false);
      this.gate = 0;
      this.idAPI = null;
      this.purchaseToken = null;
      this.transactionId = null;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public logIAP_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public int getServerId() {
      return this.serverId;
    }

    public logIAP_args setServerId(int serverId) {
      this.serverId = serverId;
      setServerIdIsSet(true);
      return this;
    }

    public void unsetServerId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverId is set (has been assigned a value) and false otherwise */
    public boolean isSetServerId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public long getUserID() {
      return this.userID;
    }

    public logIAP_args setUserID(long userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getGate() {
      return this.gate;
    }

    public logIAP_args setGate(int gate) {
      this.gate = gate;
      setGateIsSet(true);
      return this;
    }

    public void unsetGate() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GATE_ISSET_ID);
    }

    /** Returns true if field gate is set (has been assigned a value) and false otherwise */
    public boolean isSetGate() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GATE_ISSET_ID);
    }

    public void setGateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GATE_ISSET_ID, value);
    }

    public String getIdAPI() {
      return this.idAPI;
    }

    public logIAP_args setIdAPI(String idAPI) {
      this.idAPI = idAPI;
      return this;
    }

    public void unsetIdAPI() {
      this.idAPI = null;
    }

    /** Returns true if field idAPI is set (has been assigned a value) and false otherwise */
    public boolean isSetIdAPI() {
      return this.idAPI != null;
    }

    public void setIdAPIIsSet(boolean value) {
      if (!value) {
        this.idAPI = null;
      }
    }

    public String getPurchaseToken() {
      return this.purchaseToken;
    }

    public logIAP_args setPurchaseToken(String purchaseToken) {
      this.purchaseToken = purchaseToken;
      return this;
    }

    public void unsetPurchaseToken() {
      this.purchaseToken = null;
    }

    /** Returns true if field purchaseToken is set (has been assigned a value) and false otherwise */
    public boolean isSetPurchaseToken() {
      return this.purchaseToken != null;
    }

    public void setPurchaseTokenIsSet(boolean value) {
      if (!value) {
        this.purchaseToken = null;
      }
    }

    public String getTransactionId() {
      return this.transactionId;
    }

    public logIAP_args setTransactionId(String transactionId) {
      this.transactionId = transactionId;
      return this;
    }

    public void unsetTransactionId() {
      this.transactionId = null;
    }

    /** Returns true if field transactionId is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactionId() {
      return this.transactionId != null;
    }

    public void setTransactionIdIsSet(boolean value) {
      if (!value) {
        this.transactionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerId();
        } else {
          setServerId((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Long)value);
        }
        break;

      case GATE:
        if (value == null) {
          unsetGate();
        } else {
          setGate((Integer)value);
        }
        break;

      case ID_API:
        if (value == null) {
          unsetIdAPI();
        } else {
          setIdAPI((String)value);
        }
        break;

      case PURCHASE_TOKEN:
        if (value == null) {
          unsetPurchaseToken();
        } else {
          setPurchaseToken((String)value);
        }
        break;

      case TRANSACTION_ID:
        if (value == null) {
          unsetTransactionId();
        } else {
          setTransactionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case SERVER_ID:
        return getServerId();

      case USER_ID:
        return getUserID();

      case GATE:
        return getGate();

      case ID_API:
        return getIdAPI();

      case PURCHASE_TOKEN:
        return getPurchaseToken();

      case TRANSACTION_ID:
        return getTransactionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case SERVER_ID:
        return isSetServerId();
      case USER_ID:
        return isSetUserID();
      case GATE:
        return isSetGate();
      case ID_API:
        return isSetIdAPI();
      case PURCHASE_TOKEN:
        return isSetPurchaseToken();
      case TRANSACTION_ID:
        return isSetTransactionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logIAP_args)
        return this.equals((logIAP_args)that);
      return false;
    }

    public boolean equals(logIAP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_serverId = true;
      boolean that_present_serverId = true;
      if (this_present_serverId || that_present_serverId) {
        if (!(this_present_serverId && that_present_serverId))
          return false;
        if (this.serverId != that.serverId)
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_gate = true;
      boolean that_present_gate = true;
      if (this_present_gate || that_present_gate) {
        if (!(this_present_gate && that_present_gate))
          return false;
        if (this.gate != that.gate)
          return false;
      }

      boolean this_present_idAPI = true && this.isSetIdAPI();
      boolean that_present_idAPI = true && that.isSetIdAPI();
      if (this_present_idAPI || that_present_idAPI) {
        if (!(this_present_idAPI && that_present_idAPI))
          return false;
        if (!this.idAPI.equals(that.idAPI))
          return false;
      }

      boolean this_present_purchaseToken = true && this.isSetPurchaseToken();
      boolean that_present_purchaseToken = true && that.isSetPurchaseToken();
      if (this_present_purchaseToken || that_present_purchaseToken) {
        if (!(this_present_purchaseToken && that_present_purchaseToken))
          return false;
        if (!this.purchaseToken.equals(that.purchaseToken))
          return false;
      }

      boolean this_present_transactionId = true && this.isSetTransactionId();
      boolean that_present_transactionId = true && that.isSetTransactionId();
      if (this_present_transactionId || that_present_transactionId) {
        if (!(this_present_transactionId && that_present_transactionId))
          return false;
        if (!this.transactionId.equals(that.transactionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + serverId;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userID);

      hashCode = hashCode * 8191 + gate;

      hashCode = hashCode * 8191 + ((isSetIdAPI()) ? 131071 : 524287);
      if (isSetIdAPI())
        hashCode = hashCode * 8191 + idAPI.hashCode();

      hashCode = hashCode * 8191 + ((isSetPurchaseToken()) ? 131071 : 524287);
      if (isSetPurchaseToken())
        hashCode = hashCode * 8191 + purchaseToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetTransactionId()) ? 131071 : 524287);
      if (isSetTransactionId())
        hashCode = hashCode * 8191 + transactionId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(logIAP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerId()).compareTo(other.isSetServerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, other.serverId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGate()).compareTo(other.isSetGate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gate, other.gate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdAPI()).compareTo(other.isSetIdAPI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdAPI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idAPI, other.idAPI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurchaseToken()).compareTo(other.isSetPurchaseToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurchaseToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseToken, other.purchaseToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransactionId()).compareTo(other.isSetTransactionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionId, other.transactionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logIAP_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverId:");
      sb.append(this.serverId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("gate:");
      sb.append(this.gate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("idAPI:");
      if (this.idAPI == null) {
        sb.append("null");
      } else {
        sb.append(this.idAPI);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purchaseToken:");
      if (this.purchaseToken == null) {
        sb.append("null");
      } else {
        sb.append(this.purchaseToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transactionId:");
      if (this.transactionId == null) {
        sb.append("null");
      } else {
        sb.append(this.transactionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'serverId' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'userID' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'gate' because it's a primitive and you chose the non-beans generator.
      if (idAPI == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'idAPI' was not present! Struct: " + toString());
      }
      if (purchaseToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'purchaseToken' was not present! Struct: " + toString());
      }
      if (transactionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transactionId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logIAP_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logIAP_argsStandardScheme getScheme() {
        return new logIAP_argsStandardScheme();
      }
    }

    private static class logIAP_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logIAP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverId = iprot.readI32();
                struct.setServerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userID = iprot.readI64();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.gate = iprot.readI32();
                struct.setGateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ID_API
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idAPI = iprot.readString();
                struct.setIdAPIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PURCHASE_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.purchaseToken = iprot.readString();
                struct.setPurchaseTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TRANSACTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transactionId = iprot.readString();
                struct.setTransactionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetServerId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetUserID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'userID' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetGate()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'gate' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logIAP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GATE_FIELD_DESC);
        oprot.writeI32(struct.gate);
        oprot.writeFieldEnd();
        if (struct.idAPI != null) {
          oprot.writeFieldBegin(ID_API_FIELD_DESC);
          oprot.writeString(struct.idAPI);
          oprot.writeFieldEnd();
        }
        if (struct.purchaseToken != null) {
          oprot.writeFieldBegin(PURCHASE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.purchaseToken);
          oprot.writeFieldEnd();
        }
        if (struct.transactionId != null) {
          oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
          oprot.writeString(struct.transactionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logIAP_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logIAP_argsTupleScheme getScheme() {
        return new logIAP_argsTupleScheme();
      }
    }

    private static class logIAP_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logIAP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeI32(struct.serverId);
        oprot.writeI64(struct.userID);
        oprot.writeI32(struct.gate);
        oprot.writeString(struct.idAPI);
        oprot.writeString(struct.purchaseToken);
        oprot.writeString(struct.transactionId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.serverId = iprot.readI32();
        struct.setServerIdIsSet(true);
        struct.userID = iprot.readI64();
        struct.setUserIDIsSet(true);
        struct.gate = iprot.readI32();
        struct.setGateIsSet(true);
        struct.idAPI = iprot.readString();
        struct.setIdAPIIsSet(true);
        struct.purchaseToken = iprot.readString();
        struct.setPurchaseTokenIsSet(true);
        struct.transactionId = iprot.readString();
        struct.setTransactionIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logIAP_result implements org.apache.thrift.TBase<logIAP_result, logIAP_result._Fields>, java.io.Serializable, Cloneable, Comparable<logIAP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logIAP_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logIAP_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logIAP_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logIAP_result.class, metaDataMap);
    }

    public logIAP_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logIAP_result(logIAP_result other) {
    }

    public logIAP_result deepCopy() {
      return new logIAP_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logIAP_result)
        return this.equals((logIAP_result)that);
      return false;
    }

    public boolean equals(logIAP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(logIAP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logIAP_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logIAP_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logIAP_resultStandardScheme getScheme() {
        return new logIAP_resultStandardScheme();
      }
    }

    private static class logIAP_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<logIAP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logIAP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logIAP_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logIAP_resultTupleScheme getScheme() {
        return new logIAP_resultTupleScheme();
      }
    }

    private static class logIAP_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<logIAP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUniqueIdSocialNetwork_args implements org.apache.thrift.TBase<getUniqueIdSocialNetwork_args, getUniqueIdSocialNetwork_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUniqueIdSocialNetwork_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUniqueIdSocialNetwork_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SOCIAL_NETWORK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("socialNetworkID", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUniqueIdSocialNetwork_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUniqueIdSocialNetwork_argsTupleSchemeFactory();

    public String accountID; // required
    public int socialNetworkID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      SOCIAL_NETWORK_ID((short)2, "socialNetworkID");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // SOCIAL_NETWORK_ID
            return SOCIAL_NETWORK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SOCIALNETWORKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOCIAL_NETWORK_ID, new org.apache.thrift.meta_data.FieldMetaData("socialNetworkID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUniqueIdSocialNetwork_args.class, metaDataMap);
    }

    public getUniqueIdSocialNetwork_args() {
    }

    public getUniqueIdSocialNetwork_args(
      String accountID,
      int socialNetworkID)
    {
      this();
      this.accountID = accountID;
      this.socialNetworkID = socialNetworkID;
      setSocialNetworkIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUniqueIdSocialNetwork_args(getUniqueIdSocialNetwork_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      this.socialNetworkID = other.socialNetworkID;
    }

    public getUniqueIdSocialNetwork_args deepCopy() {
      return new getUniqueIdSocialNetwork_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      setSocialNetworkIDIsSet(false);
      this.socialNetworkID = 0;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public getUniqueIdSocialNetwork_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public int getSocialNetworkID() {
      return this.socialNetworkID;
    }

    public getUniqueIdSocialNetwork_args setSocialNetworkID(int socialNetworkID) {
      this.socialNetworkID = socialNetworkID;
      setSocialNetworkIDIsSet(true);
      return this;
    }

    public void unsetSocialNetworkID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOCIALNETWORKID_ISSET_ID);
    }

    /** Returns true if field socialNetworkID is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialNetworkID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOCIALNETWORKID_ISSET_ID);
    }

    public void setSocialNetworkIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOCIALNETWORKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case SOCIAL_NETWORK_ID:
        if (value == null) {
          unsetSocialNetworkID();
        } else {
          setSocialNetworkID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case SOCIAL_NETWORK_ID:
        return getSocialNetworkID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case SOCIAL_NETWORK_ID:
        return isSetSocialNetworkID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUniqueIdSocialNetwork_args)
        return this.equals((getUniqueIdSocialNetwork_args)that);
      return false;
    }

    public boolean equals(getUniqueIdSocialNetwork_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_socialNetworkID = true;
      boolean that_present_socialNetworkID = true;
      if (this_present_socialNetworkID || that_present_socialNetworkID) {
        if (!(this_present_socialNetworkID && that_present_socialNetworkID))
          return false;
        if (this.socialNetworkID != that.socialNetworkID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + socialNetworkID;

      return hashCode;
    }

    @Override
    public int compareTo(getUniqueIdSocialNetwork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSocialNetworkID()).compareTo(other.isSetSocialNetworkID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialNetworkID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialNetworkID, other.socialNetworkID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUniqueIdSocialNetwork_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("socialNetworkID:");
      sb.append(this.socialNetworkID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'socialNetworkID' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUniqueIdSocialNetwork_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUniqueIdSocialNetwork_argsStandardScheme getScheme() {
        return new getUniqueIdSocialNetwork_argsStandardScheme();
      }
    }

    private static class getUniqueIdSocialNetwork_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUniqueIdSocialNetwork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUniqueIdSocialNetwork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOCIAL_NETWORK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.socialNetworkID = iprot.readI32();
                struct.setSocialNetworkIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetSocialNetworkID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'socialNetworkID' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUniqueIdSocialNetwork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SOCIAL_NETWORK_ID_FIELD_DESC);
        oprot.writeI32(struct.socialNetworkID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUniqueIdSocialNetwork_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUniqueIdSocialNetwork_argsTupleScheme getScheme() {
        return new getUniqueIdSocialNetwork_argsTupleScheme();
      }
    }

    private static class getUniqueIdSocialNetwork_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUniqueIdSocialNetwork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUniqueIdSocialNetwork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeI32(struct.socialNetworkID);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUniqueIdSocialNetwork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.socialNetworkID = iprot.readI32();
        struct.setSocialNetworkIDIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUniqueIdSocialNetwork_result implements org.apache.thrift.TBase<getUniqueIdSocialNetwork_result, getUniqueIdSocialNetwork_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUniqueIdSocialNetwork_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUniqueIdSocialNetwork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUniqueIdSocialNetwork_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUniqueIdSocialNetwork_resultTupleSchemeFactory();

    public String success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUniqueIdSocialNetwork_result.class, metaDataMap);
    }

    public getUniqueIdSocialNetwork_result() {
    }

    public getUniqueIdSocialNetwork_result(
      String success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUniqueIdSocialNetwork_result(getUniqueIdSocialNetwork_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public getUniqueIdSocialNetwork_result deepCopy() {
      return new getUniqueIdSocialNetwork_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getUniqueIdSocialNetwork_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public getUniqueIdSocialNetwork_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUniqueIdSocialNetwork_result)
        return this.equals((getUniqueIdSocialNetwork_result)that);
      return false;
    }

    public boolean equals(getUniqueIdSocialNetwork_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUniqueIdSocialNetwork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUniqueIdSocialNetwork_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUniqueIdSocialNetwork_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUniqueIdSocialNetwork_resultStandardScheme getScheme() {
        return new getUniqueIdSocialNetwork_resultStandardScheme();
      }
    }

    private static class getUniqueIdSocialNetwork_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUniqueIdSocialNetwork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUniqueIdSocialNetwork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUniqueIdSocialNetwork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUniqueIdSocialNetwork_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUniqueIdSocialNetwork_resultTupleScheme getScheme() {
        return new getUniqueIdSocialNetwork_resultTupleScheme();
      }
    }

    private static class getUniqueIdSocialNetwork_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUniqueIdSocialNetwork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUniqueIdSocialNetwork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUniqueIdSocialNetwork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserId_args implements org.apache.thrift.TBase<getUserId_args, getUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserId_args");

    private static final org.apache.thrift.protocol.TField SOCIAL_NETWORK_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("socialNetworkKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SOCIAL_NETWORK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("socialNetworkID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserId_argsTupleSchemeFactory();

    public String socialNetworkKey; // required
    public int socialNetworkID; // required
    public String serverId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOCIAL_NETWORK_KEY((short)1, "socialNetworkKey"),
      SOCIAL_NETWORK_ID((short)2, "socialNetworkID"),
      SERVER_ID((short)3, "serverId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOCIAL_NETWORK_KEY
            return SOCIAL_NETWORK_KEY;
          case 2: // SOCIAL_NETWORK_ID
            return SOCIAL_NETWORK_ID;
          case 3: // SERVER_ID
            return SERVER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SOCIALNETWORKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOCIAL_NETWORK_KEY, new org.apache.thrift.meta_data.FieldMetaData("socialNetworkKey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOCIAL_NETWORK_ID, new org.apache.thrift.meta_data.FieldMetaData("socialNetworkID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserId_args.class, metaDataMap);
    }

    public getUserId_args() {
    }

    public getUserId_args(
      String socialNetworkKey,
      int socialNetworkID,
      String serverId)
    {
      this();
      this.socialNetworkKey = socialNetworkKey;
      this.socialNetworkID = socialNetworkID;
      setSocialNetworkIDIsSet(true);
      this.serverId = serverId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserId_args(getUserId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSocialNetworkKey()) {
        this.socialNetworkKey = other.socialNetworkKey;
      }
      this.socialNetworkID = other.socialNetworkID;
      if (other.isSetServerId()) {
        this.serverId = other.serverId;
      }
    }

    public getUserId_args deepCopy() {
      return new getUserId_args(this);
    }

    @Override
    public void clear() {
      this.socialNetworkKey = null;
      setSocialNetworkIDIsSet(false);
      this.socialNetworkID = 0;
      this.serverId = null;
    }

    public String getSocialNetworkKey() {
      return this.socialNetworkKey;
    }

    public getUserId_args setSocialNetworkKey(String socialNetworkKey) {
      this.socialNetworkKey = socialNetworkKey;
      return this;
    }

    public void unsetSocialNetworkKey() {
      this.socialNetworkKey = null;
    }

    /** Returns true if field socialNetworkKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialNetworkKey() {
      return this.socialNetworkKey != null;
    }

    public void setSocialNetworkKeyIsSet(boolean value) {
      if (!value) {
        this.socialNetworkKey = null;
      }
    }

    public int getSocialNetworkID() {
      return this.socialNetworkID;
    }

    public getUserId_args setSocialNetworkID(int socialNetworkID) {
      this.socialNetworkID = socialNetworkID;
      setSocialNetworkIDIsSet(true);
      return this;
    }

    public void unsetSocialNetworkID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOCIALNETWORKID_ISSET_ID);
    }

    /** Returns true if field socialNetworkID is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialNetworkID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOCIALNETWORKID_ISSET_ID);
    }

    public void setSocialNetworkIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOCIALNETWORKID_ISSET_ID, value);
    }

    public String getServerId() {
      return this.serverId;
    }

    public getUserId_args setServerId(String serverId) {
      this.serverId = serverId;
      return this;
    }

    public void unsetServerId() {
      this.serverId = null;
    }

    /** Returns true if field serverId is set (has been assigned a value) and false otherwise */
    public boolean isSetServerId() {
      return this.serverId != null;
    }

    public void setServerIdIsSet(boolean value) {
      if (!value) {
        this.serverId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOCIAL_NETWORK_KEY:
        if (value == null) {
          unsetSocialNetworkKey();
        } else {
          setSocialNetworkKey((String)value);
        }
        break;

      case SOCIAL_NETWORK_ID:
        if (value == null) {
          unsetSocialNetworkID();
        } else {
          setSocialNetworkID((Integer)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerId();
        } else {
          setServerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOCIAL_NETWORK_KEY:
        return getSocialNetworkKey();

      case SOCIAL_NETWORK_ID:
        return getSocialNetworkID();

      case SERVER_ID:
        return getServerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOCIAL_NETWORK_KEY:
        return isSetSocialNetworkKey();
      case SOCIAL_NETWORK_ID:
        return isSetSocialNetworkID();
      case SERVER_ID:
        return isSetServerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserId_args)
        return this.equals((getUserId_args)that);
      return false;
    }

    public boolean equals(getUserId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_socialNetworkKey = true && this.isSetSocialNetworkKey();
      boolean that_present_socialNetworkKey = true && that.isSetSocialNetworkKey();
      if (this_present_socialNetworkKey || that_present_socialNetworkKey) {
        if (!(this_present_socialNetworkKey && that_present_socialNetworkKey))
          return false;
        if (!this.socialNetworkKey.equals(that.socialNetworkKey))
          return false;
      }

      boolean this_present_socialNetworkID = true;
      boolean that_present_socialNetworkID = true;
      if (this_present_socialNetworkID || that_present_socialNetworkID) {
        if (!(this_present_socialNetworkID && that_present_socialNetworkID))
          return false;
        if (this.socialNetworkID != that.socialNetworkID)
          return false;
      }

      boolean this_present_serverId = true && this.isSetServerId();
      boolean that_present_serverId = true && that.isSetServerId();
      if (this_present_serverId || that_present_serverId) {
        if (!(this_present_serverId && that_present_serverId))
          return false;
        if (!this.serverId.equals(that.serverId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSocialNetworkKey()) ? 131071 : 524287);
      if (isSetSocialNetworkKey())
        hashCode = hashCode * 8191 + socialNetworkKey.hashCode();

      hashCode = hashCode * 8191 + socialNetworkID;

      hashCode = hashCode * 8191 + ((isSetServerId()) ? 131071 : 524287);
      if (isSetServerId())
        hashCode = hashCode * 8191 + serverId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSocialNetworkKey()).compareTo(other.isSetSocialNetworkKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialNetworkKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialNetworkKey, other.socialNetworkKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSocialNetworkID()).compareTo(other.isSetSocialNetworkID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialNetworkID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialNetworkID, other.socialNetworkID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerId()).compareTo(other.isSetServerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, other.serverId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserId_args(");
      boolean first = true;

      sb.append("socialNetworkKey:");
      if (this.socialNetworkKey == null) {
        sb.append("null");
      } else {
        sb.append(this.socialNetworkKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("socialNetworkID:");
      sb.append(this.socialNetworkID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverId:");
      if (this.serverId == null) {
        sb.append("null");
      } else {
        sb.append(this.serverId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (socialNetworkKey == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'socialNetworkKey' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'socialNetworkID' because it's a primitive and you chose the non-beans generator.
      if (serverId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserId_argsStandardScheme getScheme() {
        return new getUserId_argsStandardScheme();
      }
    }

    private static class getUserId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOCIAL_NETWORK_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.socialNetworkKey = iprot.readString();
                struct.setSocialNetworkKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOCIAL_NETWORK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.socialNetworkID = iprot.readI32();
                struct.setSocialNetworkIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serverId = iprot.readString();
                struct.setServerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetSocialNetworkID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'socialNetworkID' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.socialNetworkKey != null) {
          oprot.writeFieldBegin(SOCIAL_NETWORK_KEY_FIELD_DESC);
          oprot.writeString(struct.socialNetworkKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SOCIAL_NETWORK_ID_FIELD_DESC);
        oprot.writeI32(struct.socialNetworkID);
        oprot.writeFieldEnd();
        if (struct.serverId != null) {
          oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
          oprot.writeString(struct.serverId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserId_argsTupleScheme getScheme() {
        return new getUserId_argsTupleScheme();
      }
    }

    private static class getUserId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.socialNetworkKey);
        oprot.writeI32(struct.socialNetworkID);
        oprot.writeString(struct.serverId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.socialNetworkKey = iprot.readString();
        struct.setSocialNetworkKeyIsSet(true);
        struct.socialNetworkID = iprot.readI32();
        struct.setSocialNetworkIDIsSet(true);
        struct.serverId = iprot.readString();
        struct.setServerIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserId_result implements org.apache.thrift.TBase<getUserId_result, getUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserId_resultTupleSchemeFactory();

    public long success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserId_result.class, metaDataMap);
    }

    public getUserId_result() {
    }

    public getUserId_result(
      long success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserId_result(getUserId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public getUserId_result deepCopy() {
      return new getUserId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getUserId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public getUserId_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserId_result)
        return this.equals((getUserId_result)that);
      return false;
    }

    public boolean equals(getUserId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserId_resultStandardScheme getScheme() {
        return new getUserId_resultStandardScheme();
      }
    }

    private static class getUserId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserId_resultTupleScheme getScheme() {
        return new getUserId_resultTupleScheme();
      }
    }

    private static class getUserId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class usernameLoginGame_args implements org.apache.thrift.TBase<usernameLoginGame_args, usernameLoginGame_args._Fields>, java.io.Serializable, Cloneable, Comparable<usernameLoginGame_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("usernameLoginGame_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIP", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new usernameLoginGame_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new usernameLoginGame_argsTupleSchemeFactory();

    public String username; // required
    public String password; // required
    public int serverID; // required
    public String clientIP; // required
    public int os; // required
    public String did; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password"),
      SERVER_ID((short)3, "serverID"),
      CLIENT_IP((short)4, "clientIP"),
      OS((short)5, "os"),
      DID((short)6, "did");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // SERVER_ID
            return SERVER_ID;
          case 4: // CLIENT_IP
            return CLIENT_IP;
          case 5: // OS
            return OS;
          case 6: // DID
            return DID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private static final int __OS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("clientIP", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.DID, new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(usernameLoginGame_args.class, metaDataMap);
    }

    public usernameLoginGame_args() {
    }

    public usernameLoginGame_args(
      String username,
      String password,
      int serverID,
      String clientIP,
      int os,
      String did)
    {
      this();
      this.username = username;
      this.password = password;
      this.serverID = serverID;
      setServerIDIsSet(true);
      this.clientIP = clientIP;
      this.os = os;
      setOsIsSet(true);
      this.did = did;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public usernameLoginGame_args(usernameLoginGame_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      this.serverID = other.serverID;
      if (other.isSetClientIP()) {
        this.clientIP = other.clientIP;
      }
      this.os = other.os;
      if (other.isSetDid()) {
        this.did = other.did;
      }
    }

    public usernameLoginGame_args deepCopy() {
      return new usernameLoginGame_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
      setServerIDIsSet(false);
      this.serverID = 0;
      this.clientIP = null;
      setOsIsSet(false);
      this.os = 0;
      this.did = null;
    }

    public String getUsername() {
      return this.username;
    }

    public usernameLoginGame_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public usernameLoginGame_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public int getServerID() {
      return this.serverID;
    }

    public usernameLoginGame_args setServerID(int serverID) {
      this.serverID = serverID;
      setServerIDIsSet(true);
      return this;
    }

    public void unsetServerID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
    public boolean isSetServerID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public String getClientIP() {
      return this.clientIP;
    }

    public usernameLoginGame_args setClientIP(String clientIP) {
      this.clientIP = clientIP;
      return this;
    }

    public void unsetClientIP() {
      this.clientIP = null;
    }

    /** Returns true if field clientIP is set (has been assigned a value) and false otherwise */
    public boolean isSetClientIP() {
      return this.clientIP != null;
    }

    public void setClientIPIsSet(boolean value) {
      if (!value) {
        this.clientIP = null;
      }
    }

    public int getOs() {
      return this.os;
    }

    public usernameLoginGame_args setOs(int os) {
      this.os = os;
      setOsIsSet(true);
      return this;
    }

    public void unsetOs() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OS_ISSET_ID);
    }

    /** Returns true if field os is set (has been assigned a value) and false otherwise */
    public boolean isSetOs() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OS_ISSET_ID);
    }

    public void setOsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OS_ISSET_ID, value);
    }

    public String getDid() {
      return this.did;
    }

    public usernameLoginGame_args setDid(String did) {
      this.did = did;
      return this;
    }

    public void unsetDid() {
      this.did = null;
    }

    /** Returns true if field did is set (has been assigned a value) and false otherwise */
    public boolean isSetDid() {
      return this.did != null;
    }

    public void setDidIsSet(boolean value) {
      if (!value) {
        this.did = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case SERVER_ID:
        if (value == null) {
          unsetServerID();
        } else {
          setServerID((Integer)value);
        }
        break;

      case CLIENT_IP:
        if (value == null) {
          unsetClientIP();
        } else {
          setClientIP((String)value);
        }
        break;

      case OS:
        if (value == null) {
          unsetOs();
        } else {
          setOs((Integer)value);
        }
        break;

      case DID:
        if (value == null) {
          unsetDid();
        } else {
          setDid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case SERVER_ID:
        return getServerID();

      case CLIENT_IP:
        return getClientIP();

      case OS:
        return getOs();

      case DID:
        return getDid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case SERVER_ID:
        return isSetServerID();
      case CLIENT_IP:
        return isSetClientIP();
      case OS:
        return isSetOs();
      case DID:
        return isSetDid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof usernameLoginGame_args)
        return this.equals((usernameLoginGame_args)that);
      return false;
    }

    public boolean equals(usernameLoginGame_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_serverID = true;
      boolean that_present_serverID = true;
      if (this_present_serverID || that_present_serverID) {
        if (!(this_present_serverID && that_present_serverID))
          return false;
        if (this.serverID != that.serverID)
          return false;
      }

      boolean this_present_clientIP = true && this.isSetClientIP();
      boolean that_present_clientIP = true && that.isSetClientIP();
      if (this_present_clientIP || that_present_clientIP) {
        if (!(this_present_clientIP && that_present_clientIP))
          return false;
        if (!this.clientIP.equals(that.clientIP))
          return false;
      }

      boolean this_present_os = true;
      boolean that_present_os = true;
      if (this_present_os || that_present_os) {
        if (!(this_present_os && that_present_os))
          return false;
        if (this.os != that.os)
          return false;
      }

      boolean this_present_did = true && this.isSetDid();
      boolean that_present_did = true && that.isSetDid();
      if (this_present_did || that_present_did) {
        if (!(this_present_did && that_present_did))
          return false;
        if (!this.did.equals(that.did))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + serverID;

      hashCode = hashCode * 8191 + ((isSetClientIP()) ? 131071 : 524287);
      if (isSetClientIP())
        hashCode = hashCode * 8191 + clientIP.hashCode();

      hashCode = hashCode * 8191 + os;

      hashCode = hashCode * 8191 + ((isSetDid()) ? 131071 : 524287);
      if (isSetDid())
        hashCode = hashCode * 8191 + did.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(usernameLoginGame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientIP()).compareTo(other.isSetClientIP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientIP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIP, other.clientIP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOs()).compareTo(other.isSetOs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, other.os);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDid()).compareTo(other.isSetDid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, other.did);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("usernameLoginGame_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverID:");
      sb.append(this.serverID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientIP:");
      if (this.clientIP == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("os:");
      sb.append(this.os);
      first = false;
      if (!first) sb.append(", ");
      sb.append("did:");
      if (this.did == null) {
        sb.append("null");
      } else {
        sb.append(this.did);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (username == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'serverID' because it's a primitive and you chose the non-beans generator.
      if (clientIP == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientIP' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'os' because it's a primitive and you chose the non-beans generator.
      if (did == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'did' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class usernameLoginGame_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public usernameLoginGame_argsStandardScheme getScheme() {
        return new usernameLoginGame_argsStandardScheme();
      }
    }

    private static class usernameLoginGame_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<usernameLoginGame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, usernameLoginGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverID = iprot.readI32();
                struct.setServerIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLIENT_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientIP = iprot.readString();
                struct.setClientIPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.os = iprot.readI32();
                struct.setOsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.did = iprot.readString();
                struct.setDidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetServerID()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverID' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetOs()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'os' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, usernameLoginGame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.serverID);
        oprot.writeFieldEnd();
        if (struct.clientIP != null) {
          oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
          oprot.writeString(struct.clientIP);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OS_FIELD_DESC);
        oprot.writeI32(struct.os);
        oprot.writeFieldEnd();
        if (struct.did != null) {
          oprot.writeFieldBegin(DID_FIELD_DESC);
          oprot.writeString(struct.did);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class usernameLoginGame_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public usernameLoginGame_argsTupleScheme getScheme() {
        return new usernameLoginGame_argsTupleScheme();
      }
    }

    private static class usernameLoginGame_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<usernameLoginGame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, usernameLoginGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.username);
        oprot.writeString(struct.password);
        oprot.writeI32(struct.serverID);
        oprot.writeString(struct.clientIP);
        oprot.writeI32(struct.os);
        oprot.writeString(struct.did);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, usernameLoginGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
        struct.serverID = iprot.readI32();
        struct.setServerIDIsSet(true);
        struct.clientIP = iprot.readString();
        struct.setClientIPIsSet(true);
        struct.os = iprot.readI32();
        struct.setOsIsSet(true);
        struct.did = iprot.readString();
        struct.setDidIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class usernameLoginGame_result implements org.apache.thrift.TBase<usernameLoginGame_result, usernameLoginGame_result._Fields>, java.io.Serializable, Cloneable, Comparable<usernameLoginGame_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("usernameLoginGame_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new usernameLoginGame_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new usernameLoginGame_resultTupleSchemeFactory();

    public com.bamisu.log.sdkthrift.entities.TLoginResult success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.entities.TLoginResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(usernameLoginGame_result.class, metaDataMap);
    }

    public usernameLoginGame_result() {
    }

    public usernameLoginGame_result(
      com.bamisu.log.sdkthrift.entities.TLoginResult success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public usernameLoginGame_result(usernameLoginGame_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.bamisu.log.sdkthrift.entities.TLoginResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public usernameLoginGame_result deepCopy() {
      return new usernameLoginGame_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.bamisu.log.sdkthrift.entities.TLoginResult getSuccess() {
      return this.success;
    }

    public usernameLoginGame_result setSuccess(com.bamisu.log.sdkthrift.entities.TLoginResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public usernameLoginGame_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.bamisu.log.sdkthrift.entities.TLoginResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof usernameLoginGame_result)
        return this.equals((usernameLoginGame_result)that);
      return false;
    }

    public boolean equals(usernameLoginGame_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(usernameLoginGame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("usernameLoginGame_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class usernameLoginGame_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public usernameLoginGame_resultStandardScheme getScheme() {
        return new usernameLoginGame_resultStandardScheme();
      }
    }

    private static class usernameLoginGame_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<usernameLoginGame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, usernameLoginGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.bamisu.log.sdkthrift.entities.TLoginResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, usernameLoginGame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class usernameLoginGame_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public usernameLoginGame_resultTupleScheme getScheme() {
        return new usernameLoginGame_resultTupleScheme();
      }
    }

    private static class usernameLoginGame_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<usernameLoginGame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, usernameLoginGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, usernameLoginGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.bamisu.log.sdkthrift.entities.TLoginResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUsernameAndPassword_args implements org.apache.thrift.TBase<updateUsernameAndPassword_args, updateUsernameAndPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUsernameAndPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUsernameAndPassword_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUsernameAndPassword_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUsernameAndPassword_argsTupleSchemeFactory();

    public String accountId; // required
    public String username; // required
    public String password; // required
    public String email; // required
    public String code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountId"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password"),
      EMAIL((short)4, "email"),
      CODE((short)5, "code");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // EMAIL
            return EMAIL;
          case 5: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUsernameAndPassword_args.class, metaDataMap);
    }

    public updateUsernameAndPassword_args() {
    }

    public updateUsernameAndPassword_args(
      String accountId,
      String username,
      String password,
      String email,
      String code)
    {
      this();
      this.accountId = accountId;
      this.username = username;
      this.password = password;
      this.email = email;
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUsernameAndPassword_args(updateUsernameAndPassword_args other) {
      if (other.isSetAccountId()) {
        this.accountId = other.accountId;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
    }

    public updateUsernameAndPassword_args deepCopy() {
      return new updateUsernameAndPassword_args(this);
    }

    @Override
    public void clear() {
      this.accountId = null;
      this.username = null;
      this.password = null;
      this.email = null;
      this.code = null;
    }

    public String getAccountId() {
      return this.accountId;
    }

    public updateUsernameAndPassword_args setAccountId(String accountId) {
      this.accountId = accountId;
      return this;
    }

    public void unsetAccountId() {
      this.accountId = null;
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return this.accountId != null;
    }

    public void setAccountIdIsSet(boolean value) {
      if (!value) {
        this.accountId = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public updateUsernameAndPassword_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public updateUsernameAndPassword_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getEmail() {
      return this.email;
    }

    public updateUsernameAndPassword_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public updateUsernameAndPassword_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountId();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case EMAIL:
        return getEmail();

      case CODE:
        return getCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountId();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case EMAIL:
        return isSetEmail();
      case CODE:
        return isSetCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUsernameAndPassword_args)
        return this.equals((updateUsernameAndPassword_args)that);
      return false;
    }

    public boolean equals(updateUsernameAndPassword_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountId = true && this.isSetAccountId();
      boolean that_present_accountId = true && that.isSetAccountId();
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (!this.accountId.equals(that.accountId))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountId()) ? 131071 : 524287);
      if (isSetAccountId())
        hashCode = hashCode * 8191 + accountId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
      if (isSetEmail())
        hashCode = hashCode * 8191 + email.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
      if (isSetCode())
        hashCode = hashCode * 8191 + code.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUsernameAndPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUsernameAndPassword_args(");
      boolean first = true;

      sb.append("accountId:");
      if (this.accountId == null) {
        sb.append("null");
      } else {
        sb.append(this.accountId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountId' was not present! Struct: " + toString());
      }
      if (username == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      if (email == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'email' was not present! Struct: " + toString());
      }
      if (code == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUsernameAndPassword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUsernameAndPassword_argsStandardScheme getScheme() {
        return new updateUsernameAndPassword_argsStandardScheme();
      }
    }

    private static class updateUsernameAndPassword_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUsernameAndPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUsernameAndPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountId = iprot.readString();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUsernameAndPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountId != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountId);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUsernameAndPassword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUsernameAndPassword_argsTupleScheme getScheme() {
        return new updateUsernameAndPassword_argsTupleScheme();
      }
    }

    private static class updateUsernameAndPassword_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUsernameAndPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUsernameAndPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountId);
        oprot.writeString(struct.username);
        oprot.writeString(struct.password);
        oprot.writeString(struct.email);
        oprot.writeString(struct.code);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUsernameAndPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountId = iprot.readString();
        struct.setAccountIdIsSet(true);
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUsernameAndPassword_result implements org.apache.thrift.TBase<updateUsernameAndPassword_result, updateUsernameAndPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUsernameAndPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUsernameAndPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUsernameAndPassword_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUsernameAndPassword_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUsernameAndPassword_result.class, metaDataMap);
    }

    public updateUsernameAndPassword_result() {
    }

    public updateUsernameAndPassword_result(
      boolean success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUsernameAndPassword_result(updateUsernameAndPassword_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public updateUsernameAndPassword_result deepCopy() {
      return new updateUsernameAndPassword_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateUsernameAndPassword_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public updateUsernameAndPassword_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUsernameAndPassword_result)
        return this.equals((updateUsernameAndPassword_result)that);
      return false;
    }

    public boolean equals(updateUsernameAndPassword_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUsernameAndPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUsernameAndPassword_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUsernameAndPassword_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUsernameAndPassword_resultStandardScheme getScheme() {
        return new updateUsernameAndPassword_resultStandardScheme();
      }
    }

    private static class updateUsernameAndPassword_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUsernameAndPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUsernameAndPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUsernameAndPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUsernameAndPassword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUsernameAndPassword_resultTupleScheme getScheme() {
        return new updateUsernameAndPassword_resultTupleScheme();
      }
    }

    private static class updateUsernameAndPassword_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUsernameAndPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUsernameAndPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUsernameAndPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changePassword_args implements org.apache.thrift.TBase<changePassword_args, changePassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<changePassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changePassword_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changePassword_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changePassword_argsTupleSchemeFactory();

    public String accountId; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountId"),
      PASSWORD((short)2, "password");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changePassword_args.class, metaDataMap);
    }

    public changePassword_args() {
    }

    public changePassword_args(
      String accountId,
      String password)
    {
      this();
      this.accountId = accountId;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePassword_args(changePassword_args other) {
      if (other.isSetAccountId()) {
        this.accountId = other.accountId;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public changePassword_args deepCopy() {
      return new changePassword_args(this);
    }

    @Override
    public void clear() {
      this.accountId = null;
      this.password = null;
    }

    public String getAccountId() {
      return this.accountId;
    }

    public changePassword_args setAccountId(String accountId) {
      this.accountId = accountId;
      return this;
    }

    public void unsetAccountId() {
      this.accountId = null;
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return this.accountId != null;
    }

    public void setAccountIdIsSet(boolean value) {
      if (!value) {
        this.accountId = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public changePassword_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountId();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountId();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changePassword_args)
        return this.equals((changePassword_args)that);
      return false;
    }

    public boolean equals(changePassword_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountId = true && this.isSetAccountId();
      boolean that_present_accountId = true && that.isSetAccountId();
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (!this.accountId.equals(that.accountId))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountId()) ? 131071 : 524287);
      if (isSetAccountId())
        hashCode = hashCode * 8191 + accountId.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changePassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changePassword_args(");
      boolean first = true;

      sb.append("accountId:");
      if (this.accountId == null) {
        sb.append("null");
      } else {
        sb.append(this.accountId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountId' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changePassword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_argsStandardScheme getScheme() {
        return new changePassword_argsStandardScheme();
      }
    }

    private static class changePassword_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<changePassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountId = iprot.readString();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changePassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountId != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountId);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changePassword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_argsTupleScheme getScheme() {
        return new changePassword_argsTupleScheme();
      }
    }

    private static class changePassword_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<changePassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountId);
        oprot.writeString(struct.password);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountId = iprot.readString();
        struct.setAccountIdIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changePassword_result implements org.apache.thrift.TBase<changePassword_result, changePassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<changePassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changePassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changePassword_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changePassword_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changePassword_result.class, metaDataMap);
    }

    public changePassword_result() {
    }

    public changePassword_result(
      boolean success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePassword_result(changePassword_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public changePassword_result deepCopy() {
      return new changePassword_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public changePassword_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public changePassword_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changePassword_result)
        return this.equals((changePassword_result)that);
      return false;
    }

    public boolean equals(changePassword_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changePassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changePassword_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changePassword_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_resultStandardScheme getScheme() {
        return new changePassword_resultStandardScheme();
      }
    }

    private static class changePassword_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<changePassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changePassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changePassword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_resultTupleScheme getScheme() {
        return new changePassword_resultTupleScheme();
      }
    }

    private static class changePassword_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<changePassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUsername_args implements org.apache.thrift.TBase<getUsername_args, getUsername_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUsername_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUsername_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUsername_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUsername_argsTupleSchemeFactory();

    public String accountId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUsername_args.class, metaDataMap);
    }

    public getUsername_args() {
    }

    public getUsername_args(
      String accountId)
    {
      this();
      this.accountId = accountId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUsername_args(getUsername_args other) {
      if (other.isSetAccountId()) {
        this.accountId = other.accountId;
      }
    }

    public getUsername_args deepCopy() {
      return new getUsername_args(this);
    }

    @Override
    public void clear() {
      this.accountId = null;
    }

    public String getAccountId() {
      return this.accountId;
    }

    public getUsername_args setAccountId(String accountId) {
      this.accountId = accountId;
      return this;
    }

    public void unsetAccountId() {
      this.accountId = null;
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return this.accountId != null;
    }

    public void setAccountIdIsSet(boolean value) {
      if (!value) {
        this.accountId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUsername_args)
        return this.equals((getUsername_args)that);
      return false;
    }

    public boolean equals(getUsername_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountId = true && this.isSetAccountId();
      boolean that_present_accountId = true && that.isSetAccountId();
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (!this.accountId.equals(that.accountId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountId()) ? 131071 : 524287);
      if (isSetAccountId())
        hashCode = hashCode * 8191 + accountId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUsername_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUsername_args(");
      boolean first = true;

      sb.append("accountId:");
      if (this.accountId == null) {
        sb.append("null");
      } else {
        sb.append(this.accountId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUsername_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUsername_argsStandardScheme getScheme() {
        return new getUsername_argsStandardScheme();
      }
    }

    private static class getUsername_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUsername_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUsername_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountId = iprot.readString();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUsername_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountId != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUsername_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUsername_argsTupleScheme getScheme() {
        return new getUsername_argsTupleScheme();
      }
    }

    private static class getUsername_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUsername_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUsername_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUsername_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountId = iprot.readString();
        struct.setAccountIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUsername_result implements org.apache.thrift.TBase<getUsername_result, getUsername_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUsername_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUsername_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUsername_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUsername_resultTupleSchemeFactory();

    public String success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUsername_result.class, metaDataMap);
    }

    public getUsername_result() {
    }

    public getUsername_result(
      String success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUsername_result(getUsername_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public getUsername_result deepCopy() {
      return new getUsername_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getUsername_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public getUsername_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUsername_result)
        return this.equals((getUsername_result)that);
      return false;
    }

    public boolean equals(getUsername_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUsername_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUsername_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUsername_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUsername_resultStandardScheme getScheme() {
        return new getUsername_resultStandardScheme();
      }
    }

    private static class getUsername_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUsername_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUsername_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUsername_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUsername_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUsername_resultTupleScheme getScheme() {
        return new getUsername_resultTupleScheme();
      }
    }

    private static class getUsername_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUsername_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUsername_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUsername_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getWalletByAccountId_args implements org.apache.thrift.TBase<getWalletByAccountId_args, getWalletByAccountId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletByAccountId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletByAccountId_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletByAccountId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletByAccountId_argsTupleSchemeFactory();

    public String accountId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletByAccountId_args.class, metaDataMap);
    }

    public getWalletByAccountId_args() {
    }

    public getWalletByAccountId_args(
      String accountId)
    {
      this();
      this.accountId = accountId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletByAccountId_args(getWalletByAccountId_args other) {
      if (other.isSetAccountId()) {
        this.accountId = other.accountId;
      }
    }

    public getWalletByAccountId_args deepCopy() {
      return new getWalletByAccountId_args(this);
    }

    @Override
    public void clear() {
      this.accountId = null;
    }

    public String getAccountId() {
      return this.accountId;
    }

    public getWalletByAccountId_args setAccountId(String accountId) {
      this.accountId = accountId;
      return this;
    }

    public void unsetAccountId() {
      this.accountId = null;
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return this.accountId != null;
    }

    public void setAccountIdIsSet(boolean value) {
      if (!value) {
        this.accountId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletByAccountId_args)
        return this.equals((getWalletByAccountId_args)that);
      return false;
    }

    public boolean equals(getWalletByAccountId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountId = true && this.isSetAccountId();
      boolean that_present_accountId = true && that.isSetAccountId();
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (!this.accountId.equals(that.accountId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountId()) ? 131071 : 524287);
      if (isSetAccountId())
        hashCode = hashCode * 8191 + accountId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getWalletByAccountId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletByAccountId_args(");
      boolean first = true;

      sb.append("accountId:");
      if (this.accountId == null) {
        sb.append("null");
      } else {
        sb.append(this.accountId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletByAccountId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWalletByAccountId_argsStandardScheme getScheme() {
        return new getWalletByAccountId_argsStandardScheme();
      }
    }

    private static class getWalletByAccountId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getWalletByAccountId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletByAccountId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountId = iprot.readString();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletByAccountId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountId != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletByAccountId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWalletByAccountId_argsTupleScheme getScheme() {
        return new getWalletByAccountId_argsTupleScheme();
      }
    }

    private static class getWalletByAccountId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getWalletByAccountId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletByAccountId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletByAccountId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountId = iprot.readString();
        struct.setAccountIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getWalletByAccountId_result implements org.apache.thrift.TBase<getWalletByAccountId_result, getWalletByAccountId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWalletByAccountId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWalletByAccountId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletByAccountId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletByAccountId_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletByAccountId_result.class, metaDataMap);
    }

    public getWalletByAccountId_result() {
    }

    public getWalletByAccountId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWalletByAccountId_result(getWalletByAccountId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getWalletByAccountId_result deepCopy() {
      return new getWalletByAccountId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getWalletByAccountId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWalletByAccountId_result)
        return this.equals((getWalletByAccountId_result)that);
      return false;
    }

    public boolean equals(getWalletByAccountId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getWalletByAccountId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWalletByAccountId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWalletByAccountId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWalletByAccountId_resultStandardScheme getScheme() {
        return new getWalletByAccountId_resultStandardScheme();
      }
    }

    private static class getWalletByAccountId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getWalletByAccountId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletByAccountId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletByAccountId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWalletByAccountId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getWalletByAccountId_resultTupleScheme getScheme() {
        return new getWalletByAccountId_resultTupleScheme();
      }
    }

    private static class getWalletByAccountId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getWalletByAccountId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWalletByAccountId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWalletByAccountId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class linkWallet_args implements org.apache.thrift.TBase<linkWallet_args, linkWallet_args._Fields>, java.io.Serializable, Cloneable, Comparable<linkWallet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("linkWallet_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ZONE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneId", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new linkWallet_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new linkWallet_argsTupleSchemeFactory();

    public String accountId; // required
    public String address; // required
    public String username; // required
    public String password; // required
    public int zoneId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountId"),
      ADDRESS((short)2, "address"),
      USERNAME((short)3, "username"),
      PASSWORD((short)4, "password"),
      ZONE_ID((short)5, "zoneId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // ADDRESS
            return ADDRESS;
          case 3: // USERNAME
            return USERNAME;
          case 4: // PASSWORD
            return PASSWORD;
          case 5: // ZONE_ID
            return ZONE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ZONEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ZONE_ID, new org.apache.thrift.meta_data.FieldMetaData("zoneId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(linkWallet_args.class, metaDataMap);
    }

    public linkWallet_args() {
    }

    public linkWallet_args(
      String accountId,
      String address,
      String username,
      String password,
      int zoneId)
    {
      this();
      this.accountId = accountId;
      this.address = address;
      this.username = username;
      this.password = password;
      this.zoneId = zoneId;
      setZoneIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linkWallet_args(linkWallet_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountId()) {
        this.accountId = other.accountId;
      }
      if (other.isSetAddress()) {
        this.address = other.address;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      this.zoneId = other.zoneId;
    }

    public linkWallet_args deepCopy() {
      return new linkWallet_args(this);
    }

    @Override
    public void clear() {
      this.accountId = null;
      this.address = null;
      this.username = null;
      this.password = null;
      setZoneIdIsSet(false);
      this.zoneId = 0;
    }

    public String getAccountId() {
      return this.accountId;
    }

    public linkWallet_args setAccountId(String accountId) {
      this.accountId = accountId;
      return this;
    }

    public void unsetAccountId() {
      this.accountId = null;
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return this.accountId != null;
    }

    public void setAccountIdIsSet(boolean value) {
      if (!value) {
        this.accountId = null;
      }
    }

    public String getAddress() {
      return this.address;
    }

    public linkWallet_args setAddress(String address) {
      this.address = address;
      return this;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public linkWallet_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public linkWallet_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public int getZoneId() {
      return this.zoneId;
    }

    public linkWallet_args setZoneId(int zoneId) {
      this.zoneId = zoneId;
      setZoneIdIsSet(true);
      return this;
    }

    public void unsetZoneId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ZONEID_ISSET_ID);
    }

    /** Returns true if field zoneId is set (has been assigned a value) and false otherwise */
    public boolean isSetZoneId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ZONEID_ISSET_ID);
    }

    public void setZoneIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ZONEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((String)value);
        }
        break;

      case ADDRESS:
        if (value == null) {
          unsetAddress();
        } else {
          setAddress((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case ZONE_ID:
        if (value == null) {
          unsetZoneId();
        } else {
          setZoneId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountId();

      case ADDRESS:
        return getAddress();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case ZONE_ID:
        return getZoneId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountId();
      case ADDRESS:
        return isSetAddress();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case ZONE_ID:
        return isSetZoneId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linkWallet_args)
        return this.equals((linkWallet_args)that);
      return false;
    }

    public boolean equals(linkWallet_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountId = true && this.isSetAccountId();
      boolean that_present_accountId = true && that.isSetAccountId();
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (!this.accountId.equals(that.accountId))
          return false;
      }

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_zoneId = true;
      boolean that_present_zoneId = true;
      if (this_present_zoneId || that_present_zoneId) {
        if (!(this_present_zoneId && that_present_zoneId))
          return false;
        if (this.zoneId != that.zoneId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountId()) ? 131071 : 524287);
      if (isSetAccountId())
        hashCode = hashCode * 8191 + accountId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
      if (isSetAddress())
        hashCode = hashCode * 8191 + address.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + zoneId;

      return hashCode;
    }

    @Override
    public int compareTo(linkWallet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetZoneId()).compareTo(other.isSetZoneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZoneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneId, other.zoneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("linkWallet_args(");
      boolean first = true;

      sb.append("accountId:");
      if (this.accountId == null) {
        sb.append("null");
      } else {
        sb.append(this.accountId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("zoneId:");
      sb.append(this.zoneId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountId' was not present! Struct: " + toString());
      }
      if (address == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'address' was not present! Struct: " + toString());
      }
      if (username == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'zoneId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class linkWallet_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public linkWallet_argsStandardScheme getScheme() {
        return new linkWallet_argsStandardScheme();
      }
    }

    private static class linkWallet_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<linkWallet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, linkWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountId = iprot.readString();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.address = iprot.readString();
                struct.setAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ZONE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.zoneId = iprot.readI32();
                struct.setZoneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetZoneId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'zoneId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, linkWallet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountId != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountId);
          oprot.writeFieldEnd();
        }
        if (struct.address != null) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ZONE_ID_FIELD_DESC);
        oprot.writeI32(struct.zoneId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class linkWallet_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public linkWallet_argsTupleScheme getScheme() {
        return new linkWallet_argsTupleScheme();
      }
    }

    private static class linkWallet_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<linkWallet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, linkWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountId);
        oprot.writeString(struct.address);
        oprot.writeString(struct.username);
        oprot.writeString(struct.password);
        oprot.writeI32(struct.zoneId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, linkWallet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountId = iprot.readString();
        struct.setAccountIdIsSet(true);
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
        struct.zoneId = iprot.readI32();
        struct.setZoneIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class linkWallet_result implements org.apache.thrift.TBase<linkWallet_result, linkWallet_result._Fields>, java.io.Serializable, Cloneable, Comparable<linkWallet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("linkWallet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new linkWallet_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new linkWallet_resultTupleSchemeFactory();

    public long success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(linkWallet_result.class, metaDataMap);
    }

    public linkWallet_result() {
    }

    public linkWallet_result(
      long success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linkWallet_result(linkWallet_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public linkWallet_result deepCopy() {
      return new linkWallet_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public linkWallet_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public linkWallet_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linkWallet_result)
        return this.equals((linkWallet_result)that);
      return false;
    }

    public boolean equals(linkWallet_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(linkWallet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("linkWallet_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class linkWallet_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public linkWallet_resultStandardScheme getScheme() {
        return new linkWallet_resultStandardScheme();
      }
    }

    private static class linkWallet_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<linkWallet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, linkWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, linkWallet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class linkWallet_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public linkWallet_resultTupleScheme getScheme() {
        return new linkWallet_resultTupleScheme();
      }
    }

    private static class linkWallet_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<linkWallet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, linkWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, linkWallet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLinkedAccount_args implements org.apache.thrift.TBase<getLinkedAccount_args, getLinkedAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLinkedAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkedAccount_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLinkedAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLinkedAccount_argsTupleSchemeFactory();

    public String accountId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkedAccount_args.class, metaDataMap);
    }

    public getLinkedAccount_args() {
    }

    public getLinkedAccount_args(
      String accountId)
    {
      this();
      this.accountId = accountId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkedAccount_args(getLinkedAccount_args other) {
      if (other.isSetAccountId()) {
        this.accountId = other.accountId;
      }
    }

    public getLinkedAccount_args deepCopy() {
      return new getLinkedAccount_args(this);
    }

    @Override
    public void clear() {
      this.accountId = null;
    }

    public String getAccountId() {
      return this.accountId;
    }

    public getLinkedAccount_args setAccountId(String accountId) {
      this.accountId = accountId;
      return this;
    }

    public void unsetAccountId() {
      this.accountId = null;
    }

    /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountId() {
      return this.accountId != null;
    }

    public void setAccountIdIsSet(boolean value) {
      if (!value) {
        this.accountId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkedAccount_args)
        return this.equals((getLinkedAccount_args)that);
      return false;
    }

    public boolean equals(getLinkedAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountId = true && this.isSetAccountId();
      boolean that_present_accountId = true && that.isSetAccountId();
      if (this_present_accountId || that_present_accountId) {
        if (!(this_present_accountId && that_present_accountId))
          return false;
        if (!this.accountId.equals(that.accountId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountId()) ? 131071 : 524287);
      if (isSetAccountId())
        hashCode = hashCode * 8191 + accountId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLinkedAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkedAccount_args(");
      boolean first = true;

      sb.append("accountId:");
      if (this.accountId == null) {
        sb.append("null");
      } else {
        sb.append(this.accountId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkedAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLinkedAccount_argsStandardScheme getScheme() {
        return new getLinkedAccount_argsStandardScheme();
      }
    }

    private static class getLinkedAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLinkedAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkedAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountId = iprot.readString();
                struct.setAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkedAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountId != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkedAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLinkedAccount_argsTupleScheme getScheme() {
        return new getLinkedAccount_argsTupleScheme();
      }
    }

    private static class getLinkedAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLinkedAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkedAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkedAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountId = iprot.readString();
        struct.setAccountIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLinkedAccount_result implements org.apache.thrift.TBase<getLinkedAccount_result, getLinkedAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLinkedAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkedAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLinkedAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLinkedAccount_resultTupleSchemeFactory();

    public com.bamisu.log.sdkthrift.entities.TLinkedAccount success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.entities.TLinkedAccount.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkedAccount_result.class, metaDataMap);
    }

    public getLinkedAccount_result() {
    }

    public getLinkedAccount_result(
      com.bamisu.log.sdkthrift.entities.TLinkedAccount success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkedAccount_result(getLinkedAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.bamisu.log.sdkthrift.entities.TLinkedAccount(other.success);
      }
    }

    public getLinkedAccount_result deepCopy() {
      return new getLinkedAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.bamisu.log.sdkthrift.entities.TLinkedAccount getSuccess() {
      return this.success;
    }

    public getLinkedAccount_result setSuccess(com.bamisu.log.sdkthrift.entities.TLinkedAccount success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.bamisu.log.sdkthrift.entities.TLinkedAccount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkedAccount_result)
        return this.equals((getLinkedAccount_result)that);
      return false;
    }

    public boolean equals(getLinkedAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLinkedAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkedAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkedAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLinkedAccount_resultStandardScheme getScheme() {
        return new getLinkedAccount_resultStandardScheme();
      }
    }

    private static class getLinkedAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLinkedAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkedAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.bamisu.log.sdkthrift.entities.TLinkedAccount();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkedAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkedAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLinkedAccount_resultTupleScheme getScheme() {
        return new getLinkedAccount_resultTupleScheme();
      }
    }

    private static class getLinkedAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLinkedAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkedAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkedAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.bamisu.log.sdkthrift.entities.TLinkedAccount();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfo_args implements org.apache.thrift.TBase<getUserInfo_args, getUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfo_args");

    private static final org.apache.thrift.protocol.TField WALLET_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("walletAddress", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfo_argsTupleSchemeFactory();

    public String walletAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_ADDRESS((short)1, "walletAddress");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_ADDRESS
            return WALLET_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("walletAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfo_args.class, metaDataMap);
    }

    public getUserInfo_args() {
    }

    public getUserInfo_args(
      String walletAddress)
    {
      this();
      this.walletAddress = walletAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfo_args(getUserInfo_args other) {
      if (other.isSetWalletAddress()) {
        this.walletAddress = other.walletAddress;
      }
    }

    public getUserInfo_args deepCopy() {
      return new getUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.walletAddress = null;
    }

    public String getWalletAddress() {
      return this.walletAddress;
    }

    public getUserInfo_args setWalletAddress(String walletAddress) {
      this.walletAddress = walletAddress;
      return this;
    }

    public void unsetWalletAddress() {
      this.walletAddress = null;
    }

    /** Returns true if field walletAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletAddress() {
      return this.walletAddress != null;
    }

    public void setWalletAddressIsSet(boolean value) {
      if (!value) {
        this.walletAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_ADDRESS:
        if (value == null) {
          unsetWalletAddress();
        } else {
          setWalletAddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_ADDRESS:
        return getWalletAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_ADDRESS:
        return isSetWalletAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfo_args)
        return this.equals((getUserInfo_args)that);
      return false;
    }

    public boolean equals(getUserInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_walletAddress = true && this.isSetWalletAddress();
      boolean that_present_walletAddress = true && that.isSetWalletAddress();
      if (this_present_walletAddress || that_present_walletAddress) {
        if (!(this_present_walletAddress && that_present_walletAddress))
          return false;
        if (!this.walletAddress.equals(that.walletAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetWalletAddress()) ? 131071 : 524287);
      if (isSetWalletAddress())
        hashCode = hashCode * 8191 + walletAddress.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletAddress()).compareTo(other.isSetWalletAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletAddress, other.walletAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfo_args(");
      boolean first = true;

      sb.append("walletAddress:");
      if (this.walletAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.walletAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfo_argsStandardScheme getScheme() {
        return new getUserInfo_argsStandardScheme();
      }
    }

    private static class getUserInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.walletAddress = iprot.readString();
                struct.setWalletAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletAddress != null) {
          oprot.writeFieldBegin(WALLET_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.walletAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfo_argsTupleScheme getScheme() {
        return new getUserInfo_argsTupleScheme();
      }
    }

    private static class getUserInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetWalletAddress()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletAddress()) {
          oprot.writeString(struct.walletAddress);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.walletAddress = iprot.readString();
          struct.setWalletAddressIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserInfo_result implements org.apache.thrift.TBase<getUserInfo_result, getUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserInfo_resultTupleSchemeFactory();

    public com.bamisu.log.sdkthrift.entities.TUserInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.entities.TUserInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfo_result.class, metaDataMap);
    }

    public getUserInfo_result() {
    }

    public getUserInfo_result(
      com.bamisu.log.sdkthrift.entities.TUserInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfo_result(getUserInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.bamisu.log.sdkthrift.entities.TUserInfo(other.success);
      }
    }

    public getUserInfo_result deepCopy() {
      return new getUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.bamisu.log.sdkthrift.entities.TUserInfo getSuccess() {
      return this.success;
    }

    public getUserInfo_result setSuccess(com.bamisu.log.sdkthrift.entities.TUserInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.bamisu.log.sdkthrift.entities.TUserInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfo_result)
        return this.equals((getUserInfo_result)that);
      return false;
    }

    public boolean equals(getUserInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfo_resultStandardScheme getScheme() {
        return new getUserInfo_resultStandardScheme();
      }
    }

    private static class getUserInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.bamisu.log.sdkthrift.entities.TUserInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserInfo_resultTupleScheme getScheme() {
        return new getUserInfo_resultTupleScheme();
      }
    }

    private static class getUserInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.bamisu.log.sdkthrift.entities.TUserInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
