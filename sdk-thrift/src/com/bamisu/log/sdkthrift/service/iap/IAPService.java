/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bamisu.log.sdkthrift.service.iap;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2021-04-26")
public class IAPService {

  public interface Iface {

    public boolean haveInstanceBuyIAP(String accountID, String purchaseToken) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

    public boolean saveInstanceBuyIAP(String accountID, String purchaseToken) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void haveInstanceBuyIAP(String accountID, String purchaseToken, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void saveInstanceBuyIAP(String accountID, String purchaseToken, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean haveInstanceBuyIAP(String accountID, String purchaseToken) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_haveInstanceBuyIAP(accountID, purchaseToken);
      return recv_haveInstanceBuyIAP();
    }

    public void send_haveInstanceBuyIAP(String accountID, String purchaseToken) throws org.apache.thrift.TException
    {
      haveInstanceBuyIAP_args args = new haveInstanceBuyIAP_args();
      args.setAccountID(accountID);
      args.setPurchaseToken(purchaseToken);
      sendBase("haveInstanceBuyIAP", args);
    }

    public boolean recv_haveInstanceBuyIAP() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      haveInstanceBuyIAP_result result = new haveInstanceBuyIAP_result();
      receiveBase(result, "haveInstanceBuyIAP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "haveInstanceBuyIAP failed: unknown result");
    }

    public boolean saveInstanceBuyIAP(String accountID, String purchaseToken) throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      send_saveInstanceBuyIAP(accountID, purchaseToken);
      return recv_saveInstanceBuyIAP();
    }

    public void send_saveInstanceBuyIAP(String accountID, String purchaseToken) throws org.apache.thrift.TException
    {
      saveInstanceBuyIAP_args args = new saveInstanceBuyIAP_args();
      args.setAccountID(accountID);
      args.setPurchaseToken(purchaseToken);
      sendBase("saveInstanceBuyIAP", args);
    }

    public boolean recv_saveInstanceBuyIAP() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException
    {
      saveInstanceBuyIAP_result result = new saveInstanceBuyIAP_result();
      receiveBase(result, "saveInstanceBuyIAP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveInstanceBuyIAP failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void haveInstanceBuyIAP(String accountID, String purchaseToken, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      haveInstanceBuyIAP_call method_call = new haveInstanceBuyIAP_call(accountID, purchaseToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class haveInstanceBuyIAP_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String accountID;
      private String purchaseToken;
      public haveInstanceBuyIAP_call(String accountID, String purchaseToken, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.purchaseToken = purchaseToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("haveInstanceBuyIAP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        haveInstanceBuyIAP_args args = new haveInstanceBuyIAP_args();
        args.setAccountID(accountID);
        args.setPurchaseToken(purchaseToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_haveInstanceBuyIAP();
      }
    }

    public void saveInstanceBuyIAP(String accountID, String purchaseToken, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveInstanceBuyIAP_call method_call = new saveInstanceBuyIAP_call(accountID, purchaseToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveInstanceBuyIAP_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String accountID;
      private String purchaseToken;
      public saveInstanceBuyIAP_call(String accountID, String purchaseToken, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountID = accountID;
        this.purchaseToken = purchaseToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveInstanceBuyIAP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveInstanceBuyIAP_args args = new saveInstanceBuyIAP_args();
        args.setAccountID(accountID);
        args.setPurchaseToken(purchaseToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws com.bamisu.log.sdkthrift.exception.ThriftSVException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveInstanceBuyIAP();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("haveInstanceBuyIAP", new haveInstanceBuyIAP());
      processMap.put("saveInstanceBuyIAP", new saveInstanceBuyIAP());
      return processMap;
    }

    public static class haveInstanceBuyIAP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, haveInstanceBuyIAP_args> {
      public haveInstanceBuyIAP() {
        super("haveInstanceBuyIAP");
      }

      public haveInstanceBuyIAP_args getEmptyArgsInstance() {
        return new haveInstanceBuyIAP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public haveInstanceBuyIAP_result getResult(I iface, haveInstanceBuyIAP_args args) throws org.apache.thrift.TException {
        haveInstanceBuyIAP_result result = new haveInstanceBuyIAP_result();
        try {
          result.success = iface.haveInstanceBuyIAP(args.accountID, args.purchaseToken);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveInstanceBuyIAP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveInstanceBuyIAP_args> {
      public saveInstanceBuyIAP() {
        super("saveInstanceBuyIAP");
      }

      public saveInstanceBuyIAP_args getEmptyArgsInstance() {
        return new saveInstanceBuyIAP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public saveInstanceBuyIAP_result getResult(I iface, saveInstanceBuyIAP_args args) throws org.apache.thrift.TException {
        saveInstanceBuyIAP_result result = new saveInstanceBuyIAP_result();
        try {
          result.success = iface.saveInstanceBuyIAP(args.accountID, args.purchaseToken);
          result.setSuccessIsSet(true);
        } catch (com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("haveInstanceBuyIAP", new haveInstanceBuyIAP());
      processMap.put("saveInstanceBuyIAP", new saveInstanceBuyIAP());
      return processMap;
    }

    public static class haveInstanceBuyIAP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, haveInstanceBuyIAP_args, Boolean> {
      public haveInstanceBuyIAP() {
        super("haveInstanceBuyIAP");
      }

      public haveInstanceBuyIAP_args getEmptyArgsInstance() {
        return new haveInstanceBuyIAP_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            haveInstanceBuyIAP_result result = new haveInstanceBuyIAP_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            haveInstanceBuyIAP_result result = new haveInstanceBuyIAP_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, haveInstanceBuyIAP_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.haveInstanceBuyIAP(args.accountID, args.purchaseToken,resultHandler);
      }
    }

    public static class saveInstanceBuyIAP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveInstanceBuyIAP_args, Boolean> {
      public saveInstanceBuyIAP() {
        super("saveInstanceBuyIAP");
      }

      public saveInstanceBuyIAP_args getEmptyArgsInstance() {
        return new saveInstanceBuyIAP_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            saveInstanceBuyIAP_result result = new saveInstanceBuyIAP_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveInstanceBuyIAP_result result = new saveInstanceBuyIAP_result();
            if (e instanceof com.bamisu.log.sdkthrift.exception.ThriftSVException) {
              result.e = (com.bamisu.log.sdkthrift.exception.ThriftSVException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveInstanceBuyIAP_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.saveInstanceBuyIAP(args.accountID, args.purchaseToken,resultHandler);
      }
    }

  }

  public static class haveInstanceBuyIAP_args implements org.apache.thrift.TBase<haveInstanceBuyIAP_args, haveInstanceBuyIAP_args._Fields>, java.io.Serializable, Cloneable, Comparable<haveInstanceBuyIAP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("haveInstanceBuyIAP_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PURCHASE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseToken", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new haveInstanceBuyIAP_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new haveInstanceBuyIAP_argsTupleSchemeFactory();

    public String accountID; // required
    public String purchaseToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      PURCHASE_TOKEN((short)2, "purchaseToken");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // PURCHASE_TOKEN
            return PURCHASE_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PURCHASE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("purchaseToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(haveInstanceBuyIAP_args.class, metaDataMap);
    }

    public haveInstanceBuyIAP_args() {
    }

    public haveInstanceBuyIAP_args(
      String accountID,
      String purchaseToken)
    {
      this();
      this.accountID = accountID;
      this.purchaseToken = purchaseToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public haveInstanceBuyIAP_args(haveInstanceBuyIAP_args other) {
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      if (other.isSetPurchaseToken()) {
        this.purchaseToken = other.purchaseToken;
      }
    }

    public haveInstanceBuyIAP_args deepCopy() {
      return new haveInstanceBuyIAP_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      this.purchaseToken = null;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public haveInstanceBuyIAP_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public String getPurchaseToken() {
      return this.purchaseToken;
    }

    public haveInstanceBuyIAP_args setPurchaseToken(String purchaseToken) {
      this.purchaseToken = purchaseToken;
      return this;
    }

    public void unsetPurchaseToken() {
      this.purchaseToken = null;
    }

    /** Returns true if field purchaseToken is set (has been assigned a value) and false otherwise */
    public boolean isSetPurchaseToken() {
      return this.purchaseToken != null;
    }

    public void setPurchaseTokenIsSet(boolean value) {
      if (!value) {
        this.purchaseToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case PURCHASE_TOKEN:
        if (value == null) {
          unsetPurchaseToken();
        } else {
          setPurchaseToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case PURCHASE_TOKEN:
        return getPurchaseToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case PURCHASE_TOKEN:
        return isSetPurchaseToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof haveInstanceBuyIAP_args)
        return this.equals((haveInstanceBuyIAP_args)that);
      return false;
    }

    public boolean equals(haveInstanceBuyIAP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_purchaseToken = true && this.isSetPurchaseToken();
      boolean that_present_purchaseToken = true && that.isSetPurchaseToken();
      if (this_present_purchaseToken || that_present_purchaseToken) {
        if (!(this_present_purchaseToken && that_present_purchaseToken))
          return false;
        if (!this.purchaseToken.equals(that.purchaseToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + ((isSetPurchaseToken()) ? 131071 : 524287);
      if (isSetPurchaseToken())
        hashCode = hashCode * 8191 + purchaseToken.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(haveInstanceBuyIAP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurchaseToken()).compareTo(other.isSetPurchaseToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurchaseToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseToken, other.purchaseToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("haveInstanceBuyIAP_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purchaseToken:");
      if (this.purchaseToken == null) {
        sb.append("null");
      } else {
        sb.append(this.purchaseToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      if (purchaseToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'purchaseToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class haveInstanceBuyIAP_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveInstanceBuyIAP_argsStandardScheme getScheme() {
        return new haveInstanceBuyIAP_argsStandardScheme();
      }
    }

    private static class haveInstanceBuyIAP_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<haveInstanceBuyIAP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, haveInstanceBuyIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURCHASE_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.purchaseToken = iprot.readString();
                struct.setPurchaseTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, haveInstanceBuyIAP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        if (struct.purchaseToken != null) {
          oprot.writeFieldBegin(PURCHASE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.purchaseToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class haveInstanceBuyIAP_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveInstanceBuyIAP_argsTupleScheme getScheme() {
        return new haveInstanceBuyIAP_argsTupleScheme();
      }
    }

    private static class haveInstanceBuyIAP_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<haveInstanceBuyIAP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, haveInstanceBuyIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeString(struct.purchaseToken);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, haveInstanceBuyIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.purchaseToken = iprot.readString();
        struct.setPurchaseTokenIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class haveInstanceBuyIAP_result implements org.apache.thrift.TBase<haveInstanceBuyIAP_result, haveInstanceBuyIAP_result._Fields>, java.io.Serializable, Cloneable, Comparable<haveInstanceBuyIAP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("haveInstanceBuyIAP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new haveInstanceBuyIAP_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new haveInstanceBuyIAP_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(haveInstanceBuyIAP_result.class, metaDataMap);
    }

    public haveInstanceBuyIAP_result() {
    }

    public haveInstanceBuyIAP_result(
      boolean success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public haveInstanceBuyIAP_result(haveInstanceBuyIAP_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public haveInstanceBuyIAP_result deepCopy() {
      return new haveInstanceBuyIAP_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public haveInstanceBuyIAP_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public haveInstanceBuyIAP_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof haveInstanceBuyIAP_result)
        return this.equals((haveInstanceBuyIAP_result)that);
      return false;
    }

    public boolean equals(haveInstanceBuyIAP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(haveInstanceBuyIAP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("haveInstanceBuyIAP_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class haveInstanceBuyIAP_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveInstanceBuyIAP_resultStandardScheme getScheme() {
        return new haveInstanceBuyIAP_resultStandardScheme();
      }
    }

    private static class haveInstanceBuyIAP_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<haveInstanceBuyIAP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, haveInstanceBuyIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, haveInstanceBuyIAP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class haveInstanceBuyIAP_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public haveInstanceBuyIAP_resultTupleScheme getScheme() {
        return new haveInstanceBuyIAP_resultTupleScheme();
      }
    }

    private static class haveInstanceBuyIAP_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<haveInstanceBuyIAP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, haveInstanceBuyIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, haveInstanceBuyIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveInstanceBuyIAP_args implements org.apache.thrift.TBase<saveInstanceBuyIAP_args, saveInstanceBuyIAP_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveInstanceBuyIAP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveInstanceBuyIAP_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PURCHASE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseToken", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveInstanceBuyIAP_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveInstanceBuyIAP_argsTupleSchemeFactory();

    public String accountID; // required
    public String purchaseToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_ID((short)1, "accountID"),
      PURCHASE_TOKEN((short)2, "purchaseToken");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_ID
            return ACCOUNT_ID;
          case 2: // PURCHASE_TOKEN
            return PURCHASE_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PURCHASE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("purchaseToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveInstanceBuyIAP_args.class, metaDataMap);
    }

    public saveInstanceBuyIAP_args() {
    }

    public saveInstanceBuyIAP_args(
      String accountID,
      String purchaseToken)
    {
      this();
      this.accountID = accountID;
      this.purchaseToken = purchaseToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveInstanceBuyIAP_args(saveInstanceBuyIAP_args other) {
      if (other.isSetAccountID()) {
        this.accountID = other.accountID;
      }
      if (other.isSetPurchaseToken()) {
        this.purchaseToken = other.purchaseToken;
      }
    }

    public saveInstanceBuyIAP_args deepCopy() {
      return new saveInstanceBuyIAP_args(this);
    }

    @Override
    public void clear() {
      this.accountID = null;
      this.purchaseToken = null;
    }

    public String getAccountID() {
      return this.accountID;
    }

    public saveInstanceBuyIAP_args setAccountID(String accountID) {
      this.accountID = accountID;
      return this;
    }

    public void unsetAccountID() {
      this.accountID = null;
    }

    /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountID() {
      return this.accountID != null;
    }

    public void setAccountIDIsSet(boolean value) {
      if (!value) {
        this.accountID = null;
      }
    }

    public String getPurchaseToken() {
      return this.purchaseToken;
    }

    public saveInstanceBuyIAP_args setPurchaseToken(String purchaseToken) {
      this.purchaseToken = purchaseToken;
      return this;
    }

    public void unsetPurchaseToken() {
      this.purchaseToken = null;
    }

    /** Returns true if field purchaseToken is set (has been assigned a value) and false otherwise */
    public boolean isSetPurchaseToken() {
      return this.purchaseToken != null;
    }

    public void setPurchaseTokenIsSet(boolean value) {
      if (!value) {
        this.purchaseToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountID();
        } else {
          setAccountID((String)value);
        }
        break;

      case PURCHASE_TOKEN:
        if (value == null) {
          unsetPurchaseToken();
        } else {
          setPurchaseToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_ID:
        return getAccountID();

      case PURCHASE_TOKEN:
        return getPurchaseToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_ID:
        return isSetAccountID();
      case PURCHASE_TOKEN:
        return isSetPurchaseToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveInstanceBuyIAP_args)
        return this.equals((saveInstanceBuyIAP_args)that);
      return false;
    }

    public boolean equals(saveInstanceBuyIAP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountID = true && this.isSetAccountID();
      boolean that_present_accountID = true && that.isSetAccountID();
      if (this_present_accountID || that_present_accountID) {
        if (!(this_present_accountID && that_present_accountID))
          return false;
        if (!this.accountID.equals(that.accountID))
          return false;
      }

      boolean this_present_purchaseToken = true && this.isSetPurchaseToken();
      boolean that_present_purchaseToken = true && that.isSetPurchaseToken();
      if (this_present_purchaseToken || that_present_purchaseToken) {
        if (!(this_present_purchaseToken && that_present_purchaseToken))
          return false;
        if (!this.purchaseToken.equals(that.purchaseToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
      if (isSetAccountID())
        hashCode = hashCode * 8191 + accountID.hashCode();

      hashCode = hashCode * 8191 + ((isSetPurchaseToken()) ? 131071 : 524287);
      if (isSetPurchaseToken())
        hashCode = hashCode * 8191 + purchaseToken.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveInstanceBuyIAP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurchaseToken()).compareTo(other.isSetPurchaseToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurchaseToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseToken, other.purchaseToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveInstanceBuyIAP_args(");
      boolean first = true;

      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purchaseToken:");
      if (this.purchaseToken == null) {
        sb.append("null");
      } else {
        sb.append(this.purchaseToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (accountID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not present! Struct: " + toString());
      }
      if (purchaseToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'purchaseToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveInstanceBuyIAP_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveInstanceBuyIAP_argsStandardScheme getScheme() {
        return new saveInstanceBuyIAP_argsStandardScheme();
      }
    }

    private static class saveInstanceBuyIAP_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveInstanceBuyIAP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveInstanceBuyIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountID = iprot.readString();
                struct.setAccountIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURCHASE_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.purchaseToken = iprot.readString();
                struct.setPurchaseTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveInstanceBuyIAP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountID != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
        if (struct.purchaseToken != null) {
          oprot.writeFieldBegin(PURCHASE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.purchaseToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveInstanceBuyIAP_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveInstanceBuyIAP_argsTupleScheme getScheme() {
        return new saveInstanceBuyIAP_argsTupleScheme();
      }
    }

    private static class saveInstanceBuyIAP_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveInstanceBuyIAP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveInstanceBuyIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.accountID);
        oprot.writeString(struct.purchaseToken);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveInstanceBuyIAP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
        struct.purchaseToken = iprot.readString();
        struct.setPurchaseTokenIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveInstanceBuyIAP_result implements org.apache.thrift.TBase<saveInstanceBuyIAP_result, saveInstanceBuyIAP_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveInstanceBuyIAP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveInstanceBuyIAP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveInstanceBuyIAP_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveInstanceBuyIAP_resultTupleSchemeFactory();

    public boolean success; // required
    public com.bamisu.log.sdkthrift.exception.ThriftSVException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bamisu.log.sdkthrift.exception.ThriftSVException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveInstanceBuyIAP_result.class, metaDataMap);
    }

    public saveInstanceBuyIAP_result() {
    }

    public saveInstanceBuyIAP_result(
      boolean success,
      com.bamisu.log.sdkthrift.exception.ThriftSVException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveInstanceBuyIAP_result(saveInstanceBuyIAP_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException(other.e);
      }
    }

    public saveInstanceBuyIAP_result deepCopy() {
      return new saveInstanceBuyIAP_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public saveInstanceBuyIAP_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.bamisu.log.sdkthrift.exception.ThriftSVException getE() {
      return this.e;
    }

    public saveInstanceBuyIAP_result setE(com.bamisu.log.sdkthrift.exception.ThriftSVException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.bamisu.log.sdkthrift.exception.ThriftSVException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveInstanceBuyIAP_result)
        return this.equals((saveInstanceBuyIAP_result)that);
      return false;
    }

    public boolean equals(saveInstanceBuyIAP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveInstanceBuyIAP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveInstanceBuyIAP_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveInstanceBuyIAP_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveInstanceBuyIAP_resultStandardScheme getScheme() {
        return new saveInstanceBuyIAP_resultStandardScheme();
      }
    }

    private static class saveInstanceBuyIAP_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveInstanceBuyIAP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveInstanceBuyIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveInstanceBuyIAP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveInstanceBuyIAP_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveInstanceBuyIAP_resultTupleScheme getScheme() {
        return new saveInstanceBuyIAP_resultTupleScheme();
      }
    }

    private static class saveInstanceBuyIAP_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveInstanceBuyIAP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveInstanceBuyIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveInstanceBuyIAP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.bamisu.log.sdkthrift.exception.ThriftSVException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
