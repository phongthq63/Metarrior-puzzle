package com.bamisu.log.nft.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.0.
 */
public class Hero extends Contract {
    private static final String BINARY = "0x60806040526000600b60146101000a81548160ff0219169083151502179055503480156200002c57600080fd5b506040518060400160405280600e81526020017f4d6574617272696f72204865726f0000000000000000000000000000000000008152506040518060400160405280600981526020017f4d6574617272696f7200000000000000000000000000000000000000000000008152508160009080519060200190620000b1929190620001c1565b508060019080519060200190620000ca929190620001c1565b505050620000ed620000e1620000f360201b60201c565b620000fb60201b60201c565b620002d6565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001cf9062000271565b90600052602060002090601f016020900481019282620001f357600085556200023f565b82601f106200020e57805160ff19168380011785556200023f565b828001600101855582156200023f579182015b828111156200023e57825182559160200191906001019062000221565b5b5090506200024e919062000252565b5090565b5b808211156200026d57600081600090555060010162000253565b5090565b600060028204905060018216806200028a57607f821691505b60208210811415620002a157620002a0620002a7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61484780620002e66000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c8063744e40ee1161011a578063c7e42b1b116100ad578063d357f0a81161007c578063d357f0a81461060d578063da86f4a91461063d578063e985e9c51461066d578063ecd0c0c31461069d578063f2fde38b146106bb57610206565b8063c7e42b1b14610573578063c87b56dd1461058f578063cd7405b3146105bf578063cf9a197d146105ef57610206565b80639ced8c2d116100e95780639ced8c2d146104ef578063a22cb4651461050b578063b88d4fde14610527578063bb032a661461054357610206565b8063744e40ee146104675780638da5cb5b1461048357806395d89b41146104a15780639a08ee3b146104bf57610206565b80632f745c591161019d57806342842e0e1161016c57806342842e0e146103b15780634f6ccce7146103cd5780636352211e146103fd57806370a082311461042d578063715018a61461045d57610206565b80632f745c591461032b5780633927f6af1461035b5780633ccfd60b14610377578063406d382a1461038157610206565b8063095ea7b3116101d9578063095ea7b3146102b9578063144fa6d7146102d557806318160ddd146102f157806323b872dd1461030f57610206565b806301ffc9a71461020b57806306fdde031461023b578063077ed5c514610259578063081812fc14610289575b600080fd5b610225600480360381019061022091906133c3565b6106d7565b6040516102329190613a89565b60405180910390f35b610243610751565b6040516102509190613abf565b60405180910390f35b610273600480360381019061026e919061347f565b6107e3565b6040516102809190613d61565b60405180910390f35b6102a3600480360381019061029e919061347f565b61087f565b6040516102b091906139a0565b60405180910390f35b6102d360048036038101906102ce91906132f4565b610904565b005b6102ef60048036038101906102ea9190613415565b610a1c565b005b6102f9610adc565b6040516103069190613d61565b60405180910390f35b610329600480360381019061032491906131ee565b610ae9565b005b610345600480360381019061034091906132f4565b610b49565b6040516103529190613d61565b60405180910390f35b61037560048036038101906103709190613371565b610bee565b005b61037f610c87565b005b61039b600480360381019061039691906134d1565b610d4c565b6040516103a89190613a89565b60405180910390f35b6103cb60048036038101906103c691906131ee565b610f24565b005b6103e760048036038101906103e2919061347f565b610f44565b6040516103f49190613d61565b60405180910390f35b6104176004803603810190610412919061347f565b610fdb565b60405161042491906139a0565b60405180910390f35b61044760048036038101906104429190613189565b61108d565b6040516104549190613d61565b60405180910390f35b610465611145565b005b610481600480360381019061047c919061350d565b6111cd565b005b61048b61128d565b60405161049891906139a0565b60405180910390f35b6104a96112b7565b6040516104b69190613abf565b60405180910390f35b6104d960048036038101906104d4919061347f565b611349565b6040516104e69190613abf565b60405180910390f35b6105096004803603810190610504919061347f565b61146a565b005b610525600480360381019061052091906132b8565b611545565b005b610541600480360381019061053c919061323d565b61155b565b005b61055d60048036038101906105589190613189565b6115bd565b60405161056a9190613a67565b60405180910390f35b61058d60048036038101906105889190613415565b6116b7565b005b6105a960048036038101906105a4919061347f565b61184c565b6040516105b69190613abf565b60405180910390f35b6105d960048036038101906105d49190613330565b6118f3565b6040516105e69190613a67565b60405180910390f35b6105f7611a20565b6040516106049190613a89565b60405180910390f35b61062760048036038101906106229190613189565b611a33565b6040516106349190613d61565b60405180910390f35b6106576004803603810190610652919061343e565b611a4b565b6040516106649190613d61565b60405180910390f35b610687600480360381019061068291906131b2565b611a81565b6040516106949190613a89565b60405180910390f35b6106a5611b15565b6040516106b29190613aa4565b60405180910390f35b6106d560048036038101906106d09190613189565b611b3b565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061074a575061074982611c33565b5b9050919050565b606060008054610760906140ac565b80601f016020809104026020016040519081016040528092919081815260200182805461078c906140ac565b80156107d95780601f106107ae576101008083540402835291602001916107d9565b820191906000526020600020905b8154815290600101906020018083116107bc57829003601f168201915b5050505050905090565b60006107ed611d15565b73ffffffffffffffffffffffffffffffffffffffff1661080b61128d565b73ffffffffffffffffffffffffffffffffffffffff1614610861576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085890613c81565b60405180910390fd5b600d6000838152602001908152602001600020600101549050919050565b600061088a82611d1d565b6108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090613c61565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061090f82610fdb565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610980576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097790613ce1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661099f611d15565b73ffffffffffffffffffffffffffffffffffffffff1614806109ce57506109cd816109c8611d15565b611a81565b5b610a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0490613be1565b60405180910390fd5b610a178383611d89565b505050565b610a24611d15565b73ffffffffffffffffffffffffffffffffffffffff16610a4261128d565b73ffffffffffffffffffffffffffffffffffffffff1614610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f90613c81565b60405180910390fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600880549050905090565b610afa610af4611d15565b82611e42565b610b39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3090613d21565b60405180910390fd5b610b44838383611f20565b505050565b6000610b548361108d565b8210610b95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8c90613ae1565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610bf6611d15565b73ffffffffffffffffffffffffffffffffffffffff16610c1461128d565b73ffffffffffffffffffffffffffffffffffffffff1614610c6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6190613c81565b60405180910390fd5b80600b60146101000a81548160ff02191690831515021790555050565b610c8f611d15565b73ffffffffffffffffffffffffffffffffffffffff16610cad61128d565b73ffffffffffffffffffffffffffffffffffffffff1614610d03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfa90613c81565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610d49573d6000803e3d6000fd5b50565b6000600d600083815260200190815260200160002060010154831080610d85575060011515600b60149054906101000a900460ff161515145b610dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbb90613cc1565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333086600d600088815260200190815260200160002060000154610e269190613f32565b6040518463ffffffff1660e01b8152600401610e44939291906139bb565b602060405180830381600087803b158015610e5e57600080fd5b505af1158015610e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e96919061339a565b5082600d60008481526020019081526020016000206001016000828254610ebd9190613f8c565b9250508190555082600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f139190613eab565b925050819055506001905092915050565b610f3f8383836040518060200160405280600081525061155b565b505050565b6000610f4e610adc565b8210610f8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8690613d41565b60405180910390fd5b60088281548110610fc9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107b90613c21565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f590613c01565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61114d611d15565b73ffffffffffffffffffffffffffffffffffffffff1661116b61128d565b73ffffffffffffffffffffffffffffffffffffffff16146111c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b890613c81565b60405180910390fd5b6111cb6000612187565b565b6111d5611d15565b73ffffffffffffffffffffffffffffffffffffffff166111f361128d565b73ffffffffffffffffffffffffffffffffffffffff1614611249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124090613c81565b60405180910390fd5b604051806040016040528083815260200182815250600d60008581526020019081526020016000206000820151816000015560208201518160010155905050505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546112c6906140ac565b80601f01602080910402602001604051908101604052809291908181526020018280546112f2906140ac565b801561133f5780601f106113145761010080835404028352916020019161133f565b820191906000526020600020905b81548152906001019060200180831161132257829003601f168201915b5050505050905090565b6060611353611d15565b73ffffffffffffffffffffffffffffffffffffffff1661137161128d565b73ffffffffffffffffffffffffffffffffffffffff16146113c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113be90613c81565b60405180910390fd5b600e600083815260200190815260200160002080546113e5906140ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611411906140ac565b801561145e5780601f106114335761010080835404028352916020019161145e565b820191906000526020600020905b81548152906001019060200180831161144157829003601f168201915b50505050509050919050565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156114ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e390613d01565b60405180910390fd5b80600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461153b9190613f8c565b9250508190555050565b611557611550611d15565b838361224d565b5050565b61156c611566611d15565b83611e42565b6115ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a290613d21565b60405180910390fd5b6115b7848484846123ba565b50505050565b606060006115ca8361108d565b905060008167ffffffffffffffff81111561160e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561163c5781602001602082028036833780820191505090505b50905060005b828110156116ac576116548582610b49565b82828151811061168d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806116a49061410f565b915050611642565b508092505050919050565b6116bf611d15565b73ffffffffffffffffffffffffffffffffffffffff166116dd61128d565b73ffffffffffffffffffffffffffffffffffffffff1614611733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172a90613c81565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161178991906139a0565b60206040518083038186803b1580156117a157600080fd5b505afa1580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d991906134a8565b6040518363ffffffff1660e01b81526004016117f6929190613a3e565b602060405180830381600087803b15801561181057600080fd5b505af1158015611824573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611848919061339a565b5050565b606061185782611d1d565b611896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188d90613ca1565b60405180910390fd5b60006118a0612416565b905060008151116118c057604051806020016040528060008152506118eb565b806118ca8461242d565b6040516020016118db92919061397c565b6040516020818303038152906040525b915050919050565b60606000825167ffffffffffffffff811115611938577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156119665781602001602082028036833780820191505090505b50905060005b8351811015611a16576119be8482815181106119b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611a4b565b8282815181106119f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611a0e9061410f565b91505061196c565b5080915050919050565b600b60149054906101000a900460ff1681565b600c6020528060005260406000206000915090505481565b600080611a58600f6125da565b9050611a6433826125e8565b611a6e600f6127c2565b611a7881846127d8565b80915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611b43611d15565b73ffffffffffffffffffffffffffffffffffffffff16611b6161128d565b73ffffffffffffffffffffffffffffffffffffffff1614611bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bae90613c81565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1e90613b21565b60405180910390fd5b611c3081612187565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611cfe57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611d0e5750611d0d82612804565b5b9050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611dfc83610fdb565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611e4d82611d1d565b611e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8390613bc1565b60405180910390fd5b6000611e9783610fdb565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f0657508373ffffffffffffffffffffffffffffffffffffffff16611eee8461087f565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f175750611f168185611a81565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f4082610fdb565b73ffffffffffffffffffffffffffffffffffffffff1614611f96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8d90613b41565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffd90613b81565b60405180910390fd5b61201183838361286e565b61201c600082611d89565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461206c9190613f8c565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120c39190613eab565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612182838383612982565b505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156122bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b390613ba1565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516123ad9190613a89565b60405180910390a3505050565b6123c5848484611f20565b6123d184848484612987565b612410576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240790613b01565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415612475576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506125d5565b600082905060005b600082146124a75780806124909061410f565b915050600a826124a09190613f01565b915061247d565b60008167ffffffffffffffff8111156124e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561251b5781602001600182028036833780820191505090505b5090505b600085146125ce576001826125349190613f8c565b9150600a856125439190614158565b603061254f9190613eab565b60f81b81838151811061258b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856125c79190613f01565b945061251f565b8093505050505b919050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264f90613c41565b60405180910390fd5b61266181611d1d565b156126a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269890613b61565b60405180910390fd5b6126ad6000838361286e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126fd9190613eab565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46127be60008383612982565b5050565b6001816000016000828254019250508190555050565b80600e600084815260200190815260200160002090805190602001906127ff929190612ebe565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612879838383612b1e565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156128bc576128b781612b23565b6128fb565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146128fa576128f98382612b6c565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561293e5761293981612cd9565b61297d565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461297c5761297b8282612e1c565b5b5b505050565b505050565b60006129a88473ffffffffffffffffffffffffffffffffffffffff16612e9b565b15612b11578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026129d1611d15565b8786866040518563ffffffff1660e01b81526004016129f394939291906139f2565b602060405180830381600087803b158015612a0d57600080fd5b505af1925050508015612a3e57506040513d601f19601f82011682018060405250810190612a3b91906133ec565b60015b612ac1573d8060008114612a6e576040519150601f19603f3d011682016040523d82523d6000602084013e612a73565b606091505b50600081511415612ab9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ab090613b01565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612b16565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612b798461108d565b612b839190613f8c565b9050600060076000848152602001908152602001600020549050818114612c68576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612ced9190613f8c565b9050600060096000848152602001908152602001600020549050600060088381548110612d43577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110612d8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612e00577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612e278361108d565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612eca906140ac565b90600052602060002090601f016020900481019282612eec5760008555612f33565b82601f10612f0557805160ff1916838001178555612f33565b82800160010185558215612f33579182015b82811115612f32578251825591602001919060010190612f17565b5b509050612f409190612f44565b5090565b5b80821115612f5d576000816000905550600101612f45565b5090565b6000612f74612f6f84613da1565b613d7c565b90508083825260208201905082856020860282011115612f9357600080fd5b60005b85811015612fdd57813567ffffffffffffffff811115612fb557600080fd5b808601612fc28982613135565b85526020850194506020840193505050600181019050612f96565b5050509392505050565b6000612ffa612ff584613dcd565b613d7c565b90508281526020810184848401111561301257600080fd5b61301d84828561406a565b509392505050565b600061303861303384613dfe565b613d7c565b90508281526020810184848401111561305057600080fd5b61305b84828561406a565b509392505050565b6000813590506130728161479e565b92915050565b600082601f83011261308957600080fd5b8135613099848260208601612f61565b91505092915050565b6000813590506130b1816147b5565b92915050565b6000815190506130c6816147b5565b92915050565b6000813590506130db816147cc565b92915050565b6000815190506130f0816147cc565b92915050565b600082601f83011261310757600080fd5b8135613117848260208601612fe7565b91505092915050565b60008135905061312f816147e3565b92915050565b600082601f83011261314657600080fd5b8135613156848260208601613025565b91505092915050565b60008135905061316e816147fa565b92915050565b600081519050613183816147fa565b92915050565b60006020828403121561319b57600080fd5b60006131a984828501613063565b91505092915050565b600080604083850312156131c557600080fd5b60006131d385828601613063565b92505060206131e485828601613063565b9150509250929050565b60008060006060848603121561320357600080fd5b600061321186828701613063565b935050602061322286828701613063565b92505060406132338682870161315f565b9150509250925092565b6000806000806080858703121561325357600080fd5b600061326187828801613063565b945050602061327287828801613063565b93505060406132838782880161315f565b925050606085013567ffffffffffffffff8111156132a057600080fd5b6132ac878288016130f6565b91505092959194509250565b600080604083850312156132cb57600080fd5b60006132d985828601613063565b92505060206132ea858286016130a2565b9150509250929050565b6000806040838503121561330757600080fd5b600061331585828601613063565b92505060206133268582860161315f565b9150509250929050565b60006020828403121561334257600080fd5b600082013567ffffffffffffffff81111561335c57600080fd5b61336884828501613078565b91505092915050565b60006020828403121561338357600080fd5b6000613391848285016130a2565b91505092915050565b6000602082840312156133ac57600080fd5b60006133ba848285016130b7565b91505092915050565b6000602082840312156133d557600080fd5b60006133e3848285016130cc565b91505092915050565b6000602082840312156133fe57600080fd5b600061340c848285016130e1565b91505092915050565b60006020828403121561342757600080fd5b600061343584828501613120565b91505092915050565b60006020828403121561345057600080fd5b600082013567ffffffffffffffff81111561346a57600080fd5b61347684828501613135565b91505092915050565b60006020828403121561349157600080fd5b600061349f8482850161315f565b91505092915050565b6000602082840312156134ba57600080fd5b60006134c884828501613174565b91505092915050565b600080604083850312156134e457600080fd5b60006134f28582860161315f565b92505060206135038582860161315f565b9150509250929050565b60008060006060848603121561352257600080fd5b60006135308682870161315f565b93505060206135418682870161315f565b92505060406135528682870161315f565b9150509250925092565b6000613568838361395e565b60208301905092915050565b61357d81613fc0565b82525050565b600061358e82613e3f565b6135988185613e6d565b93506135a383613e2f565b8060005b838110156135d45781516135bb888261355c565b97506135c683613e60565b9250506001810190506135a7565b5085935050505092915050565b6135ea81613fd2565b82525050565b60006135fb82613e4a565b6136058185613e7e565b9350613615818560208601614079565b61361e81614245565b840191505092915050565b61363281614046565b82525050565b600061364382613e55565b61364d8185613e8f565b935061365d818560208601614079565b61366681614245565b840191505092915050565b600061367c82613e55565b6136868185613ea0565b9350613696818560208601614079565b80840191505092915050565b60006136af602b83613e8f565b91506136ba82614256565b604082019050919050565b60006136d2603283613e8f565b91506136dd826142a5565b604082019050919050565b60006136f5602683613e8f565b9150613700826142f4565b604082019050919050565b6000613718602583613e8f565b915061372382614343565b604082019050919050565b600061373b601c83613e8f565b915061374682614392565b602082019050919050565b600061375e602483613e8f565b9150613769826143bb565b604082019050919050565b6000613781601983613e8f565b915061378c8261440a565b602082019050919050565b60006137a4602c83613e8f565b91506137af82614433565b604082019050919050565b60006137c7603883613e8f565b91506137d282614482565b604082019050919050565b60006137ea602a83613e8f565b91506137f5826144d1565b604082019050919050565b600061380d602983613e8f565b915061381882614520565b604082019050919050565b6000613830602083613e8f565b915061383b8261456f565b602082019050919050565b6000613853602c83613e8f565b915061385e82614598565b604082019050919050565b6000613876602083613e8f565b9150613881826145e7565b602082019050919050565b6000613899602f83613e8f565b91506138a482614610565b604082019050919050565b60006138bc601883613e8f565b91506138c78261465f565b602082019050919050565b60006138df602183613e8f565b91506138ea82614688565b604082019050919050565b6000613902601f83613e8f565b915061390d826146d7565b602082019050919050565b6000613925603183613e8f565b915061393082614700565b604082019050919050565b6000613948602c83613e8f565b91506139538261474f565b604082019050919050565b6139678161403c565b82525050565b6139768161403c565b82525050565b60006139888285613671565b91506139948284613671565b91508190509392505050565b60006020820190506139b56000830184613574565b92915050565b60006060820190506139d06000830186613574565b6139dd6020830185613574565b6139ea604083018461396d565b949350505050565b6000608082019050613a076000830187613574565b613a146020830186613574565b613a21604083018561396d565b8181036060830152613a3381846135f0565b905095945050505050565b6000604082019050613a536000830185613574565b613a60602083018461396d565b9392505050565b60006020820190508181036000830152613a818184613583565b905092915050565b6000602082019050613a9e60008301846135e1565b92915050565b6000602082019050613ab96000830184613629565b92915050565b60006020820190508181036000830152613ad98184613638565b905092915050565b60006020820190508181036000830152613afa816136a2565b9050919050565b60006020820190508181036000830152613b1a816136c5565b9050919050565b60006020820190508181036000830152613b3a816136e8565b9050919050565b60006020820190508181036000830152613b5a8161370b565b9050919050565b60006020820190508181036000830152613b7a8161372e565b9050919050565b60006020820190508181036000830152613b9a81613751565b9050919050565b60006020820190508181036000830152613bba81613774565b9050919050565b60006020820190508181036000830152613bda81613797565b9050919050565b60006020820190508181036000830152613bfa816137ba565b9050919050565b60006020820190508181036000830152613c1a816137dd565b9050919050565b60006020820190508181036000830152613c3a81613800565b9050919050565b60006020820190508181036000830152613c5a81613823565b9050919050565b60006020820190508181036000830152613c7a81613846565b9050919050565b60006020820190508181036000830152613c9a81613869565b9050919050565b60006020820190508181036000830152613cba8161388c565b9050919050565b60006020820190508181036000830152613cda816138af565b9050919050565b60006020820190508181036000830152613cfa816138d2565b9050919050565b60006020820190508181036000830152613d1a816138f5565b9050919050565b60006020820190508181036000830152613d3a81613918565b9050919050565b60006020820190508181036000830152613d5a8161393b565b9050919050565b6000602082019050613d76600083018461396d565b92915050565b6000613d86613d97565b9050613d9282826140de565b919050565b6000604051905090565b600067ffffffffffffffff821115613dbc57613dbb614216565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613de857613de7614216565b5b613df182614245565b9050602081019050919050565b600067ffffffffffffffff821115613e1957613e18614216565b5b613e2282614245565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613eb68261403c565b9150613ec18361403c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ef657613ef5614189565b5b828201905092915050565b6000613f0c8261403c565b9150613f178361403c565b925082613f2757613f266141b8565b5b828204905092915050565b6000613f3d8261403c565b9150613f488361403c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f8157613f80614189565b5b828202905092915050565b6000613f978261403c565b9150613fa28361403c565b925082821015613fb557613fb4614189565b5b828203905092915050565b6000613fcb8261401c565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061401582613fc0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061405182614058565b9050919050565b60006140638261401c565b9050919050565b82818337600083830152505050565b60005b8381101561409757808201518184015260208101905061407c565b838111156140a6576000848401525b50505050565b600060028204905060018216806140c457607f821691505b602082108114156140d8576140d76141e7565b5b50919050565b6140e782614245565b810181811067ffffffffffffffff8211171561410657614105614216565b5b80604052505050565b600061411a8261403c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561414d5761414c614189565b5b600182019050919050565b60006141638261403c565b915061416e8361403c565b92508261417e5761417d6141b8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f596f752063616e206e6f742062757920616e7920426f782e0000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f54686520626f7873206973206e6f7420656e6f75676820746f206f70656e2e00600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6147a781613fc0565b81146147b257600080fd5b50565b6147be81613fd2565b81146147c957600080fd5b50565b6147d581613fde565b81146147e057600080fd5b50565b6147ec8161400a565b81146147f757600080fd5b50565b6148038161403c565b811461480e57600080fd5b5056fea2646970667358221220deb600dc17599863e9fe5410fb148afd18e44e462828c6a67c35b3c3b087d71064736f6c63430008040033";

    public static final String FUNC__FLAG = "_flag";

    public static final String FUNC__TOKEN = "_token";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BOXS = "boxs";

    public static final String FUNC_BUYBOX = "buyBox";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETHEROBYTOKENID = "getHeroByTokenId";

    public static final String FUNC_GETQUANTITYBYTYPE = "getQuantityByType";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_LIST = "list";

    public static final String FUNC_MINTNFT = "mintNft";

    public static final String FUNC_MINTNFTS = "mintNfts";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OPENBOXSANDAWARDS = "openBoxsAndAwards";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETFLAG = "setFlag";

    public static final String FUNC_SETQUANTITYBOXBYTYPE = "setQuantityBoxByType";

    public static final String FUNC_SETTOKEN = "setToken";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWERC20 = "withdrawErc20";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected Hero(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Hero(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Hero(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Hero(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> _flag() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__FLAG, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> _token() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__TOKEN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> boxs(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BOXS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buyBox(BigInteger _quantityBoxs, BigInteger _type) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUYBOX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_quantityBoxs), 
                new org.web3j.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getHeroByTokenId(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETHEROBYTOKENID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> getQuantityByType(BigInteger _type) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETQUANTITYBYTYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> list(String _address) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mintNft(String heroId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(heroId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mintNfts(List<String> _listHeroId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTNFTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.Utils.typeMap(_listHeroId, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NAME, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> openBoxsAndAwards(BigInteger _quantityBoxs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OPENBOXSANDAWARDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_quantityBoxs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setFlag(Boolean flag) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFLAG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(flag)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setQuantityBoxByType(BigInteger _type, BigInteger _price, BigInteger _quantity) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETQUANTITYBOXBYTYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_type), 
                new org.web3j.abi.datatypes.generated.Uint256(_price), 
                new org.web3j.abi.datatypes.generated.Uint256(_quantity)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setToken(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawErc20(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWERC20, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Hero load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Hero(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Hero load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Hero(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Hero load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Hero(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Hero load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Hero(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Hero> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Hero.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Hero> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Hero.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Hero> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Hero.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Hero> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Hero.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse {
        public Log log;

        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
